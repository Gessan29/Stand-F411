
StandF411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e98  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08005030  08005030  00006030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005260  08005260  00007098  2**0
                  CONTENTS
  4 .ARM          00000008  08005260  08005260  00006260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005268  08005268  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005268  08005268  00006268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800526c  0800526c  0000626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08005270  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  20000098  08005308  00007098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007dc  08005308  000077dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a42b  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db2  00000000  00000000  000114f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  000132a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c3  00000000  00000000  00013b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175ee  00000000  00000000  00014233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c090  00000000  00000000  0002b821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091dae  00000000  00000000  000378b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c965f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000270c  00000000  00000000  000c96a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000cbdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005018 	.word	0x08005018

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	08005018 	.word	0x08005018

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	@ 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2f>:
 8000984:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000988:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800098c:	bf24      	itt	cs
 800098e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000992:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000996:	d90d      	bls.n	80009b4 <__aeabi_d2f+0x30>
 8000998:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800099c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009a4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009b8:	d121      	bne.n	80009fe <__aeabi_d2f+0x7a>
 80009ba:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009be:	bfbc      	itt	lt
 80009c0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009c4:	4770      	bxlt	lr
 80009c6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ce:	f1c2 0218 	rsb	r2, r2, #24
 80009d2:	f1c2 0c20 	rsb	ip, r2, #32
 80009d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009da:	fa20 f002 	lsr.w	r0, r0, r2
 80009de:	bf18      	it	ne
 80009e0:	f040 0001 	orrne.w	r0, r0, #1
 80009e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f0:	ea40 000c 	orr.w	r0, r0, ip
 80009f4:	fa23 f302 	lsr.w	r3, r3, r2
 80009f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009fc:	e7cc      	b.n	8000998 <__aeabi_d2f+0x14>
 80009fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a02:	d107      	bne.n	8000a14 <__aeabi_d2f+0x90>
 8000a04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a08:	bf1e      	ittt	ne
 8000a0a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a0e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a12:	4770      	bxne	lr
 8000a14:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a18:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a1c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_uldivmod>:
 8000a24:	b953      	cbnz	r3, 8000a3c <__aeabi_uldivmod+0x18>
 8000a26:	b94a      	cbnz	r2, 8000a3c <__aeabi_uldivmod+0x18>
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	bf08      	it	eq
 8000a2c:	2800      	cmpeq	r0, #0
 8000a2e:	bf1c      	itt	ne
 8000a30:	f04f 31ff 	movne.w	r1, #4294967295
 8000a34:	f04f 30ff 	movne.w	r0, #4294967295
 8000a38:	f000 b96a 	b.w	8000d10 <__aeabi_idiv0>
 8000a3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a44:	f000 f806 	bl	8000a54 <__udivmoddi4>
 8000a48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr

08000a54 <__udivmoddi4>:
 8000a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a58:	9d08      	ldr	r5, [sp, #32]
 8000a5a:	460c      	mov	r4, r1
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d14e      	bne.n	8000afe <__udivmoddi4+0xaa>
 8000a60:	4694      	mov	ip, r2
 8000a62:	458c      	cmp	ip, r1
 8000a64:	4686      	mov	lr, r0
 8000a66:	fab2 f282 	clz	r2, r2
 8000a6a:	d962      	bls.n	8000b32 <__udivmoddi4+0xde>
 8000a6c:	b14a      	cbz	r2, 8000a82 <__udivmoddi4+0x2e>
 8000a6e:	f1c2 0320 	rsb	r3, r2, #32
 8000a72:	4091      	lsls	r1, r2
 8000a74:	fa20 f303 	lsr.w	r3, r0, r3
 8000a78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a7c:	4319      	orrs	r1, r3
 8000a7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a86:	fa1f f68c 	uxth.w	r6, ip
 8000a8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a92:	fb07 1114 	mls	r1, r7, r4, r1
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb04 f106 	mul.w	r1, r4, r6
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d90a      	bls.n	8000ab8 <__udivmoddi4+0x64>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aaa:	f080 8112 	bcs.w	8000cd2 <__udivmoddi4+0x27e>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 810f 	bls.w	8000cd2 <__udivmoddi4+0x27e>
 8000ab4:	3c02      	subs	r4, #2
 8000ab6:	4463      	add	r3, ip
 8000ab8:	1a59      	subs	r1, r3, r1
 8000aba:	fa1f f38e 	uxth.w	r3, lr
 8000abe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb00 f606 	mul.w	r6, r0, r6
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x94>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ada:	f080 80fc 	bcs.w	8000cd6 <__udivmoddi4+0x282>
 8000ade:	429e      	cmp	r6, r3
 8000ae0:	f240 80f9 	bls.w	8000cd6 <__udivmoddi4+0x282>
 8000ae4:	4463      	add	r3, ip
 8000ae6:	3802      	subs	r0, #2
 8000ae8:	1b9b      	subs	r3, r3, r6
 8000aea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aee:	2100      	movs	r1, #0
 8000af0:	b11d      	cbz	r5, 8000afa <__udivmoddi4+0xa6>
 8000af2:	40d3      	lsrs	r3, r2
 8000af4:	2200      	movs	r2, #0
 8000af6:	e9c5 3200 	strd	r3, r2, [r5]
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d905      	bls.n	8000b0e <__udivmoddi4+0xba>
 8000b02:	b10d      	cbz	r5, 8000b08 <__udivmoddi4+0xb4>
 8000b04:	e9c5 0100 	strd	r0, r1, [r5]
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4608      	mov	r0, r1
 8000b0c:	e7f5      	b.n	8000afa <__udivmoddi4+0xa6>
 8000b0e:	fab3 f183 	clz	r1, r3
 8000b12:	2900      	cmp	r1, #0
 8000b14:	d146      	bne.n	8000ba4 <__udivmoddi4+0x150>
 8000b16:	42a3      	cmp	r3, r4
 8000b18:	d302      	bcc.n	8000b20 <__udivmoddi4+0xcc>
 8000b1a:	4290      	cmp	r0, r2
 8000b1c:	f0c0 80f0 	bcc.w	8000d00 <__udivmoddi4+0x2ac>
 8000b20:	1a86      	subs	r6, r0, r2
 8000b22:	eb64 0303 	sbc.w	r3, r4, r3
 8000b26:	2001      	movs	r0, #1
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d0e6      	beq.n	8000afa <__udivmoddi4+0xa6>
 8000b2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b30:	e7e3      	b.n	8000afa <__udivmoddi4+0xa6>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	f040 8090 	bne.w	8000c58 <__udivmoddi4+0x204>
 8000b38:	eba1 040c 	sub.w	r4, r1, ip
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	fa1f f78c 	uxth.w	r7, ip
 8000b44:	2101      	movs	r1, #1
 8000b46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b56:	fb07 f006 	mul.w	r0, r7, r6
 8000b5a:	4298      	cmp	r0, r3
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x11c>
 8000b5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x11a>
 8000b68:	4298      	cmp	r0, r3
 8000b6a:	f200 80cd 	bhi.w	8000d08 <__udivmoddi4+0x2b4>
 8000b6e:	4626      	mov	r6, r4
 8000b70:	1a1c      	subs	r4, r3, r0
 8000b72:	fa1f f38e 	uxth.w	r3, lr
 8000b76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b82:	fb00 f707 	mul.w	r7, r0, r7
 8000b86:	429f      	cmp	r7, r3
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0x148>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b92:	d202      	bcs.n	8000b9a <__udivmoddi4+0x146>
 8000b94:	429f      	cmp	r7, r3
 8000b96:	f200 80b0 	bhi.w	8000cfa <__udivmoddi4+0x2a6>
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	1bdb      	subs	r3, r3, r7
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	e7a5      	b.n	8000af0 <__udivmoddi4+0x9c>
 8000ba4:	f1c1 0620 	rsb	r6, r1, #32
 8000ba8:	408b      	lsls	r3, r1
 8000baa:	fa22 f706 	lsr.w	r7, r2, r6
 8000bae:	431f      	orrs	r7, r3
 8000bb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bb8:	ea43 030c 	orr.w	r3, r3, ip
 8000bbc:	40f4      	lsrs	r4, r6
 8000bbe:	fa00 f801 	lsl.w	r8, r0, r1
 8000bc2:	0c38      	lsrs	r0, r7, #16
 8000bc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bc8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bcc:	fa1f fc87 	uxth.w	ip, r7
 8000bd0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bdc:	45a1      	cmp	r9, r4
 8000bde:	fa02 f201 	lsl.w	r2, r2, r1
 8000be2:	d90a      	bls.n	8000bfa <__udivmoddi4+0x1a6>
 8000be4:	193c      	adds	r4, r7, r4
 8000be6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bea:	f080 8084 	bcs.w	8000cf6 <__udivmoddi4+0x2a2>
 8000bee:	45a1      	cmp	r9, r4
 8000bf0:	f240 8081 	bls.w	8000cf6 <__udivmoddi4+0x2a2>
 8000bf4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bf8:	443c      	add	r4, r7
 8000bfa:	eba4 0409 	sub.w	r4, r4, r9
 8000bfe:	fa1f f983 	uxth.w	r9, r3
 8000c02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c06:	fb00 4413 	mls	r4, r0, r3, r4
 8000c0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c12:	45a4      	cmp	ip, r4
 8000c14:	d907      	bls.n	8000c26 <__udivmoddi4+0x1d2>
 8000c16:	193c      	adds	r4, r7, r4
 8000c18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c1c:	d267      	bcs.n	8000cee <__udivmoddi4+0x29a>
 8000c1e:	45a4      	cmp	ip, r4
 8000c20:	d965      	bls.n	8000cee <__udivmoddi4+0x29a>
 8000c22:	3b02      	subs	r3, #2
 8000c24:	443c      	add	r4, r7
 8000c26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c2e:	eba4 040c 	sub.w	r4, r4, ip
 8000c32:	429c      	cmp	r4, r3
 8000c34:	46ce      	mov	lr, r9
 8000c36:	469c      	mov	ip, r3
 8000c38:	d351      	bcc.n	8000cde <__udivmoddi4+0x28a>
 8000c3a:	d04e      	beq.n	8000cda <__udivmoddi4+0x286>
 8000c3c:	b155      	cbz	r5, 8000c54 <__udivmoddi4+0x200>
 8000c3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c42:	eb64 040c 	sbc.w	r4, r4, ip
 8000c46:	fa04 f606 	lsl.w	r6, r4, r6
 8000c4a:	40cb      	lsrs	r3, r1
 8000c4c:	431e      	orrs	r6, r3
 8000c4e:	40cc      	lsrs	r4, r1
 8000c50:	e9c5 6400 	strd	r6, r4, [r5]
 8000c54:	2100      	movs	r1, #0
 8000c56:	e750      	b.n	8000afa <__udivmoddi4+0xa6>
 8000c58:	f1c2 0320 	rsb	r3, r2, #32
 8000c5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	fa24 f303 	lsr.w	r3, r4, r3
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	430c      	orrs	r4, r1
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c80:	0c23      	lsrs	r3, r4, #16
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb00 f107 	mul.w	r1, r0, r7
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x24c>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c96:	d22c      	bcs.n	8000cf2 <__udivmoddi4+0x29e>
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d92a      	bls.n	8000cf2 <__udivmoddi4+0x29e>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ca8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb01 f307 	mul.w	r3, r1, r7
 8000cb4:	42a3      	cmp	r3, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x276>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cc0:	d213      	bcs.n	8000cea <__udivmoddi4+0x296>
 8000cc2:	42a3      	cmp	r3, r4
 8000cc4:	d911      	bls.n	8000cea <__udivmoddi4+0x296>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4464      	add	r4, ip
 8000cca:	1ae4      	subs	r4, r4, r3
 8000ccc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cd0:	e739      	b.n	8000b46 <__udivmoddi4+0xf2>
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	e6f0      	b.n	8000ab8 <__udivmoddi4+0x64>
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e706      	b.n	8000ae8 <__udivmoddi4+0x94>
 8000cda:	45c8      	cmp	r8, r9
 8000cdc:	d2ae      	bcs.n	8000c3c <__udivmoddi4+0x1e8>
 8000cde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ce2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ce6:	3801      	subs	r0, #1
 8000ce8:	e7a8      	b.n	8000c3c <__udivmoddi4+0x1e8>
 8000cea:	4631      	mov	r1, r6
 8000cec:	e7ed      	b.n	8000cca <__udivmoddi4+0x276>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	e799      	b.n	8000c26 <__udivmoddi4+0x1d2>
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	e7d4      	b.n	8000ca0 <__udivmoddi4+0x24c>
 8000cf6:	46d6      	mov	lr, sl
 8000cf8:	e77f      	b.n	8000bfa <__udivmoddi4+0x1a6>
 8000cfa:	4463      	add	r3, ip
 8000cfc:	3802      	subs	r0, #2
 8000cfe:	e74d      	b.n	8000b9c <__udivmoddi4+0x148>
 8000d00:	4606      	mov	r6, r0
 8000d02:	4623      	mov	r3, r4
 8000d04:	4608      	mov	r0, r1
 8000d06:	e70f      	b.n	8000b28 <__udivmoddi4+0xd4>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	e730      	b.n	8000b70 <__udivmoddi4+0x11c>
 8000d0e:	bf00      	nop

08000d10 <__aeabi_idiv0>:
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <func_0>:
#include <stdint.h>
#include <string.h>
uint16_t voltage;

void func_0(uint8_t* buf) // Подставить нужный пин, сейчас PB9
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	switch (buf[1]) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <func_0+0x18>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d014      	beq.n	8000d54 <func_0+0x40>
 8000d2a:	e027      	b.n	8000d7c <func_0+0x68>
		case 0:
			SET_BIT(GPIOB->BSRR, GPIO_BSRR_BR9);
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <func_0+0x7c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a17      	ldr	r2, [pc, #92]	@ (8000d90 <func_0+0x7c>)
 8000d32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d36:	6193      	str	r3, [r2, #24]
			if (READ_BIT(GPIOB->IDR, GPIO_IDR_ID9) != 0){
 8000d38:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <func_0+0x7c>)
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <func_0+0x38>
					buf[0] = STATUS_EXEC_ERROR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
				} else {
				    buf[0] = STATUS_OK;
				}
			return;
 8000d4a:	e01b      	b.n	8000d84 <func_0+0x70>
				    buf[0] = STATUS_OK;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
			return;
 8000d52:	e017      	b.n	8000d84 <func_0+0x70>
		case 1:
			SET_BIT(GPIOB->BSRR, GPIO_BSRR_BS9);
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <func_0+0x7c>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <func_0+0x7c>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5e:	6193      	str	r3, [r2, #24]
			if (READ_BIT(GPIOB->IDR, GPIO_IDR_ID9) != 0){
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <func_0+0x7c>)
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <func_0+0x60>
					buf[0] = STATUS_OK;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
				} else {
				    buf[0] = STATUS_EXEC_ERROR;
				}
			return;
 8000d72:	e007      	b.n	8000d84 <func_0+0x70>
				    buf[0] = STATUS_EXEC_ERROR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
			return;
 8000d7a:	e003      	b.n	8000d84 <func_0+0x70>
		default:
			buf[0] = STATUS_INVALID_CMD;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	701a      	strb	r2, [r3, #0]
			return;
 8000d82:	bf00      	nop
	}
}
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40020400 	.word	0x40020400

08000d94 <func_1>:

void func_1(uint8_t* buf)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	switch (buf[1])
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d863      	bhi.n	8000e70 <func_1+0xdc>
 8000da8:	a201      	add	r2, pc, #4	@ (adr r2, 8000db0 <func_1+0x1c>)
 8000daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dae:	bf00      	nop
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000ded 	.word	0x08000ded
 8000db8:	08000e19 	.word	0x08000e19
 8000dbc:	08000e45 	.word	0x08000e45
	{
	case 1:
		voltage = 600;
 8000dc0:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <func_1+0xf0>)
 8000dc2:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000dc6:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <func_1+0xf0>)
 8000dca:	881a      	ldrh	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <func_1+0xf0>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3302      	adds	r3, #2
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
		break;
 8000dea:	e045      	b.n	8000e78 <func_1+0xe4>

	case 2:
		voltage = 330;
 8000dec:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <func_1+0xf0>)
 8000dee:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8000df2:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8000df4:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <func_1+0xf0>)
 8000df6:	881a      	ldrh	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8000e00:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <func_1+0xf0>)
 8000e02:	881b      	ldrh	r3, [r3, #0]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
		break;
 8000e16:	e02f      	b.n	8000e78 <func_1+0xe4>

	case 3:
		voltage = 500;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <func_1+0xf0>)
 8000e1a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e1e:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8000e20:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <func_1+0xf0>)
 8000e22:	881a      	ldrh	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3301      	adds	r3, #1
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8000e2c:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <func_1+0xf0>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3302      	adds	r3, #2
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
		break;
 8000e42:	e019      	b.n	8000e78 <func_1+0xe4>

	case 4:
		voltage = 600;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <func_1+0xf0>)
 8000e46:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000e4a:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8000e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <func_1+0xf0>)
 8000e4e:	881a      	ldrh	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3301      	adds	r3, #1
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8000e58:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <func_1+0xf0>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3302      	adds	r3, #2
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
		break;
 8000e6e:	e003      	b.n	8000e78 <func_1+0xe4>
	default:
		buf[0] = STATUS_INVALID_CMD;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2202      	movs	r2, #2
 8000e74:	701a      	strb	r2, [r3, #0]
		break;
 8000e76:	bf00      	nop
	}
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	200000b4 	.word	0x200000b4

08000e88 <func_2>:

void func_2(uint8_t* buf)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	switch (buf[1])
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3301      	adds	r3, #1
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <func_2+0x18>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d016      	beq.n	8000ecc <func_2+0x44>
 8000e9e:	e02b      	b.n	8000ef8 <func_2+0x70>
	{
	case 0: // voltage
		voltage = 1200;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <func_2+0x84>)
 8000ea2:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000ea6:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8000ea8:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <func_2+0x84>)
 8000eaa:	881a      	ldrh	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8000eb4:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <func_2+0x84>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
		break;
 8000eca:	e019      	b.n	8000f00 <func_2+0x78>

	case 1: // current
		voltage = 500;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <func_2+0x84>)
 8000ece:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ed2:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <func_2+0x84>)
 8000ed6:	881a      	ldrh	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3301      	adds	r3, #1
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <func_2+0x84>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3302      	adds	r3, #2
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
		break;
 8000ef6:	e003      	b.n	8000f00 <func_2+0x78>
	default:
		buf[0] = STATUS_INVALID_CMD;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2202      	movs	r2, #2
 8000efc:	701a      	strb	r2, [r3, #0]
		break;
 8000efe:	bf00      	nop
	}
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	200000b4 	.word	0x200000b4

08000f10 <func_3>:

void func_3(uint8_t* buf) //Подставить нужный пин, сейчас PB8
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	switch (buf[1]) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <func_3+0x18>
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d014      	beq.n	8000f50 <func_3+0x40>
 8000f26:	e027      	b.n	8000f78 <func_3+0x68>
			case 0:
				SET_BIT(GPIOB->BSRR, GPIO_BSRR_BR8);
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <func_3+0x7c>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <func_3+0x7c>)
 8000f2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f32:	6193      	str	r3, [r2, #24]
				if (READ_BIT(GPIOB->IDR, GPIO_IDR_ID8) != 0){
 8000f34:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <func_3+0x7c>)
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <func_3+0x38>
						buf[0] = STATUS_EXEC_ERROR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
					} else {
					    buf[0] = STATUS_OK;
					}
				return;
 8000f46:	e01b      	b.n	8000f80 <func_3+0x70>
					    buf[0] = STATUS_OK;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
				return;
 8000f4e:	e017      	b.n	8000f80 <func_3+0x70>
			case 1:
				SET_BIT(GPIOB->BSRR, GPIO_BSRR_BS8);
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <func_3+0x7c>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <func_3+0x7c>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f5a:	6193      	str	r3, [r2, #24]
				if (READ_BIT(GPIOB->IDR, GPIO_IDR_ID8) != 0){
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <func_3+0x7c>)
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <func_3+0x60>
						buf[0] = STATUS_OK;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
					} else {
					    buf[0] = STATUS_EXEC_ERROR;
					}
				return;
 8000f6e:	e007      	b.n	8000f80 <func_3+0x70>
					    buf[0] = STATUS_EXEC_ERROR;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
				return;
 8000f76:	e003      	b.n	8000f80 <func_3+0x70>
			default:
				buf[0] = STATUS_INVALID_CMD;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	701a      	strb	r2, [r3, #0]
				return;
 8000f7e:	bf00      	nop
		}
}
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40020400 	.word	0x40020400

08000f90 <func_4>:

void func_4(uint8_t* buf)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	switch (buf[1])
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b0a      	cmp	r3, #10
 8000fa0:	f200 8107 	bhi.w	80011b2 <func_4+0x222>
 8000fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fac <func_4+0x1c>)
 8000fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08000fd9 	.word	0x08000fd9
 8000fb0:	08001003 	.word	0x08001003
 8000fb4:	0800102d 	.word	0x0800102d
 8000fb8:	08001057 	.word	0x08001057
 8000fbc:	08001083 	.word	0x08001083
 8000fc0:	080010af 	.word	0x080010af
 8000fc4:	080010db 	.word	0x080010db
 8000fc8:	08001107 	.word	0x08001107
 8000fcc:	08001131 	.word	0x08001131
 8000fd0:	0800115b 	.word	0x0800115b
 8000fd4:	08001187 	.word	0x08001187
	{
	case 0:
		voltage = 120;
 8000fd8:	4b7b      	ldr	r3, [pc, #492]	@ (80011c8 <func_4+0x238>)
 8000fda:	2278      	movs	r2, #120	@ 0x78
 8000fdc:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8000fde:	4b7a      	ldr	r3, [pc, #488]	@ (80011c8 <func_4+0x238>)
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8000fea:	4b77      	ldr	r3, [pc, #476]	@ (80011c8 <func_4+0x238>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
		break;
 8001000:	e0db      	b.n	80011ba <func_4+0x22a>
	case 1:
		voltage = 180;
 8001002:	4b71      	ldr	r3, [pc, #452]	@ (80011c8 <func_4+0x238>)
 8001004:	22b4      	movs	r2, #180	@ 0xb4
 8001006:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8001008:	4b6f      	ldr	r3, [pc, #444]	@ (80011c8 <func_4+0x238>)
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3301      	adds	r3, #1
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8001014:	4b6c      	ldr	r3, [pc, #432]	@ (80011c8 <func_4+0x238>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3302      	adds	r3, #2
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
		break;
 800102a:	e0c6      	b.n	80011ba <func_4+0x22a>

	case 2:
		voltage = 250;
 800102c:	4b66      	ldr	r3, [pc, #408]	@ (80011c8 <func_4+0x238>)
 800102e:	22fa      	movs	r2, #250	@ 0xfa
 8001030:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8001032:	4b65      	ldr	r3, [pc, #404]	@ (80011c8 <func_4+0x238>)
 8001034:	881a      	ldrh	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3301      	adds	r3, #1
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 800103e:	4b62      	ldr	r3, [pc, #392]	@ (80011c8 <func_4+0x238>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	b29a      	uxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3302      	adds	r3, #2
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
		break;
 8001054:	e0b1      	b.n	80011ba <func_4+0x22a>

	case 3:
		voltage = 550;
 8001056:	4b5c      	ldr	r3, [pc, #368]	@ (80011c8 <func_4+0x238>)
 8001058:	f240 2226 	movw	r2, #550	@ 0x226
 800105c:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 800105e:	4b5a      	ldr	r3, [pc, #360]	@ (80011c8 <func_4+0x238>)
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3301      	adds	r3, #1
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 800106a:	4b57      	ldr	r3, [pc, #348]	@ (80011c8 <func_4+0x238>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3302      	adds	r3, #2
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
		break;
 8001080:	e09b      	b.n	80011ba <func_4+0x22a>

	case 4:
		voltage = 450;
 8001082:	4b51      	ldr	r3, [pc, #324]	@ (80011c8 <func_4+0x238>)
 8001084:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001088:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 800108a:	4b4f      	ldr	r3, [pc, #316]	@ (80011c8 <func_4+0x238>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3301      	adds	r3, #1
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8001096:	4b4c      	ldr	r3, [pc, #304]	@ (80011c8 <func_4+0x238>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3302      	adds	r3, #2
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
		break;
 80010ac:	e085      	b.n	80011ba <func_4+0x22a>
	case 5:
		voltage = 550;
 80010ae:	4b46      	ldr	r3, [pc, #280]	@ (80011c8 <func_4+0x238>)
 80010b0:	f240 2226 	movw	r2, #550	@ 0x226
 80010b4:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 80010b6:	4b44      	ldr	r3, [pc, #272]	@ (80011c8 <func_4+0x238>)
 80010b8:	881a      	ldrh	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3301      	adds	r3, #1
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 80010c2:	4b41      	ldr	r3, [pc, #260]	@ (80011c8 <func_4+0x238>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	0a1b      	lsrs	r3, r3, #8
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
		break;
 80010d8:	e06f      	b.n	80011ba <func_4+0x22a>

	case 6:
		voltage = 550;
 80010da:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <func_4+0x238>)
 80010dc:	f240 2226 	movw	r2, #550	@ 0x226
 80010e0:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 80010e2:	4b39      	ldr	r3, [pc, #228]	@ (80011c8 <func_4+0x238>)
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 80010ee:	4b36      	ldr	r3, [pc, #216]	@ (80011c8 <func_4+0x238>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3302      	adds	r3, #2
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
		break;
 8001104:	e059      	b.n	80011ba <func_4+0x22a>

	case 7:
		voltage = 180;
 8001106:	4b30      	ldr	r3, [pc, #192]	@ (80011c8 <func_4+0x238>)
 8001108:	22b4      	movs	r2, #180	@ 0xb4
 800110a:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 800110c:	4b2e      	ldr	r3, [pc, #184]	@ (80011c8 <func_4+0x238>)
 800110e:	881a      	ldrh	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3301      	adds	r3, #1
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8001118:	4b2b      	ldr	r3, [pc, #172]	@ (80011c8 <func_4+0x238>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	b29a      	uxth	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3302      	adds	r3, #2
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
		break;
 800112e:	e044      	b.n	80011ba <func_4+0x22a>

	case 8:
		voltage = 250;
 8001130:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <func_4+0x238>)
 8001132:	22fa      	movs	r2, #250	@ 0xfa
 8001134:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8001136:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <func_4+0x238>)
 8001138:	881a      	ldrh	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 8001142:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <func_4+0x238>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	0a1b      	lsrs	r3, r3, #8
 8001148:	b29a      	uxth	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3302      	adds	r3, #2
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	701a      	strb	r2, [r3, #0]
		break;
 8001158:	e02f      	b.n	80011ba <func_4+0x22a>
	case 9:
		voltage = 500;
 800115a:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <func_4+0x238>)
 800115c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001160:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 8001162:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <func_4+0x238>)
 8001164:	881a      	ldrh	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3301      	adds	r3, #1
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 800116e:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <func_4+0x238>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3302      	adds	r3, #2
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		break;
 8001184:	e019      	b.n	80011ba <func_4+0x22a>

	case 10:
		voltage = 2048;
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <func_4+0x238>)
 8001188:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800118c:	801a      	strh	r2, [r3, #0]
		buf[1] = (uint8_t)(voltage & 0xFF);
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <func_4+0x238>)
 8001190:	881a      	ldrh	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3301      	adds	r3, #1
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]
		buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <func_4+0x238>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3302      	adds	r3, #2
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
		buf[0] = STATUS_OK;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
		break;
 80011b0:	e003      	b.n	80011ba <func_4+0x22a>
	default:
		buf[0] = STATUS_INVALID_CMD;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2202      	movs	r2, #2
 80011b6:	701a      	strb	r2, [r3, #0]
		break;
 80011b8:	bf00      	nop
	}
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200000b4 	.word	0x200000b4

080011cc <func_5>:

void func_5(uint8_t* buf)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	voltage = 0;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <func_5+0x60>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	801a      	strh	r2, [r3, #0]
	for (size_t i = 1; i < 201; i += 2)
 80011da:	2301      	movs	r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	e019      	b.n	8001214 <func_5+0x48>
	{
		buf[i] = (uint8_t)(voltage & 0xFF);
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <func_5+0x60>)
 80011e2:	8819      	ldrh	r1, [r3, #0]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	b2ca      	uxtb	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]
		buf[i + 1] = (uint8_t)(voltage >> 8 & 0xFF);
 80011ee:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <func_5+0x60>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	0a1b      	lsrs	r3, r3, #8
 80011f4:	b299      	uxth	r1, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	b2ca      	uxtb	r2, r1
 8001200:	701a      	strb	r2, [r3, #0]
		voltage += 10;
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <func_5+0x60>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	330a      	adds	r3, #10
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <func_5+0x60>)
 800120c:	801a      	strh	r2, [r3, #0]
	for (size_t i = 1; i < 201; i += 2)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3302      	adds	r3, #2
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2bc8      	cmp	r3, #200	@ 0xc8
 8001218:	d9e2      	bls.n	80011e0 <func_5+0x14>
    }
	buf[0] = STATUS_OK;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]

}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	200000b4 	.word	0x200000b4

08001230 <func_6>:

void func_6(uint8_t* buf)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	voltage = 550;
 8001238:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <func_6+0x40>)
 800123a:	f240 2226 	movw	r2, #550	@ 0x226
 800123e:	801a      	strh	r2, [r3, #0]
	buf[1] = (uint8_t)(voltage & 0xFF);
 8001240:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <func_6+0x40>)
 8001242:	881a      	ldrh	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3301      	adds	r3, #1
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	701a      	strb	r2, [r3, #0]
	buf[2] = (uint8_t)(voltage >> 8 & 0xFF);
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <func_6+0x40>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3302      	adds	r3, #2
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]
	buf[0] = STATUS_OK;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	200000b4 	.word	0x200000b4

08001274 <func_7>:

void func_7(uint8_t* buf) //Подставить нужный пин, сейчас PB7
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	switch (buf[1]) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3301      	adds	r3, #1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <func_7+0x18>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d014      	beq.n	80012b4 <func_7+0x40>
 800128a:	e027      	b.n	80012dc <func_7+0x68>
			case 0:
				SET_BIT(GPIOB->BSRR, GPIO_BSRR_BR7);
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <func_7+0x7c>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a17      	ldr	r2, [pc, #92]	@ (80012f0 <func_7+0x7c>)
 8001292:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001296:	6193      	str	r3, [r2, #24]
				if (READ_BIT(GPIOB->IDR, GPIO_IDR_ID7) != 0){
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <func_7+0x7c>)
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <func_7+0x38>
						buf[0] = STATUS_EXEC_ERROR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
					} else {
					    buf[0] = STATUS_OK;
					}
				return;
 80012aa:	e01b      	b.n	80012e4 <func_7+0x70>
					    buf[0] = STATUS_OK;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
				return;
 80012b2:	e017      	b.n	80012e4 <func_7+0x70>
			case 1:
				SET_BIT(GPIOB->BSRR, GPIO_BSRR_BS7);
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <func_7+0x7c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	@ (80012f0 <func_7+0x7c>)
 80012ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012be:	6193      	str	r3, [r2, #24]
				if (READ_BIT(GPIOB->IDR, GPIO_IDR_ID7) != 0){
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <func_7+0x7c>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <func_7+0x60>
						buf[0] = STATUS_OK;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
					} else {
					    buf[0] = STATUS_EXEC_ERROR;
					}
				return;
 80012d2:	e007      	b.n	80012e4 <func_7+0x70>
					    buf[0] = STATUS_EXEC_ERROR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
				return;
 80012da:	e003      	b.n	80012e4 <func_7+0x70>
			default:
				buf[0] = STATUS_INVALID_CMD;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
				return;
 80012e2:	bf00      	nop
		}
}
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40020400 	.word	0x40020400

080012f4 <func_8>:

void func_8(uint8_t* buf)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	for (int a = 1; a < 5; a++) {
 80012fc:	2301      	movs	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e007      	b.n	8001312 <func_8+0x1e>
		buf[a] = 0;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
	for (int a = 1; a < 5; a++) {
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3301      	adds	r3, #1
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b04      	cmp	r3, #4
 8001316:	ddf4      	ble.n	8001302 <func_8+0xe>
	}
	buf[0] = STATUS_OK;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <func_9>:

void func_9(uint8_t* buf)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
	buf[2] = 0;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3302      	adds	r3, #2
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
	buf[3] = 0;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3303      	adds	r3, #3
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
	buf[4] = 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3304      	adds	r3, #4
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
	buf[0] = STATUS_OK;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b02      	cmp	r3, #2
 800136e:	bf0c      	ite	eq
 8001370:	2301      	moveq	r3, #1
 8001372:	2300      	movne	r3, #0
 8001374:	b2db      	uxtb	r3, r3
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <LL_ADC_ClearFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOCS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f06f 0202 	mvn.w	r2, #2
 8001390:	601a      	str	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <update_gps_time>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void update_gps_time (uint8_t GPS[], uint8_t time_str[]){ // Функция передачи в массив с протоколом NMEA времени в формате ЧЧММСС.ССС
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	6039      	str	r1, [r7, #0]

	int c = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
	for (int g = 38; g < 40; g++){
 80013ac:	2326      	movs	r3, #38	@ 0x26
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	e012      	b.n	80013d8 <update_gps_time+0x3a>
				   GPS[g] = time_str[c];
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	441a      	add	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	440b      	add	r3, r1
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	701a      	strb	r2, [r3, #0]
	    			   c++;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3301      	adds	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
				   if ( c >= 10 ){
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b09      	cmp	r3, #9
 80013cc:	dd01      	ble.n	80013d2 <update_gps_time+0x34>
					   c = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
	for (int g = 38; g < 40; g++){
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3301      	adds	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b27      	cmp	r3, #39	@ 0x27
 80013dc:	dde9      	ble.n	80013b2 <update_gps_time+0x14>
	    			   }
	    		   }
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	0000      	movs	r0, r0
	...

080013f0 <ADC_IN0_Voltage>:


uint16_t adcSamples[100];
char chel [701];// массив для хранения 100 точек напряжения аналоговово сигнала с генератора.

void ADC_IN0_Voltage (){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

	  HAL_ADC_Start(&hadc1);
 80013f6:	483c      	ldr	r0, [pc, #240]	@ (80014e8 <ADC_IN0_Voltage+0xf8>)
 80013f8:	f001 f820 	bl	800243c <HAL_ADC_Start>
	for (int i = 0; i < 100; i++){
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	e021      	b.n	8001446 <ADC_IN0_Voltage+0x56>
	//HAL_ADC_PollForConversion (&hadc1, HAL_MAX_DELAY);
		  SET_BIT(GPIOC ->BSRR, GPIO_BSRR_BS14);
 8001402:	4b3a      	ldr	r3, [pc, #232]	@ (80014ec <ADC_IN0_Voltage+0xfc>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a39      	ldr	r2, [pc, #228]	@ (80014ec <ADC_IN0_Voltage+0xfc>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800140c:	6193      	str	r3, [r2, #24]
		  while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {}
 800140e:	bf00      	nop
 8001410:	4837      	ldr	r0, [pc, #220]	@ (80014f0 <ADC_IN0_Voltage+0x100>)
 8001412:	f7ff ffa3 	bl	800135c <LL_ADC_IsActiveFlag_EOCS>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f9      	beq.n	8001410 <ADC_IN0_Voltage+0x20>
		  LL_ADC_ClearFlag_EOCS(ADC1);
 800141c:	4834      	ldr	r0, [pc, #208]	@ (80014f0 <ADC_IN0_Voltage+0x100>)
 800141e:	f7ff ffb0 	bl	8001382 <LL_ADC_ClearFlag_EOCS>
			SET_BIT(GPIOC ->BSRR, GPIO_BSRR_BR14);
 8001422:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <ADC_IN0_Voltage+0xfc>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a31      	ldr	r2, [pc, #196]	@ (80014ec <ADC_IN0_Voltage+0xfc>)
 8001428:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800142c:	6193      	str	r3, [r2, #24]
		  adcSamples[i] = HAL_ADC_GetValue (&hadc1);
 800142e:	482e      	ldr	r0, [pc, #184]	@ (80014e8 <ADC_IN0_Voltage+0xf8>)
 8001430:	f001 f8eb 	bl	800260a <HAL_ADC_GetValue>
 8001434:	4603      	mov	r3, r0
 8001436:	b299      	uxth	r1, r3
 8001438:	4a2e      	ldr	r2, [pc, #184]	@ (80014f4 <ADC_IN0_Voltage+0x104>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 100; i++){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3301      	adds	r3, #1
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b63      	cmp	r3, #99	@ 0x63
 800144a:	ddda      	ble.n	8001402 <ADC_IN0_Voltage+0x12>
	}
	  HAL_ADC_Stop(&hadc1);
 800144c:	4826      	ldr	r0, [pc, #152]	@ (80014e8 <ADC_IN0_Voltage+0xf8>)
 800144e:	f001 f8a9 	bl	80025a4 <HAL_ADC_Stop>
	for (int i = 0; i < 100; i++){
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	e02d      	b.n	80014b4 <ADC_IN0_Voltage+0xc4>
		    		  volt = adcSamples[i] * 3.3 / 4095;
 8001458:	4a26      	ldr	r2, [pc, #152]	@ (80014f4 <ADC_IN0_Voltage+0x104>)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f813 	bl	800048c <__aeabi_i2d>
 8001466:	a31c      	add	r3, pc, #112	@ (adr r3, 80014d8 <ADC_IN0_Voltage+0xe8>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f878 	bl	8000560 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	a319      	add	r3, pc, #100	@ (adr r3, 80014e0 <ADC_IN0_Voltage+0xf0>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f999 	bl	80007b4 <__aeabi_ddiv>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff fa7b 	bl	8000984 <__aeabi_d2f>
 800148e:	4603      	mov	r3, r0
 8001490:	4a19      	ldr	r2, [pc, #100]	@ (80014f8 <ADC_IN0_Voltage+0x108>)
 8001492:	6013      	str	r3, [r2, #0]
		    		  //sprintf(msg, "%.3f\r\n", voltage );
		    		  memcpy(&chel[i * 7], msg, 7);
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <ADC_IN0_Voltage+0x10c>)
 800149e:	4413      	add	r3, r2
 80014a0:	4a17      	ldr	r2, [pc, #92]	@ (8001500 <ADC_IN0_Voltage+0x110>)
 80014a2:	6810      	ldr	r0, [r2, #0]
 80014a4:	6018      	str	r0, [r3, #0]
 80014a6:	8891      	ldrh	r1, [r2, #4]
 80014a8:	7992      	ldrb	r2, [r2, #6]
 80014aa:	8099      	strh	r1, [r3, #4]
 80014ac:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < 100; i++){
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2b63      	cmp	r3, #99	@ 0x63
 80014b8:	ddce      	ble.n	8001458 <ADC_IN0_Voltage+0x68>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)chel, strlen(chel), HAL_MAX_DELAY);
 80014ba:	4810      	ldr	r0, [pc, #64]	@ (80014fc <ADC_IN0_Voltage+0x10c>)
 80014bc:	f7fe fe8c 	bl	80001d8 <strlen>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	490c      	ldr	r1, [pc, #48]	@ (80014fc <ADC_IN0_Voltage+0x10c>)
 80014ca:	480e      	ldr	r0, [pc, #56]	@ (8001504 <ADC_IN0_Voltage+0x114>)
 80014cc:	f002 faf5 	bl	8003aba <HAL_UART_Transmit>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	66666666 	.word	0x66666666
 80014dc:	400a6666 	.word	0x400a6666
 80014e0:	00000000 	.word	0x00000000
 80014e4:	40affe00 	.word	0x40affe00
 80014e8:	200000b8 	.word	0x200000b8
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40012000 	.word	0x40012000
 80014f4:	20000218 	.word	0x20000218
 80014f8:	200001d8 	.word	0x200001d8
 80014fc:	200002e0 	.word	0x200002e0
 8001500:	200001dc 	.word	0x200001dc
 8001504:	20000100 	.word	0x20000100

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150e:	f000 febb 	bl	8002288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001512:	f000 f8a5 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001516:	f000 f9d1 	bl	80018bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800151a:	f000 f951 	bl	80017c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800151e:	f000 f979 	bl	8001814 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001522:	f000 f9a1 	bl	8001868 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001526:	f000 f8f9 	bl	800171c <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800152a:	2201      	movs	r2, #1
 800152c:	4943      	ldr	r1, [pc, #268]	@ (800163c <main+0x134>)
 800152e:	4844      	ldr	r0, [pc, #272]	@ (8001640 <main+0x138>)
 8001530:	f002 fc1b 	bl	8003d6a <HAL_UART_Receive_IT>

       	   switch (a){
 8001534:	4b43      	ldr	r3, [pc, #268]	@ (8001644 <main+0x13c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d050      	beq.n	80015de <main+0xd6>
 800153c:	2b02      	cmp	r3, #2
 800153e:	dc78      	bgt.n	8001632 <main+0x12a>
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <main+0x42>
 8001544:	2b01      	cmp	r3, #1
 8001546:	d025      	beq.n	8001594 <main+0x8c>
 8001548:	e06b      	b.n	8001622 <main+0x11a>
	             case 0:
	          	   uint8_t Time1 [] = "00";
 800154a:	4a3f      	ldr	r2, [pc, #252]	@ (8001648 <main+0x140>)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4611      	mov	r1, r2
 8001554:	8019      	strh	r1, [r3, #0]
 8001556:	3302      	adds	r3, #2
 8001558:	0c12      	lsrs	r2, r2, #16
 800155a:	701a      	strb	r2, [r3, #0]
	          	   update_gps_time(GPS, Time1);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4619      	mov	r1, r3
 8001562:	483a      	ldr	r0, [pc, #232]	@ (800164c <main+0x144>)
 8001564:	f7ff ff1b 	bl	800139e <update_gps_time>

	          	     HAL_UART_Receive (&huart1, (uint8_t*)Priem, BUFFER_SIZE_GPS, 100 );
 8001568:	2364      	movs	r3, #100	@ 0x64
 800156a:	2234      	movs	r2, #52	@ 0x34
 800156c:	4938      	ldr	r1, [pc, #224]	@ (8001650 <main+0x148>)
 800156e:	4834      	ldr	r0, [pc, #208]	@ (8001640 <main+0x138>)
 8001570:	f002 fb2e 	bl	8003bd0 <HAL_UART_Receive>
	                   HAL_UART_Transmit (&huart1, (uint8_t*)GPS, BUFFER_SIZE_GPS, HAL_MAX_DELAY );
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	2234      	movs	r2, #52	@ 0x34
 800157a:	4934      	ldr	r1, [pc, #208]	@ (800164c <main+0x144>)
 800157c:	4830      	ldr	r0, [pc, #192]	@ (8001640 <main+0x138>)
 800157e:	f002 fa9c 	bl	8003aba <HAL_UART_Transmit>


	          	   a++;
 8001582:	4b30      	ldr	r3, [pc, #192]	@ (8001644 <main+0x13c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	4a2e      	ldr	r2, [pc, #184]	@ (8001644 <main+0x13c>)
 800158a:	6013      	str	r3, [r2, #0]
	          	   HAL_Delay(1000);
 800158c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001590:	f000 feec 	bl	800236c <HAL_Delay>



	             case 1:
	                 	   uint8_t Time2 [] = "01";
 8001594:	4a2f      	ldr	r2, [pc, #188]	@ (8001654 <main+0x14c>)
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	4611      	mov	r1, r2
 800159e:	8019      	strh	r1, [r3, #0]
 80015a0:	3302      	adds	r3, #2
 80015a2:	0c12      	lsrs	r2, r2, #16
 80015a4:	701a      	strb	r2, [r3, #0]
	                 	   update_gps_time(GPS, Time2);
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	4619      	mov	r1, r3
 80015ac:	4827      	ldr	r0, [pc, #156]	@ (800164c <main+0x144>)
 80015ae:	f7ff fef6 	bl	800139e <update_gps_time>

	                 	   HAL_UART_Receive (&huart1, (uint8_t*)Priem, BUFFER_SIZE_GPS, 100 );
 80015b2:	2364      	movs	r3, #100	@ 0x64
 80015b4:	2234      	movs	r2, #52	@ 0x34
 80015b6:	4926      	ldr	r1, [pc, #152]	@ (8001650 <main+0x148>)
 80015b8:	4821      	ldr	r0, [pc, #132]	@ (8001640 <main+0x138>)
 80015ba:	f002 fb09 	bl	8003bd0 <HAL_UART_Receive>
	                 	   HAL_UART_Transmit (&huart1, (uint8_t*)GPS, BUFFER_SIZE_GPS, HAL_MAX_DELAY );
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
 80015c2:	2234      	movs	r2, #52	@ 0x34
 80015c4:	4921      	ldr	r1, [pc, #132]	@ (800164c <main+0x144>)
 80015c6:	481e      	ldr	r0, [pc, #120]	@ (8001640 <main+0x138>)
 80015c8:	f002 fa77 	bl	8003aba <HAL_UART_Transmit>

	                 	   a++;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001644 <main+0x13c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001644 <main+0x13c>)
 80015d4:	6013      	str	r3, [r2, #0]
	                 	   HAL_Delay(1000);
 80015d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015da:	f000 fec7 	bl	800236c <HAL_Delay>

	             case 2:
	          	           uint8_t Time3 [] = "02";
 80015de:	4a1e      	ldr	r2, [pc, #120]	@ (8001658 <main+0x150>)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	4611      	mov	r1, r2
 80015e6:	8019      	strh	r1, [r3, #0]
 80015e8:	3302      	adds	r3, #2
 80015ea:	0c12      	lsrs	r2, r2, #16
 80015ec:	701a      	strb	r2, [r3, #0]
	          	           update_gps_time(GPS, Time3);
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	4619      	mov	r1, r3
 80015f2:	4816      	ldr	r0, [pc, #88]	@ (800164c <main+0x144>)
 80015f4:	f7ff fed3 	bl	800139e <update_gps_time>
	                 	   HAL_UART_Receive (&huart1, (uint8_t*)Priem, BUFFER_SIZE_GPS, 100 );
 80015f8:	2364      	movs	r3, #100	@ 0x64
 80015fa:	2234      	movs	r2, #52	@ 0x34
 80015fc:	4914      	ldr	r1, [pc, #80]	@ (8001650 <main+0x148>)
 80015fe:	4810      	ldr	r0, [pc, #64]	@ (8001640 <main+0x138>)
 8001600:	f002 fae6 	bl	8003bd0 <HAL_UART_Receive>
	                 	   HAL_UART_Transmit (&huart1, (uint8_t*)GPS, sizeof(GPS) - 1, HAL_MAX_DELAY );
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	2233      	movs	r2, #51	@ 0x33
 800160a:	4910      	ldr	r1, [pc, #64]	@ (800164c <main+0x144>)
 800160c:	480c      	ldr	r0, [pc, #48]	@ (8001640 <main+0x138>)
 800160e:	f002 fa54 	bl	8003aba <HAL_UART_Transmit>

	                 	   HAL_Delay(1000);
 8001612:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001616:	f000 fea9 	bl	800236c <HAL_Delay>
	                 	   a = 0;
 800161a:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <main+0x13c>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
	                 	   break;
 8001620:	bf00      	nop
       	   }

	    		  for ( ADC_counter; ADC_counter < 1; ADC_counter++){
 8001622:	e006      	b.n	8001632 <main+0x12a>
	    			  ADC_IN0_Voltage();
 8001624:	f7ff fee4 	bl	80013f0 <ADC_IN0_Voltage>
	    		  for ( ADC_counter; ADC_counter < 1; ADC_counter++){
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <main+0x154>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <main+0x154>)
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <main+0x154>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	ddf4      	ble.n	8001624 <main+0x11c>
	  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 800163a:	e776      	b.n	800152a <main+0x22>
 800163c:	200000b6 	.word	0x200000b6
 8001640:	20000100 	.word	0x20000100
 8001644:	20000004 	.word	0x20000004
 8001648:	08005030 	.word	0x08005030
 800164c:	20000008 	.word	0x20000008
 8001650:	200001e4 	.word	0x200001e4
 8001654:	08005034 	.word	0x08005034
 8001658:	08005038 	.word	0x08005038
 800165c:	20000000 	.word	0x20000000

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	2230      	movs	r2, #48	@ 0x30
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fc8e 	bl	8004f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <SystemClock_Config+0xb4>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	4a21      	ldr	r2, [pc, #132]	@ (8001714 <SystemClock_Config+0xb4>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001692:	6413      	str	r3, [r2, #64]	@ 0x40
 8001694:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <SystemClock_Config+0xb4>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <SystemClock_Config+0xb8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001718 <SystemClock_Config+0xb8>)
 80016aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <SystemClock_Config+0xb8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016bc:	2301      	movs	r3, #1
 80016be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fd24 	bl	800311c <HAL_RCC_OscConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80016da:	f000 f9d3 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016de:	230f      	movs	r3, #15
 80016e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 ff87 	bl	800360c <HAL_RCC_ClockConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001704:	f000 f9be 	bl	8001a84 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001708:	f002 f866 	bl	80037d8 <HAL_RCC_EnableCSS>
}
 800170c:	bf00      	nop
 800170e:	3750      	adds	r7, #80	@ 0x50
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	40007000 	.word	0x40007000

0800171c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001722:	463b      	mov	r3, r7
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <MX_ADC1_Init+0x98>)
 8001730:	4a21      	ldr	r2, [pc, #132]	@ (80017b8 <MX_ADC1_Init+0x9c>)
 8001732:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001734:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <MX_ADC1_Init+0x98>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <MX_ADC1_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <MX_ADC1_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <MX_ADC1_Init+0x98>)
 8001748:	2201      	movs	r2, #1
 800174a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <MX_ADC1_Init+0x98>)
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001754:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <MX_ADC1_Init+0x98>)
 8001756:	2200      	movs	r2, #0
 8001758:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800175a:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <MX_ADC1_Init+0x98>)
 800175c:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <MX_ADC1_Init+0xa0>)
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_ADC1_Init+0x98>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <MX_ADC1_Init+0x98>)
 8001768:	2201      	movs	r2, #1
 800176a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <MX_ADC1_Init+0x98>)
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <MX_ADC1_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800177a:	480e      	ldr	r0, [pc, #56]	@ (80017b4 <MX_ADC1_Init+0x98>)
 800177c:	f000 fe1a 	bl	80023b4 <HAL_ADC_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001786:	f000 f97d 	bl	8001a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800178a:	2300      	movs	r3, #0
 800178c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800178e:	2301      	movs	r3, #1
 8001790:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001792:	2307      	movs	r3, #7
 8001794:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001796:	463b      	mov	r3, r7
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <MX_ADC1_Init+0x98>)
 800179c:	f000 ff42 	bl	8002624 <HAL_ADC_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80017a6:	f000 f96d 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200000b8 	.word	0x200000b8
 80017b8:	40012000 	.word	0x40012000
 80017bc:	0f000001 	.word	0x0f000001

080017c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <MX_USART1_UART_Init+0x4c>)
 80017c6:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <MX_USART1_UART_Init+0x50>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <MX_USART1_UART_Init+0x4c>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <MX_USART1_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MX_USART1_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <MX_USART1_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_USART1_UART_Init+0x4c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <MX_USART1_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <MX_USART1_UART_Init+0x4c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <MX_USART1_UART_Init+0x4c>)
 80017f8:	f002 f90f 	bl	8003a1a <HAL_UART_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001802:	f000 f93f 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000100 	.word	0x20000100
 8001810:	40011000 	.word	0x40011000

08001814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_USART2_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	@ (8001864 <MX_USART2_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_USART2_UART_Init+0x4c>)
 8001820:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_USART2_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_USART2_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <MX_USART2_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_USART2_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <MX_USART2_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_USART2_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	@ (8001860 <MX_USART2_UART_Init+0x4c>)
 800184c:	f002 f8e5 	bl	8003a1a <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001856:	f000 f915 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000148 	.word	0x20000148
 8001864:	40004400 	.word	0x40004400

08001868 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <MX_USART6_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <MX_USART6_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <MX_USART6_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <MX_USART6_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <MX_USART6_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <MX_USART6_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <MX_USART6_UART_Init+0x4c>)
 80018a0:	f002 f8bb 	bl	8003a1a <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f000 f8eb 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000190 	.word	0x20000190
 80018b8:	40011400 	.word	0x40011400

080018bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	@ 0x28
 80018c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b32      	ldr	r3, [pc, #200]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a31      	ldr	r2, [pc, #196]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a2a      	ldr	r2, [pc, #168]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	@ 0x30
 800191a:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <MX_GPIO_Init+0xe4>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001948:	4816      	ldr	r0, [pc, #88]	@ (80019a4 <MX_GPIO_Init+0xe8>)
 800194a:	f001 fbcd 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8001954:	4814      	ldr	r0, [pc, #80]	@ (80019a8 <MX_GPIO_Init+0xec>)
 8001956:	f001 fbc7 	bl	80030e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800195a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <MX_GPIO_Init+0xe8>)
 8001974:	f001 fa34 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001978:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 800197c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <MX_GPIO_Init+0xec>)
 8001992:	f001 fa25 	bl	8002de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	@ 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020400 	.word	0x40020400

080019ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 if (huart->Instance == USART1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a16      	ldr	r2, [pc, #88]	@ (8001a14 <HAL_UART_RxCpltCallback+0x68>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d125      	bne.n	8001a0a <HAL_UART_RxCpltCallback+0x5e>
  {
	 enum parser_result result;
	          result = process_rx_byte(&parser, rx_byte);
 80019be:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <HAL_UART_RxCpltCallback+0x6c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4619      	mov	r1, r3
 80019c4:	4815      	ldr	r0, [pc, #84]	@ (8001a1c <HAL_UART_RxCpltCallback+0x70>)
 80019c6:	f000 f90f 	bl	8001be8 <process_rx_byte>
 80019ca:	4603      	mov	r3, r0
 80019cc:	73fb      	strb	r3, [r7, #15]
	          if (result == PARSER_DONE) {
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d114      	bne.n	80019fe <HAL_UART_RxCpltCallback+0x52>
	        	  choose_command(parser.buffer, &parser.buffer_length);
 80019d4:	4912      	ldr	r1, [pc, #72]	@ (8001a20 <HAL_UART_RxCpltCallback+0x74>)
 80019d6:	4813      	ldr	r0, [pc, #76]	@ (8001a24 <HAL_UART_RxCpltCallback+0x78>)
 80019d8:	f000 f9d4 	bl	8001d84 <choose_command>
	        	  transmission(&data, &parser);
 80019dc:	490f      	ldr	r1, [pc, #60]	@ (8001a1c <HAL_UART_RxCpltCallback+0x70>)
 80019de:	4812      	ldr	r0, [pc, #72]	@ (8001a28 <HAL_UART_RxCpltCallback+0x7c>)
 80019e0:	f000 fa20 	bl	8001e24 <transmission>
	        	  serialize_reply(&data);
 80019e4:	4810      	ldr	r0, [pc, #64]	@ (8001a28 <HAL_UART_RxCpltCallback+0x7c>)
 80019e6:	f000 f891 	bl	8001b0c <serialize_reply>
	        	  HAL_UART_Transmit_IT(&huart1, data.buf, data.buf_size);
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_UART_RxCpltCallback+0x7c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001a28 <HAL_UART_RxCpltCallback+0x7c>)
 80019f0:	6852      	ldr	r2, [r2, #4]
 80019f2:	b292      	uxth	r2, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	480d      	ldr	r0, [pc, #52]	@ (8001a2c <HAL_UART_RxCpltCallback+0x80>)
 80019f8:	f002 f981 	bl	8003cfe <HAL_UART_Transmit_IT>
	        	   parser.state = STATE_SYNC;

	          }

}
}
 80019fc:	e005      	b.n	8001a0a <HAL_UART_RxCpltCallback+0x5e>
	          } else if (result == PARSER_ERROR) {
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d102      	bne.n	8001a0a <HAL_UART_RxCpltCallback+0x5e>
	        	   parser.state = STATE_SYNC;
 8001a04:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_UART_RxCpltCallback+0x70>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40011000 	.word	0x40011000
 8001a18:	200000b6 	.word	0x200000b6
 8001a1c:	200005a0 	.word	0x200005a0
 8001a20:	2000066c 	.word	0x2000066c
 8001a24:	200005a1 	.word	0x200005a1
 8001a28:	20000678 	.word	0x20000678
 8001a2c:	20000100 	.word	0x20000100

08001a30 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <HAL_UART_ErrorCallback+0x44>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d114      	bne.n	8001a6c <HAL_UART_ErrorCallback+0x3c>
    	 uint8_t err_msg[] = "UART ERROR\n";
 8001a42:	4a0d      	ldr	r2, [pc, #52]	@ (8001a78 <HAL_UART_ErrorCallback+0x48>)
 8001a44:	f107 030c 	add.w	r3, r7, #12
 8001a48:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    	        HAL_UART_Transmit(&huart1, err_msg, sizeof(err_msg) - 1, 100);
 8001a4e:	f107 010c 	add.w	r1, r7, #12
 8001a52:	2364      	movs	r3, #100	@ 0x64
 8001a54:	220b      	movs	r2, #11
 8001a56:	4809      	ldr	r0, [pc, #36]	@ (8001a7c <HAL_UART_ErrorCallback+0x4c>)
 8001a58:	f002 f82f 	bl	8003aba <HAL_UART_Transmit>
    	        HAL_UART_Abort(&huart1);
 8001a5c:	4807      	ldr	r0, [pc, #28]	@ (8001a7c <HAL_UART_ErrorCallback+0x4c>)
 8001a5e:	f002 f9a9 	bl	8003db4 <HAL_UART_Abort>
    	        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 8001a62:	2201      	movs	r2, #1
 8001a64:	4906      	ldr	r1, [pc, #24]	@ (8001a80 <HAL_UART_ErrorCallback+0x50>)
 8001a66:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <HAL_UART_ErrorCallback+0x4c>)
 8001a68:	f002 f97f 	bl	8003d6a <HAL_UART_Receive_IT>
    }
}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40011000 	.word	0x40011000
 8001a78:	0800503c 	.word	0x0800503c
 8001a7c:	20000100 	.word	0x20000100
 8001a80:	200000b6 	.word	0x200000b6

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <Error_Handler+0x8>

08001a90 <update_crc>:
 struct for_transfer data;

static const uint16_t crc16_table[256]; //??

static uint16_t update_crc(uint16_t crc, uint8_t byte)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	717b      	strb	r3, [r7, #5]
    return crc16_table[(crc ^ byte) & 0xFF] ^ (crc >> 8);
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	797b      	ldrb	r3, [r7, #5]
 8001aa4:	4053      	eors	r3, r2
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4a06      	ldr	r2, [pc, #24]	@ (8001ac4 <update_crc+0x34>)
 8001aaa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4053      	eors	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	08005048 	.word	0x08005048

08001ac8 <calculate_crc>:

 static uint16_t calculate_crc(const uint8_t* array, int size) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
    uint16_t crc = CRC_INIT; // #define CRC_INIT 0xffff
 8001ad2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ad6:	81fb      	strh	r3, [r7, #14]
    int i;
    for (i = 0; i < size; i++) {
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	e00d      	b.n	8001afa <calculate_crc+0x32>
        crc = update_crc(crc, array[i]);
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ffd0 	bl	8001a90 <update_crc>
 8001af0:	4603      	mov	r3, r0
 8001af2:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < size; i++) {
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dbed      	blt.n	8001ade <calculate_crc+0x16>
    }
    return crc;
 8001b02:	89fb      	ldrh	r3, [r7, #14]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <serialize_reply>:

void serialize_reply(struct for_transfer* data) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    uint16_t crc;
    static uint16_t PAYLOAD_SIZE;

        PAYLOAD_SIZE = data->buf_size - 6;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b06      	subs	r3, #6
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <serialize_reply+0xd8>)
 8001b20:	801a      	strh	r2, [r3, #0]
        data->buf[0] = SYNC_BYTE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	22aa      	movs	r2, #170	@ 0xaa
 8001b28:	701a      	strb	r2, [r3, #0]
        data->buf[1] = ((PAYLOAD_SIZE + DATA_SIZE_OFFSET) >> 0) & 0xff;
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <serialize_reply+0xd8>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	3203      	adds	r2, #3
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
        data->buf[2] = ((PAYLOAD_SIZE + DATA_SIZE_OFFSET) >> 8) & 0xff;
 8001b3c:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <serialize_reply+0xd8>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	3303      	adds	r3, #3
 8001b42:	121a      	asrs	r2, r3, #8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]
        data->buf[3] = data->cmd;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3303      	adds	r3, #3
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	7a12      	ldrb	r2, [r2, #8]
 8001b58:	701a      	strb	r2, [r3, #0]
        data->buf[4] = data->status;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	7a52      	ldrb	r2, [r2, #9]
 8001b64:	701a      	strb	r2, [r3, #0]
        int a = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
        for (int i = 5; i < data->buf_size - 2; i++)
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	e00f      	b.n	8001b90 <serialize_reply+0x84>
        {
            data->buf[i] = data->value[a];
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	441a      	add	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	440b      	add	r3, r1
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	701a      	strb	r2, [r3, #0]
            a++;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
        for (int i = 5; i < data->buf_size - 2; i++)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	1e9a      	subs	r2, r3, #2
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d8e9      	bhi.n	8001b70 <serialize_reply+0x64>
        }
        crc = calculate_crc(data->buf + 3, PAYLOAD_SIZE + 1);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <serialize_reply+0xd8>)
 8001ba4:	8812      	ldrh	r2, [r2, #0]
 8001ba6:	3201      	adds	r2, #1
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff8c 	bl	8001ac8 <calculate_crc>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	81fb      	strh	r3, [r7, #14]
        data->buf[data->buf_size - 2] = (crc >> 0) & 0xff;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	3b02      	subs	r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	89fa      	ldrh	r2, [r7, #14]
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]
        data->buf[data->buf_size - 1] = (crc >> 8) & 0xff;
 8001bc6:	89fb      	ldrh	r3, [r7, #14]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b2ca      	uxtb	r2, r1
 8001bda:	701a      	strb	r2, [r3, #0]

}
 8001bdc:	bf00      	nop
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000688 	.word	0x20000688

08001be8 <process_rx_byte>:

 enum parser_result process_rx_byte(struct protocol_parser *parser, uint8_t byte) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
    enum parser_result ret = PARSER_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

    switch (parser->state) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b06      	cmp	r3, #6
 8001bfe:	f200 80bb 	bhi.w	8001d78 <process_rx_byte+0x190>
 8001c02:	a201      	add	r2, pc, #4	@ (adr r2, 8001c08 <process_rx_byte+0x20>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c25 	.word	0x08001c25
 8001c0c:	08001c47 	.word	0x08001c47
 8001c10:	08001c59 	.word	0x08001c59
 8001c14:	08001c9b 	.word	0x08001c9b
 8001c18:	08001cd3 	.word	0x08001cd3
 8001c1c:	08001d1d 	.word	0x08001d1d
 8001c20:	08001d3f 	.word	0x08001d3f
    case STATE_SYNC:
        if (byte == SYNC_BYTE) {
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	2baa      	cmp	r3, #170	@ 0xaa
 8001c28:	f040 80a3 	bne.w	8001d72 <process_rx_byte+0x18a>
            parser->state = STATE_SIZE_L;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
            parser->crc = CRC_INIT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c38:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
            parser->buffer_length = 0;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        }
        break;
 8001c44:	e095      	b.n	8001d72 <process_rx_byte+0x18a>
    case STATE_SIZE_L:
        parser->data_size = byte;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
        parser->state = STATE_SIZE_H;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	701a      	strb	r2, [r3, #0]
        break;
 8001c56:	e08f      	b.n	8001d78 <process_rx_byte+0x190>
    case STATE_SIZE_H:
        parser->data_size |= ((uint16_t)byte << 8);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	4313      	orrs	r3, r2
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
        if (parser->data_size >= DATA_SIZE_OFFSET &&
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d908      	bls.n	8001c8e <process_rx_byte+0xa6>
                parser->data_size <= MAX_DATA_SIZE + DATA_SIZE_OFFSET) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
        if (parser->data_size >= DATA_SIZE_OFFSET &&
 8001c82:	2bcc      	cmp	r3, #204	@ 0xcc
 8001c84:	d803      	bhi.n	8001c8e <process_rx_byte+0xa6>
            parser->state = STATE_CMD;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	701a      	strb	r2, [r3, #0]
        } else {
            parser->state = STATE_SYNC;
            ret = PARSER_ERROR;
        }
        break;
 8001c8c:	e074      	b.n	8001d78 <process_rx_byte+0x190>
            parser->state = STATE_SYNC;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
            ret = PARSER_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
        break;
 8001c98:	e06e      	b.n	8001d78 <process_rx_byte+0x190>
    case STATE_CMD:
        parser->crc = update_crc(parser->crc, byte);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fef3 	bl	8001a90 <update_crc>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
        parser->cmd = byte;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        parser->state = (parser->data_size != DATA_SIZE_OFFSET) ? STATE_DATA : STATE_CRC_L;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d001      	beq.n	8001cca <process_rx_byte+0xe2>
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	e000      	b.n	8001ccc <process_rx_byte+0xe4>
 8001cca:	2205      	movs	r2, #5
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	701a      	strb	r2, [r3, #0]
        break;
 8001cd0:	e052      	b.n	8001d78 <process_rx_byte+0x190>
    case STATE_DATA:
        parser->crc = update_crc(parser->crc, byte);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fed7 	bl	8001a90 <update_crc>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
        parser->buffer[parser->buffer_length++] = byte;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001cf2:	1c59      	adds	r1, r3, #1
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	f8c2 10cc 	str.w	r1, [r2, #204]	@ 0xcc
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	78fa      	ldrb	r2, [r7, #3]
 8001d00:	705a      	strb	r2, [r3, #1]
        if (parser->buffer_length + DATA_SIZE_OFFSET >= parser->data_size) {
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001d08:	3303      	adds	r3, #3
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d330      	bcc.n	8001d76 <process_rx_byte+0x18e>
            parser->state = STATE_CRC_L;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2205      	movs	r2, #5
 8001d18:	701a      	strb	r2, [r3, #0]
        }
        break;
 8001d1a:	e02c      	b.n	8001d76 <process_rx_byte+0x18e>
    case STATE_CRC_L:
        parser->crc = update_crc(parser->crc, byte);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff feb2 	bl	8001a90 <update_crc>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
        parser->state = STATE_CRC_H;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2206      	movs	r2, #6
 8001d3a:	701a      	strb	r2, [r3, #0]
        break;
 8001d3c:	e01c      	b.n	8001d78 <process_rx_byte+0x190>
    case STATE_CRC_H:
        parser->crc = update_crc(parser->crc, byte);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fea1 	bl	8001a90 <update_crc>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
        parser->state = STATE_SYNC;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
        ret = (parser->crc == 0 ? PARSER_DONE : PARSER_ERROR);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <process_rx_byte+0x184>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e000      	b.n	8001d6e <process_rx_byte+0x186>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
        break;
 8001d70:	e002      	b.n	8001d78 <process_rx_byte+0x190>
        break;
 8001d72:	bf00      	nop
 8001d74:	e000      	b.n	8001d78 <process_rx_byte+0x190>
        break;
 8001d76:	bf00      	nop
    }

    return ret;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop

08001d84 <choose_command>:

void choose_command(uint8_t* buffer, size_t* buffer_length)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
    switch (buffer[0])
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b09      	cmp	r3, #9
 8001d94:	d841      	bhi.n	8001e1a <choose_command+0x96>
 8001d96:	a201      	add	r2, pc, #4	@ (adr r2, 8001d9c <choose_command+0x18>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001dc5 	.word	0x08001dc5
 8001da0:	08001dcd 	.word	0x08001dcd
 8001da4:	08001dd5 	.word	0x08001dd5
 8001da8:	08001ddd 	.word	0x08001ddd
 8001dac:	08001de5 	.word	0x08001de5
 8001db0:	08001ded 	.word	0x08001ded
 8001db4:	08001dfb 	.word	0x08001dfb
 8001db8:	08001e03 	.word	0x08001e03
 8001dbc:	08001e0b 	.word	0x08001e0b
 8001dc0:	08001e13 	.word	0x08001e13
    {
    case 0:
        func_0(buffer);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7fe ffa5 	bl	8000d14 <func_0>
        break;
 8001dca:	e026      	b.n	8001e1a <choose_command+0x96>
    case 1:
        func_1(buffer);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7fe ffe1 	bl	8000d94 <func_1>
        break;
 8001dd2:	e022      	b.n	8001e1a <choose_command+0x96>
    case 2:
        func_2(buffer);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff f857 	bl	8000e88 <func_2>
        break;
 8001dda:	e01e      	b.n	8001e1a <choose_command+0x96>
    case 3:
        func_3(buffer);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff f897 	bl	8000f10 <func_3>
        break;
 8001de2:	e01a      	b.n	8001e1a <choose_command+0x96>
    case 4:
        func_4(buffer);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff f8d3 	bl	8000f90 <func_4>
        break;
 8001dea:	e016      	b.n	8001e1a <choose_command+0x96>
    case 5:
    	*buffer_length = 201;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	22c9      	movs	r2, #201	@ 0xc9
 8001df0:	601a      	str	r2, [r3, #0]
        func_5(buffer);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff f9ea 	bl	80011cc <func_5>
        break;
 8001df8:	e00f      	b.n	8001e1a <choose_command+0x96>
    case 6:
        func_6(buffer);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff fa18 	bl	8001230 <func_6>
        break;
 8001e00:	e00b      	b.n	8001e1a <choose_command+0x96>
    case 7:
        func_7(buffer);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff fa36 	bl	8001274 <func_7>
        break;
 8001e08:	e007      	b.n	8001e1a <choose_command+0x96>
    case 8:
        func_8(buffer);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fa72 	bl	80012f4 <func_8>
        break;
 8001e10:	e003      	b.n	8001e1a <choose_command+0x96>
    case 9:
        func_9(buffer);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fa89 	bl	800132a <func_9>
        break;
 8001e18:	bf00      	nop
    }
//    if (*status != STATUS_OK) {
//        *value[0] = 0;
//    }
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop

08001e24 <transmission>:

void transmission(struct for_transfer* data, struct protocol_parser* parser) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]

    data->buf_size = 6 + parser->buffer_length;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001e34:	1d9a      	adds	r2, r3, #6
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	605a      	str	r2, [r3, #4]
    data->cmd = parser->cmd;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f893 20d2 	ldrb.w	r2, [r3, #210]	@ 0xd2
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	721a      	strb	r2, [r3, #8]
    data->status = parser->buffer[0];
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	785a      	ldrb	r2, [r3, #1]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	725a      	strb	r2, [r3, #9]
    data->value = (uint8_t*)malloc((parser->buffer_length - 1) * sizeof(uint8_t));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4618      	mov	r0, r3
 8001e56:	f002 ffe5 	bl	8004e24 <malloc>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60da      	str	r2, [r3, #12]
    if (data->value == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d023      	beq.n	8001eb2 <transmission+0x8e>
    {
        return;

    }
    for (size_t i = 0; i < parser->buffer_length - 1; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	e00c      	b.n	8001e8a <transmission+0x66>
    {
        data->value[i] = parser->buffer[i + 1];
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68d9      	ldr	r1, [r3, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	440b      	add	r3, r1
 8001e7c:	6839      	ldr	r1, [r7, #0]
 8001e7e:	440a      	add	r2, r1
 8001e80:	7852      	ldrb	r2, [r2, #1]
 8001e82:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < parser->buffer_length - 1; i++)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3301      	adds	r3, #1
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8001e90:	3b01      	subs	r3, #1
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3eb      	bcc.n	8001e70 <transmission+0x4c>
    }
    data->buf = (uint8_t*)malloc(data->buf_size * sizeof(uint8_t));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 ffc1 	bl	8004e24 <malloc>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
    if (data->buf == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	e000      	b.n	8001eb4 <transmission+0x90>
        return;
 8001eb2:	bf00      	nop
    {
        return;

    }
}
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	4a0f      	ldr	r2, [pc, #60]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	4a08      	ldr	r2, [pc, #32]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_MspInit+0x4c>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800

08001f0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	@ 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a17      	ldr	r2, [pc, #92]	@ (8001f88 <HAL_ADC_MspInit+0x7c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d127      	bne.n	8001f7e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <HAL_ADC_MspInit+0x80>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	4a15      	ldr	r2, [pc, #84]	@ (8001f8c <HAL_ADC_MspInit+0x80>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3e:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <HAL_ADC_MspInit+0x80>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <HAL_ADC_MspInit+0x80>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a0e      	ldr	r2, [pc, #56]	@ (8001f8c <HAL_ADC_MspInit+0x80>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <HAL_ADC_MspInit+0x80>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001f66:	23f3      	movs	r3, #243	@ 0xf3
 8001f68:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <HAL_ADC_MspInit+0x84>)
 8001f7a:	f000 ff31 	bl	8002de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	@ 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40012000 	.word	0x40012000
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000

08001f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08e      	sub	sp, #56	@ 0x38
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a54      	ldr	r2, [pc, #336]	@ (8002104 <HAL_UART_MspInit+0x170>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d135      	bne.n	8002022 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	4b53      	ldr	r3, [pc, #332]	@ (8002108 <HAL_UART_MspInit+0x174>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	4a52      	ldr	r2, [pc, #328]	@ (8002108 <HAL_UART_MspInit+0x174>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc6:	4b50      	ldr	r3, [pc, #320]	@ (8002108 <HAL_UART_MspInit+0x174>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8002108 <HAL_UART_MspInit+0x174>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	4a4b      	ldr	r2, [pc, #300]	@ (8002108 <HAL_UART_MspInit+0x174>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe2:	4b49      	ldr	r3, [pc, #292]	@ (8002108 <HAL_UART_MspInit+0x174>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002000:	2307      	movs	r3, #7
 8002002:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002008:	4619      	mov	r1, r3
 800200a:	4840      	ldr	r0, [pc, #256]	@ (800210c <HAL_UART_MspInit+0x178>)
 800200c:	f000 fee8 	bl	8002de0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	2025      	movs	r0, #37	@ 0x25
 8002016:	f000 fe0e 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800201a:	2025      	movs	r0, #37	@ 0x25
 800201c:	f000 fe27 	bl	8002c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002020:	e06b      	b.n	80020fa <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a3a      	ldr	r2, [pc, #232]	@ (8002110 <HAL_UART_MspInit+0x17c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d134      	bne.n	8002096 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	4b35      	ldr	r3, [pc, #212]	@ (8002108 <HAL_UART_MspInit+0x174>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	4a34      	ldr	r2, [pc, #208]	@ (8002108 <HAL_UART_MspInit+0x174>)
 8002036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800203a:	6413      	str	r3, [r2, #64]	@ 0x40
 800203c:	4b32      	ldr	r3, [pc, #200]	@ (8002108 <HAL_UART_MspInit+0x174>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	4b2e      	ldr	r3, [pc, #184]	@ (8002108 <HAL_UART_MspInit+0x174>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4a2d      	ldr	r2, [pc, #180]	@ (8002108 <HAL_UART_MspInit+0x174>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6313      	str	r3, [r2, #48]	@ 0x30
 8002058:	4b2b      	ldr	r3, [pc, #172]	@ (8002108 <HAL_UART_MspInit+0x174>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002064:	230c      	movs	r3, #12
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002074:	2307      	movs	r3, #7
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	4823      	ldr	r0, [pc, #140]	@ (800210c <HAL_UART_MspInit+0x178>)
 8002080:	f000 feae 	bl	8002de0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2100      	movs	r1, #0
 8002088:	2026      	movs	r0, #38	@ 0x26
 800208a:	f000 fdd4 	bl	8002c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800208e:	2026      	movs	r0, #38	@ 0x26
 8002090:	f000 fded 	bl	8002c6e <HAL_NVIC_EnableIRQ>
}
 8002094:	e031      	b.n	80020fa <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a1e      	ldr	r2, [pc, #120]	@ (8002114 <HAL_UART_MspInit+0x180>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d12c      	bne.n	80020fa <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	4b18      	ldr	r3, [pc, #96]	@ (8002108 <HAL_UART_MspInit+0x174>)
 80020a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a8:	4a17      	ldr	r2, [pc, #92]	@ (8002108 <HAL_UART_MspInit+0x174>)
 80020aa:	f043 0320 	orr.w	r3, r3, #32
 80020ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b0:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <HAL_UART_MspInit+0x174>)
 80020b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <HAL_UART_MspInit+0x174>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	4a10      	ldr	r2, [pc, #64]	@ (8002108 <HAL_UART_MspInit+0x174>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80020cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <HAL_UART_MspInit+0x174>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020d8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020ea:	2308      	movs	r3, #8
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	@ (800210c <HAL_UART_MspInit+0x178>)
 80020f6:	f000 fe73 	bl	8002de0 <HAL_GPIO_Init>
}
 80020fa:	bf00      	nop
 80020fc:	3738      	adds	r7, #56	@ 0x38
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40011000 	.word	0x40011000
 8002108:	40023800 	.word	0x40023800
 800210c:	40020000 	.word	0x40020000
 8002110:	40004400 	.word	0x40004400
 8002114:	40011400 	.word	0x40011400

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800211c:	f001 fc62 	bl	80039e4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <NMI_Handler+0x8>

08002124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <HardFault_Handler+0x4>

0800212c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <MemManage_Handler+0x4>

08002134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <BusFault_Handler+0x4>

0800213c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <UsageFault_Handler+0x4>

08002144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002172:	f000 f8db 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002180:	4802      	ldr	r0, [pc, #8]	@ (800218c <USART1_IRQHandler+0x10>)
 8002182:	f001 ff03 	bl	8003f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000100 	.word	0x20000100

08002190 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002194:	4802      	ldr	r0, [pc, #8]	@ (80021a0 <USART2_IRQHandler+0x10>)
 8002196:	f001 fef9 	bl	8003f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000148 	.word	0x20000148

080021a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ac:	4a14      	ldr	r2, [pc, #80]	@ (8002200 <_sbrk+0x5c>)
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <_sbrk+0x60>)
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <_sbrk+0x64>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <_sbrk+0x68>)
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d4:	f002 fef4 	bl	8004fc0 <__errno>
 80021d8:	4603      	mov	r3, r0
 80021da:	220c      	movs	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e009      	b.n	80021f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e4:	4b08      	ldr	r3, [pc, #32]	@ (8002208 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a05      	ldr	r2, [pc, #20]	@ (8002208 <_sbrk+0x64>)
 80021f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20020000 	.word	0x20020000
 8002204:	00000400 	.word	0x00000400
 8002208:	2000068c 	.word	0x2000068c
 800220c:	200007e0 	.word	0x200007e0

08002210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <SystemInit+0x20>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <SystemInit+0x20>)
 800221c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800226c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002238:	f7ff ffea 	bl	8002210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800223c:	480c      	ldr	r0, [pc, #48]	@ (8002270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800223e:	490d      	ldr	r1, [pc, #52]	@ (8002274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002244:	e002      	b.n	800224c <LoopCopyDataInit>

08002246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224a:	3304      	adds	r3, #4

0800224c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800224c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002250:	d3f9      	bcc.n	8002246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002252:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002254:	4c0a      	ldr	r4, [pc, #40]	@ (8002280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002258:	e001      	b.n	800225e <LoopFillZerobss>

0800225a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800225c:	3204      	adds	r2, #4

0800225e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002260:	d3fb      	bcc.n	800225a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002262:	f002 feb3 	bl	8004fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002266:	f7ff f94f 	bl	8001508 <main>
  bx  lr    
 800226a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800226c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002274:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002278:	08005270 	.word	0x08005270
  ldr r2, =_sbss
 800227c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002280:	200007dc 	.word	0x200007dc

08002284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC_IRQHandler>
	...

08002288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800228c:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <HAL_Init+0x40>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0a      	ldr	r2, [pc, #40]	@ (80022c8 <HAL_Init+0x40>)
 800229e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <HAL_Init+0x40>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 fcb5 	bl	8002c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	200f      	movs	r0, #15
 80022b8:	f000 f808 	bl	80022cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022bc:	f7ff fdfe 	bl	8001ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <HAL_InitTick+0x54>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	@ (8002324 <HAL_InitTick+0x58>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fccd 	bl	8002c8a <HAL_SYSTICK_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00e      	b.n	8002318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d80a      	bhi.n	8002316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f000 fc95 	bl	8002c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230c:	4a06      	ldr	r2, [pc, #24]	@ (8002328 <HAL_InitTick+0x5c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2000003c 	.word	0x2000003c
 8002324:	20000044 	.word	0x20000044
 8002328:	20000040 	.word	0x20000040

0800232c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_IncTick+0x20>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <HAL_IncTick+0x24>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <HAL_IncTick+0x24>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000044 	.word	0x20000044
 8002350:	20000690 	.word	0x20000690

08002354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b03      	ldr	r3, [pc, #12]	@ (8002368 <HAL_GetTick+0x14>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000690 	.word	0x20000690

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff ffee 	bl	8002354 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d005      	beq.n	8002392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002386:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_Delay+0x44>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002392:	bf00      	nop
 8002394:	f7ff ffde 	bl	8002354 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8f7      	bhi.n	8002394 <HAL_Delay+0x28>
  {
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000044 	.word	0x20000044

080023b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e033      	b.n	8002432 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fd9a 	bl	8001f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023fa:	f023 0302 	bic.w	r3, r3, #2
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fa3e 	bl	8002888 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	@ 0x40
 8002422:	e001      	b.n	8002428 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Start+0x1a>
 8002452:	2302      	movs	r3, #2
 8002454:	e097      	b.n	8002586 <HAL_ADC_Start+0x14a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d018      	beq.n	800249e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800247c:	4b45      	ldr	r3, [pc, #276]	@ (8002594 <HAL_ADC_Start+0x158>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a45      	ldr	r2, [pc, #276]	@ (8002598 <HAL_ADC_Start+0x15c>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9a      	lsrs	r2, r3, #18
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002490:	e002      	b.n	8002498 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3b01      	subs	r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f9      	bne.n	8002492 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d15f      	bne.n	800256c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ea:	d106      	bne.n	80024fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f0:	f023 0206 	bic.w	r2, r3, #6
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80024f8:	e002      	b.n	8002500 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002508:	4b24      	ldr	r3, [pc, #144]	@ (800259c <HAL_ADC_Start+0x160>)
 800250a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002514:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d129      	bne.n	8002584 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	e020      	b.n	8002584 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a16      	ldr	r2, [pc, #88]	@ (80025a0 <HAL_ADC_Start+0x164>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d11b      	bne.n	8002584 <HAL_ADC_Start+0x148>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d114      	bne.n	8002584 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	e00b      	b.n	8002584 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f043 0210 	orr.w	r2, r3, #16
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	2000003c 	.word	0x2000003c
 8002598:	431bde83 	.word	0x431bde83
 800259c:	40012300 	.word	0x40012300
 80025a0:	40012000 	.word	0x40012000

080025a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Stop+0x16>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e021      	b.n	80025fe <HAL_ADC_Stop+0x5a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0201 	bic.w	r2, r2, #1
 80025d0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1c>
 800263c:	2302      	movs	r3, #2
 800263e:	e113      	b.n	8002868 <HAL_ADC_ConfigChannel+0x244>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b09      	cmp	r3, #9
 800264e:	d925      	bls.n	800269c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68d9      	ldr	r1, [r3, #12]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	3b1e      	subs	r3, #30
 8002666:	2207      	movs	r2, #7
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43da      	mvns	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	400a      	ands	r2, r1
 8002674:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68d9      	ldr	r1, [r3, #12]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	4618      	mov	r0, r3
 8002688:	4603      	mov	r3, r0
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4403      	add	r3, r0
 800268e:	3b1e      	subs	r3, #30
 8002690:	409a      	lsls	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	e022      	b.n	80026e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	2207      	movs	r2, #7
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	400a      	ands	r2, r1
 80026be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6919      	ldr	r1, [r3, #16]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4403      	add	r3, r0
 80026d8:	409a      	lsls	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d824      	bhi.n	8002734 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	3b05      	subs	r3, #5
 80026fc:	221f      	movs	r2, #31
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	400a      	ands	r2, r1
 800270a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	4618      	mov	r0, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	3b05      	subs	r3, #5
 8002726:	fa00 f203 	lsl.w	r2, r0, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	635a      	str	r2, [r3, #52]	@ 0x34
 8002732:	e04c      	b.n	80027ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b0c      	cmp	r3, #12
 800273a:	d824      	bhi.n	8002786 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	3b23      	subs	r3, #35	@ 0x23
 800274e:	221f      	movs	r2, #31
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43da      	mvns	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	400a      	ands	r2, r1
 800275c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	4618      	mov	r0, r3
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	3b23      	subs	r3, #35	@ 0x23
 8002778:	fa00 f203 	lsl.w	r2, r0, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
 8002784:	e023      	b.n	80027ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	3b41      	subs	r3, #65	@ 0x41
 8002798:	221f      	movs	r2, #31
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	400a      	ands	r2, r1
 80027a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	4618      	mov	r0, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	3b41      	subs	r3, #65	@ 0x41
 80027c2:	fa00 f203 	lsl.w	r2, r0, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ce:	4b29      	ldr	r3, [pc, #164]	@ (8002874 <HAL_ADC_ConfigChannel+0x250>)
 80027d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a28      	ldr	r2, [pc, #160]	@ (8002878 <HAL_ADC_ConfigChannel+0x254>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d10f      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1d8>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b12      	cmp	r3, #18
 80027e2:	d10b      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1d      	ldr	r2, [pc, #116]	@ (8002878 <HAL_ADC_ConfigChannel+0x254>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d12b      	bne.n	800285e <HAL_ADC_ConfigChannel+0x23a>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1c      	ldr	r2, [pc, #112]	@ (800287c <HAL_ADC_ConfigChannel+0x258>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x1f4>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b11      	cmp	r3, #17
 8002816:	d122      	bne.n	800285e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a11      	ldr	r2, [pc, #68]	@ (800287c <HAL_ADC_ConfigChannel+0x258>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d111      	bne.n	800285e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_ADC_ConfigChannel+0x25c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a11      	ldr	r2, [pc, #68]	@ (8002884 <HAL_ADC_ConfigChannel+0x260>)
 8002840:	fba2 2303 	umull	r2, r3, r2, r3
 8002844:	0c9a      	lsrs	r2, r3, #18
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002850:	e002      	b.n	8002858 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3b01      	subs	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f9      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40012300 	.word	0x40012300
 8002878:	40012000 	.word	0x40012000
 800287c:	10000012 	.word	0x10000012
 8002880:	2000003c 	.word	0x2000003c
 8002884:	431bde83 	.word	0x431bde83

08002888 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002890:	4b79      	ldr	r3, [pc, #484]	@ (8002a78 <ADC_Init+0x1f0>)
 8002892:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	021a      	lsls	r2, r3, #8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6859      	ldr	r1, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6899      	ldr	r1, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	4a58      	ldr	r2, [pc, #352]	@ (8002a7c <ADC_Init+0x1f4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d022      	beq.n	8002966 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800292e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6899      	ldr	r1, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	e00f      	b.n	8002986 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002984:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0202 	bic.w	r2, r2, #2
 8002994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6899      	ldr	r1, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7e1b      	ldrb	r3, [r3, #24]
 80029a0:	005a      	lsls	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01b      	beq.n	80029ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	3b01      	subs	r3, #1
 80029e0:	035a      	lsls	r2, r3, #13
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	e007      	b.n	80029fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	051a      	lsls	r2, r3, #20
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a3e:	025a      	lsls	r2, r3, #9
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6899      	ldr	r1, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	029a      	lsls	r2, r3, #10
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40012300 	.word	0x40012300
 8002a7c:	0f000001 	.word	0x0f000001

08002a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	@ (8002ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	0a1b      	lsrs	r3, r3, #8
 8002ad2:	f003 0307 	and.w	r3, r3, #7
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	db0b      	blt.n	8002b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	4907      	ldr	r1, [pc, #28]	@ (8002b1c <__NVIC_EnableIRQ+0x38>)
 8002afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	2001      	movs	r0, #1
 8002b06:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	@ (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	@ (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	@ 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bec:	d301      	bcc.n	8002bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00f      	b.n	8002c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <SysTick_Config+0x40>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfa:	210f      	movs	r1, #15
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f7ff ff8e 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <SysTick_Config+0x40>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0a:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <SysTick_Config+0x40>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000e010 	.word	0xe000e010

08002c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff29 	bl	8002a80 <__NVIC_SetPriorityGrouping>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b086      	sub	sp, #24
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c48:	f7ff ff3e 	bl	8002ac8 <__NVIC_GetPriorityGrouping>
 8002c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6978      	ldr	r0, [r7, #20]
 8002c54:	f7ff ff8e 	bl	8002b74 <NVIC_EncodePriority>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ff5d 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff31 	bl	8002ae4 <__NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ffa2 	bl	8002bdc <SysTick_Config>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cb0:	f7ff fb50 	bl	8002354 <HAL_GetTick>
 8002cb4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d008      	beq.n	8002cd4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2280      	movs	r2, #128	@ 0x80
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e052      	b.n	8002d7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0216 	bic.w	r2, r2, #22
 8002ce2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cf2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d103      	bne.n	8002d04 <HAL_DMA_Abort+0x62>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0208 	bic.w	r2, r2, #8
 8002d12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d24:	e013      	b.n	8002d4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d26:	f7ff fb15 	bl	8002354 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d90c      	bls.n	8002d4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e015      	b.n	8002d7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e4      	bne.n	8002d26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	223f      	movs	r2, #63	@ 0x3f
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d004      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2280      	movs	r2, #128	@ 0x80
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e00c      	b.n	8002dba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2205      	movs	r2, #5
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b089      	sub	sp, #36	@ 0x24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e159      	b.n	80030b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	f040 8148 	bne.w	80030aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d005      	beq.n	8002e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d130      	bne.n	8002e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e68:	2201      	movs	r2, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 0201 	and.w	r2, r3, #1
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d017      	beq.n	8002ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d123      	bne.n	8002f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	08da      	lsrs	r2, r3, #3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3208      	adds	r2, #8
 8002ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	220f      	movs	r2, #15
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	08da      	lsrs	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3208      	adds	r2, #8
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a2 	beq.w	80030aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	4b57      	ldr	r3, [pc, #348]	@ (80030c8 <HAL_GPIO_Init+0x2e8>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	4a56      	ldr	r2, [pc, #344]	@ (80030c8 <HAL_GPIO_Init+0x2e8>)
 8002f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f76:	4b54      	ldr	r3, [pc, #336]	@ (80030c8 <HAL_GPIO_Init+0x2e8>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f82:	4a52      	ldr	r2, [pc, #328]	@ (80030cc <HAL_GPIO_Init+0x2ec>)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a49      	ldr	r2, [pc, #292]	@ (80030d0 <HAL_GPIO_Init+0x2f0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d019      	beq.n	8002fe2 <HAL_GPIO_Init+0x202>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a48      	ldr	r2, [pc, #288]	@ (80030d4 <HAL_GPIO_Init+0x2f4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_GPIO_Init+0x1fe>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a47      	ldr	r2, [pc, #284]	@ (80030d8 <HAL_GPIO_Init+0x2f8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00d      	beq.n	8002fda <HAL_GPIO_Init+0x1fa>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a46      	ldr	r2, [pc, #280]	@ (80030dc <HAL_GPIO_Init+0x2fc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <HAL_GPIO_Init+0x1f6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a45      	ldr	r2, [pc, #276]	@ (80030e0 <HAL_GPIO_Init+0x300>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d101      	bne.n	8002fd2 <HAL_GPIO_Init+0x1f2>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e008      	b.n	8002fe4 <HAL_GPIO_Init+0x204>
 8002fd2:	2307      	movs	r3, #7
 8002fd4:	e006      	b.n	8002fe4 <HAL_GPIO_Init+0x204>
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e004      	b.n	8002fe4 <HAL_GPIO_Init+0x204>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e002      	b.n	8002fe4 <HAL_GPIO_Init+0x204>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_GPIO_Init+0x204>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	f002 0203 	and.w	r2, r2, #3
 8002fea:	0092      	lsls	r2, r2, #2
 8002fec:	4093      	lsls	r3, r2
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff4:	4935      	ldr	r1, [pc, #212]	@ (80030cc <HAL_GPIO_Init+0x2ec>)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003002:	4b38      	ldr	r3, [pc, #224]	@ (80030e4 <HAL_GPIO_Init+0x304>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003026:	4a2f      	ldr	r2, [pc, #188]	@ (80030e4 <HAL_GPIO_Init+0x304>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800302c:	4b2d      	ldr	r3, [pc, #180]	@ (80030e4 <HAL_GPIO_Init+0x304>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003050:	4a24      	ldr	r2, [pc, #144]	@ (80030e4 <HAL_GPIO_Init+0x304>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003056:	4b23      	ldr	r3, [pc, #140]	@ (80030e4 <HAL_GPIO_Init+0x304>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800307a:	4a1a      	ldr	r2, [pc, #104]	@ (80030e4 <HAL_GPIO_Init+0x304>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003080:	4b18      	ldr	r3, [pc, #96]	@ (80030e4 <HAL_GPIO_Init+0x304>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030a4:	4a0f      	ldr	r2, [pc, #60]	@ (80030e4 <HAL_GPIO_Init+0x304>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3301      	adds	r3, #1
 80030ae:	61fb      	str	r3, [r7, #28]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	f67f aea2 	bls.w	8002dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3724      	adds	r7, #36	@ 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40013800 	.word	0x40013800
 80030d0:	40020000 	.word	0x40020000
 80030d4:	40020400 	.word	0x40020400
 80030d8:	40020800 	.word	0x40020800
 80030dc:	40020c00 	.word	0x40020c00
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40013c00 	.word	0x40013c00

080030e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
 80030f4:	4613      	mov	r3, r2
 80030f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f8:	787b      	ldrb	r3, [r7, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003104:	e003      	b.n	800310e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	041a      	lsls	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e267      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d075      	beq.n	8003226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800313a:	4b88      	ldr	r3, [pc, #544]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d00c      	beq.n	8003160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003146:	4b85      	ldr	r3, [pc, #532]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314e:	2b08      	cmp	r3, #8
 8003150:	d112      	bne.n	8003178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4b82      	ldr	r3, [pc, #520]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800315e:	d10b      	bne.n	8003178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	4b7e      	ldr	r3, [pc, #504]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05b      	beq.n	8003224 <HAL_RCC_OscConfig+0x108>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d157      	bne.n	8003224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e242      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d106      	bne.n	8003190 <HAL_RCC_OscConfig+0x74>
 8003182:	4b76      	ldr	r3, [pc, #472]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a75      	ldr	r2, [pc, #468]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <HAL_RCC_OscConfig+0xb0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x98>
 800319a:	4b70      	ldr	r3, [pc, #448]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6f      	ldr	r2, [pc, #444]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b6d      	ldr	r3, [pc, #436]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6c      	ldr	r2, [pc, #432]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0xb0>
 80031b4:	4b69      	ldr	r3, [pc, #420]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a68      	ldr	r2, [pc, #416]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b66      	ldr	r3, [pc, #408]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a65      	ldr	r2, [pc, #404]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7ff f8be 	bl	8002354 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031dc:	f7ff f8ba 	bl	8002354 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	@ 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e207      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b5b      	ldr	r3, [pc, #364]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0xc0>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7ff f8aa 	bl	8002354 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7ff f8a6 	bl	8002354 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1f3      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	4b51      	ldr	r3, [pc, #324]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0xe8>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d063      	beq.n	80032fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003232:	4b4a      	ldr	r3, [pc, #296]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323e:	4b47      	ldr	r3, [pc, #284]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003246:	2b08      	cmp	r3, #8
 8003248:	d11c      	bne.n	8003284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324a:	4b44      	ldr	r3, [pc, #272]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d116      	bne.n	8003284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	4b41      	ldr	r3, [pc, #260]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x152>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e1c7      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	4b3b      	ldr	r3, [pc, #236]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4937      	ldr	r1, [pc, #220]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	e03a      	b.n	80032fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328c:	4b34      	ldr	r3, [pc, #208]	@ (8003360 <HAL_RCC_OscConfig+0x244>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003292:	f7ff f85f 	bl	8002354 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329a:	f7ff f85b 	bl	8002354 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1a8      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	4b2b      	ldr	r3, [pc, #172]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b28      	ldr	r3, [pc, #160]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4925      	ldr	r1, [pc, #148]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b24      	ldr	r3, [pc, #144]	@ (8003360 <HAL_RCC_OscConfig+0x244>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7ff f83e 	bl	8002354 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032dc:	f7ff f83a 	bl	8002354 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e187      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	4b1b      	ldr	r3, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d036      	beq.n	8003374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330e:	4b15      	ldr	r3, [pc, #84]	@ (8003364 <HAL_RCC_OscConfig+0x248>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7ff f81e 	bl	8002354 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800331c:	f7ff f81a 	bl	8002354 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e167      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <HAL_RCC_OscConfig+0x240>)
 8003330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x200>
 800333a:	e01b      	b.n	8003374 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333c:	4b09      	ldr	r3, [pc, #36]	@ (8003364 <HAL_RCC_OscConfig+0x248>)
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7ff f807 	bl	8002354 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	e00e      	b.n	8003368 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800334a:	f7ff f803 	bl	8002354 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d907      	bls.n	8003368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e150      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
 800335c:	40023800 	.word	0x40023800
 8003360:	42470000 	.word	0x42470000
 8003364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	4b88      	ldr	r3, [pc, #544]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800336a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ea      	bne.n	800334a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8097 	beq.w	80034b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b81      	ldr	r3, [pc, #516]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10f      	bne.n	80033b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	4b7d      	ldr	r3, [pc, #500]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4a7c      	ldr	r2, [pc, #496]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a2:	4b7a      	ldr	r3, [pc, #488]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b2:	4b77      	ldr	r3, [pc, #476]	@ (8003590 <HAL_RCC_OscConfig+0x474>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d118      	bne.n	80033f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033be:	4b74      	ldr	r3, [pc, #464]	@ (8003590 <HAL_RCC_OscConfig+0x474>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a73      	ldr	r2, [pc, #460]	@ (8003590 <HAL_RCC_OscConfig+0x474>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ca:	f7fe ffc3 	bl	8002354 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d2:	f7fe ffbf 	bl	8002354 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e10c      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003590 <HAL_RCC_OscConfig+0x474>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d106      	bne.n	8003406 <HAL_RCC_OscConfig+0x2ea>
 80033f8:	4b64      	ldr	r3, [pc, #400]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	4a63      	ldr	r2, [pc, #396]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6713      	str	r3, [r2, #112]	@ 0x70
 8003404:	e01c      	b.n	8003440 <HAL_RCC_OscConfig+0x324>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b05      	cmp	r3, #5
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0x30c>
 800340e:	4b5f      	ldr	r3, [pc, #380]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	4a5e      	ldr	r2, [pc, #376]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003414:	f043 0304 	orr.w	r3, r3, #4
 8003418:	6713      	str	r3, [r2, #112]	@ 0x70
 800341a:	4b5c      	ldr	r3, [pc, #368]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341e:	4a5b      	ldr	r2, [pc, #364]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	6713      	str	r3, [r2, #112]	@ 0x70
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0x324>
 8003428:	4b58      	ldr	r3, [pc, #352]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342c:	4a57      	ldr	r2, [pc, #348]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	@ 0x70
 8003434:	4b55      	ldr	r3, [pc, #340]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003438:	4a54      	ldr	r2, [pc, #336]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d015      	beq.n	8003474 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fe ff84 	bl	8002354 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344e:	e00a      	b.n	8003466 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003450:	f7fe ff80 	bl	8002354 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e0cb      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	4b49      	ldr	r3, [pc, #292]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d0ee      	beq.n	8003450 <HAL_RCC_OscConfig+0x334>
 8003472:	e014      	b.n	800349e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003474:	f7fe ff6e 	bl	8002354 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347a:	e00a      	b.n	8003492 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fe ff6a 	bl	8002354 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0b5      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003492:	4b3e      	ldr	r3, [pc, #248]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1ee      	bne.n	800347c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d105      	bne.n	80034b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a4:	4b39      	ldr	r3, [pc, #228]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	4a38      	ldr	r2, [pc, #224]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80034aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80a1 	beq.w	80035fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ba:	4b34      	ldr	r3, [pc, #208]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d05c      	beq.n	8003580 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d141      	bne.n	8003552 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <HAL_RCC_OscConfig+0x478>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe ff3e 	bl	8002354 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe ff3a 	bl	8002354 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e087      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b27      	ldr	r3, [pc, #156]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	019b      	lsls	r3, r3, #6
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	3b01      	subs	r3, #1
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351c:	061b      	lsls	r3, r3, #24
 800351e:	491b      	ldr	r1, [pc, #108]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003524:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_RCC_OscConfig+0x478>)
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352a:	f7fe ff13 	bl	8002354 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003532:	f7fe ff0f 	bl	8002354 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e05c      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003544:	4b11      	ldr	r3, [pc, #68]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x416>
 8003550:	e054      	b.n	80035fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003552:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <HAL_RCC_OscConfig+0x478>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fefc 	bl	8002354 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe fef8 	bl	8002354 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e045      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_RCC_OscConfig+0x470>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x444>
 800357e:	e03d      	b.n	80035fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d107      	bne.n	8003598 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e038      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
 800358c:	40023800 	.word	0x40023800
 8003590:	40007000 	.word	0x40007000
 8003594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003598:	4b1b      	ldr	r3, [pc, #108]	@ (8003608 <HAL_RCC_OscConfig+0x4ec>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d028      	beq.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d121      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d11a      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d111      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	3b01      	subs	r3, #1
 80035e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800

0800360c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0cc      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003620:	4b68      	ldr	r3, [pc, #416]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d90c      	bls.n	8003648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362e:	4b65      	ldr	r3, [pc, #404]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b63      	ldr	r3, [pc, #396]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0b8      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003660:	4b59      	ldr	r3, [pc, #356]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a58      	ldr	r2, [pc, #352]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800366a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003678:	4b53      	ldr	r3, [pc, #332]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a52      	ldr	r2, [pc, #328]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003684:	4b50      	ldr	r3, [pc, #320]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	494d      	ldr	r1, [pc, #308]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d044      	beq.n	800372c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b47      	ldr	r3, [pc, #284]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d119      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d107      	bne.n	80036da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b3f      	ldr	r3, [pc, #252]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e06f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036da:	4b3b      	ldr	r3, [pc, #236]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e067      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ea:	4b37      	ldr	r3, [pc, #220]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f023 0203 	bic.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4934      	ldr	r1, [pc, #208]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036fc:	f7fe fe2a 	bl	8002354 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	e00a      	b.n	800371a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003704:	f7fe fe26 	bl	8002354 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e04f      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	4b2b      	ldr	r3, [pc, #172]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 020c 	and.w	r2, r3, #12
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	429a      	cmp	r2, r3
 800372a:	d1eb      	bne.n	8003704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800372c:	4b25      	ldr	r3, [pc, #148]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d20c      	bcs.n	8003754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b22      	ldr	r3, [pc, #136]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b20      	ldr	r3, [pc, #128]	@ (80037c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e032      	b.n	80037ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003760:	4b19      	ldr	r3, [pc, #100]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4916      	ldr	r1, [pc, #88]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	4313      	orrs	r3, r2
 8003770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d009      	beq.n	8003792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800377e:	4b12      	ldr	r3, [pc, #72]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	490e      	ldr	r1, [pc, #56]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003792:	f000 f82d 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 8003796:	4602      	mov	r2, r0
 8003798:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	490a      	ldr	r1, [pc, #40]	@ (80037cc <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	5ccb      	ldrb	r3, [r1, r3]
 80037a6:	fa22 f303 	lsr.w	r3, r2, r3
 80037aa:	4a09      	ldr	r2, [pc, #36]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ae:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fd8a 	bl	80022cc <HAL_InitTick>

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023c00 	.word	0x40023c00
 80037c8:	40023800 	.word	0x40023800
 80037cc:	08005248 	.word	0x08005248
 80037d0:	2000003c 	.word	0x2000003c
 80037d4:	20000040 	.word	0x20000040

080037d8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80037dc:	4b03      	ldr	r3, [pc, #12]	@ (80037ec <HAL_RCC_EnableCSS+0x14>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
}
 80037e2:	bf00      	nop
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	4247004c 	.word	0x4247004c

080037f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f4:	b090      	sub	sp, #64	@ 0x40
 80037f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80037fc:	2300      	movs	r3, #0
 80037fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003800:	2300      	movs	r3, #0
 8003802:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003808:	4b59      	ldr	r3, [pc, #356]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b08      	cmp	r3, #8
 8003812:	d00d      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x40>
 8003814:	2b08      	cmp	r3, #8
 8003816:	f200 80a1 	bhi.w	800395c <HAL_RCC_GetSysClockFreq+0x16c>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x34>
 800381e:	2b04      	cmp	r3, #4
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x3a>
 8003822:	e09b      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b53      	ldr	r3, [pc, #332]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x184>)
 8003826:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003828:	e09b      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382a:	4b53      	ldr	r3, [pc, #332]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x188>)
 800382c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800382e:	e098      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003830:	4b4f      	ldr	r3, [pc, #316]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003838:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800383a:	4b4d      	ldr	r3, [pc, #308]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d028      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003846:	4b4a      	ldr	r3, [pc, #296]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	2200      	movs	r2, #0
 800384e:	623b      	str	r3, [r7, #32]
 8003850:	627a      	str	r2, [r7, #36]	@ 0x24
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003858:	2100      	movs	r1, #0
 800385a:	4b47      	ldr	r3, [pc, #284]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x188>)
 800385c:	fb03 f201 	mul.w	r2, r3, r1
 8003860:	2300      	movs	r3, #0
 8003862:	fb00 f303 	mul.w	r3, r0, r3
 8003866:	4413      	add	r3, r2
 8003868:	4a43      	ldr	r2, [pc, #268]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x188>)
 800386a:	fba0 1202 	umull	r1, r2, r0, r2
 800386e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003870:	460a      	mov	r2, r1
 8003872:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003876:	4413      	add	r3, r2
 8003878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800387a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387c:	2200      	movs	r2, #0
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	61fa      	str	r2, [r7, #28]
 8003882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003886:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800388a:	f7fd f8cb 	bl	8000a24 <__aeabi_uldivmod>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4613      	mov	r3, r2
 8003894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003896:	e053      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003898:	4b35      	ldr	r3, [pc, #212]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	099b      	lsrs	r3, r3, #6
 800389e:	2200      	movs	r2, #0
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	617a      	str	r2, [r7, #20]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038aa:	f04f 0b00 	mov.w	fp, #0
 80038ae:	4652      	mov	r2, sl
 80038b0:	465b      	mov	r3, fp
 80038b2:	f04f 0000 	mov.w	r0, #0
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	0159      	lsls	r1, r3, #5
 80038bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c0:	0150      	lsls	r0, r2, #5
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	ebb2 080a 	subs.w	r8, r2, sl
 80038ca:	eb63 090b 	sbc.w	r9, r3, fp
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038e2:	ebb2 0408 	subs.w	r4, r2, r8
 80038e6:	eb63 0509 	sbc.w	r5, r3, r9
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	00eb      	lsls	r3, r5, #3
 80038f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f8:	00e2      	lsls	r2, r4, #3
 80038fa:	4614      	mov	r4, r2
 80038fc:	461d      	mov	r5, r3
 80038fe:	eb14 030a 	adds.w	r3, r4, sl
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	eb45 030b 	adc.w	r3, r5, fp
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003916:	4629      	mov	r1, r5
 8003918:	028b      	lsls	r3, r1, #10
 800391a:	4621      	mov	r1, r4
 800391c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003920:	4621      	mov	r1, r4
 8003922:	028a      	lsls	r2, r1, #10
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392a:	2200      	movs	r2, #0
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	60fa      	str	r2, [r7, #12]
 8003930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003934:	f7fd f876 	bl	8000a24 <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4613      	mov	r3, r2
 800393e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003940:	4b0b      	ldr	r3, [pc, #44]	@ (8003970 <HAL_RCC_GetSysClockFreq+0x180>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003950:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800395a:	e002      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <HAL_RCC_GetSysClockFreq+0x184>)
 800395e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003964:	4618      	mov	r0, r3
 8003966:	3740      	adds	r7, #64	@ 0x40
 8003968:	46bd      	mov	sp, r7
 800396a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	00f42400 	.word	0x00f42400
 8003978:	017d7840 	.word	0x017d7840

0800397c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003980:	4b03      	ldr	r3, [pc, #12]	@ (8003990 <HAL_RCC_GetHCLKFreq+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	2000003c 	.word	0x2000003c

08003994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003998:	f7ff fff0 	bl	800397c <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0a9b      	lsrs	r3, r3, #10
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4903      	ldr	r1, [pc, #12]	@ (80039b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08005258 	.word	0x08005258

080039bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c0:	f7ff ffdc 	bl	800397c <HAL_RCC_GetHCLKFreq>
 80039c4:	4602      	mov	r2, r0
 80039c6:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	0b5b      	lsrs	r3, r3, #13
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	4903      	ldr	r1, [pc, #12]	@ (80039e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d2:	5ccb      	ldrb	r3, [r1, r3]
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40023800 	.word	0x40023800
 80039e0:	08005258 	.word	0x08005258

080039e4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80039e8:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_RCC_NMI_IRQHandler+0x20>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f0:	2b80      	cmp	r3, #128	@ 0x80
 80039f2:	d104      	bne.n	80039fe <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80039f4:	f000 f80a 	bl	8003a0c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80039f8:	4b03      	ldr	r3, [pc, #12]	@ (8003a08 <HAL_RCC_NMI_IRQHandler+0x24>)
 80039fa:	2280      	movs	r2, #128	@ 0x80
 80039fc:	701a      	strb	r2, [r3, #0]
  }
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	4002380e 	.word	0x4002380e

08003a0c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e042      	b.n	8003ab2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d106      	bne.n	8003a46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7fe faa7 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2224      	movs	r2, #36	@ 0x24
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 ff6c 	bl	800493c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b08a      	sub	sp, #40	@ 0x28
 8003abe:	af02      	add	r7, sp, #8
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d175      	bne.n	8003bc6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_UART_Transmit+0x2c>
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06e      	b.n	8003bc8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2221      	movs	r2, #33	@ 0x21
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af8:	f7fe fc2c 	bl	8002354 <HAL_GetTick>
 8003afc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b12:	d108      	bne.n	8003b26 <HAL_UART_Transmit+0x6c>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e003      	b.n	8003b2e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b2e:	e02e      	b.n	8003b8e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2200      	movs	r2, #0
 8003b38:	2180      	movs	r1, #128	@ 0x80
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fcce 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e03a      	b.n	8003bc8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b66:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	e007      	b.n	8003b80 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	781a      	ldrb	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1cb      	bne.n	8003b30 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2140      	movs	r1, #64	@ 0x40
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fc9a 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e006      	b.n	8003bc8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	e000      	b.n	8003bc8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
  }
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3720      	adds	r7, #32
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	@ 0x28
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	f040 8081 	bne.w	8003cf4 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_UART_Receive+0x2e>
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e079      	b.n	8003cf6 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2222      	movs	r2, #34	@ 0x22
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c16:	f7fe fb9d 	bl	8002354 <HAL_GetTick>
 8003c1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c30:	d108      	bne.n	8003c44 <HAL_UART_Receive+0x74>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d104      	bne.n	8003c44 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	e003      	b.n	8003c4c <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c4c:	e047      	b.n	8003cde <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2120      	movs	r1, #32
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fc3f 	bl	80044dc <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e042      	b.n	8003cf6 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10c      	bne.n	8003c90 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	3302      	adds	r3, #2
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e01f      	b.n	8003cd0 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c98:	d007      	beq.n	8003caa <HAL_UART_Receive+0xda>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <HAL_UART_Receive+0xe8>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e008      	b.n	8003cca <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1b2      	bne.n	8003c4e <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d121      	bne.n	8003d5c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_UART_Transmit_IT+0x26>
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e01a      	b.n	8003d5e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	88fa      	ldrh	r2, [r7, #6]
 8003d32:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2221      	movs	r2, #33	@ 0x21
 8003d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d56:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	60f8      	str	r0, [r7, #12]
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	4613      	mov	r3, r2
 8003d76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d112      	bne.n	8003daa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_UART_Receive_IT+0x26>
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e00b      	b.n	8003dac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fbf4 	bl	800458e <UART_Start_Receive_IT>
 8003da6:	4603      	mov	r3, r0
 8003da8:	e000      	b.n	8003dac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003daa:	2302      	movs	r3, #2
  }
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b0a0      	sub	sp, #128	@ 0x80
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8003dcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dce:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8003dd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003ddc:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003dde:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003de2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003dea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3314      	adds	r3, #20
 8003df6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3314      	adds	r3, #20
 8003e0e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003e10:	657a      	str	r2, [r7, #84]	@ 0x54
 8003e12:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003e16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e5      	bne.n	8003df0 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d119      	bne.n	8003e60 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3e:	f023 0310 	bic.w	r3, r3, #16
 8003e42:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003e4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e5      	bne.n	8003e2c <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e6a:	2b80      	cmp	r3, #128	@ 0x80
 8003e6c:	d136      	bne.n	8003edc <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3314      	adds	r3, #20
 8003e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e84:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e5      	bne.n	8003e6e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d018      	beq.n	8003edc <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eae:	2200      	movs	r2, #0
 8003eb0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fef3 	bl	8002ca2 <HAL_DMA_Abort>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00c      	beq.n	8003edc <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe ff7d 	bl	8002dc6 <HAL_DMA_GetError>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d104      	bne.n	8003edc <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2210      	movs	r2, #16
 8003ed6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e052      	b.n	8003f82 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee6:	2b40      	cmp	r3, #64	@ 0x40
 8003ee8:	d136      	bne.n	8003f58 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3314      	adds	r3, #20
 8003ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3314      	adds	r3, #20
 8003f08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f0a:	61ba      	str	r2, [r7, #24]
 8003f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6979      	ldr	r1, [r7, #20]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	613b      	str	r3, [r7, #16]
   return(result);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e5      	bne.n	8003eea <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d018      	beq.n	8003f58 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe feb5 	bl	8002ca2 <HAL_DMA_Abort>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe ff3f 	bl	8002dc6 <HAL_DMA_GetError>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d104      	bne.n	8003f58 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2210      	movs	r2, #16
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e014      	b.n	8003f82 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3780      	adds	r7, #128	@ 0x80
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b0ba      	sub	sp, #232	@ 0xe8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x66>
 8003fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fbe8 	bl	80047c0 <UART_Receive_IT>
      return;
 8003ff0:	e25b      	b.n	80044aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80de 	beq.w	80041b8 <HAL_UART_IRQHandler+0x22c>
 8003ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800400c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80d1 	beq.w	80041b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <HAL_UART_IRQHandler+0xae>
 8004022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	f043 0201 	orr.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <HAL_UART_IRQHandler+0xd2>
 8004046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f043 0202 	orr.w	r2, r3, #2
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_UART_IRQHandler+0xf6>
 800406a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d011      	beq.n	80040b2 <HAL_UART_IRQHandler+0x126>
 800408e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d105      	bne.n	80040a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800409a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f043 0208 	orr.w	r2, r3, #8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 81f2 	beq.w	80044a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_UART_IRQHandler+0x14e>
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fb73 	bl	80047c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	2b40      	cmp	r3, #64	@ 0x40
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d103      	bne.n	8004106 <HAL_UART_IRQHandler+0x17a>
 80040fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d04f      	beq.n	80041a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa7b 	bl	8004602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d141      	bne.n	800419e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3314      	adds	r3, #20
 8004120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004130:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3314      	adds	r3, #20
 8004142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004146:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800414a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800415e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1d9      	bne.n	800411a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d013      	beq.n	8004196 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004172:	4a7e      	ldr	r2, [pc, #504]	@ (800436c <HAL_UART_IRQHandler+0x3e0>)
 8004174:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fe01 	bl	8002d82 <HAL_DMA_Abort_IT>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004190:	4610      	mov	r0, r2
 8004192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	e00e      	b.n	80041b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fc4a 	bl	8001a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	e00a      	b.n	80041b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd fc46 	bl	8001a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	e006      	b.n	80041b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd fc42 	bl	8001a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041b2:	e175      	b.n	80044a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	bf00      	nop
    return;
 80041b6:	e173      	b.n	80044a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f040 814f 	bne.w	8004460 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8148 	beq.w	8004460 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8141 	beq.w	8004460 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	f040 80b6 	bne.w	8004370 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004210:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8145 	beq.w	80044a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800421e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004222:	429a      	cmp	r2, r3
 8004224:	f080 813e 	bcs.w	80044a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800422e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800423a:	f000 8088 	beq.w	800434e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004254:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800425c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800426a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800426e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004276:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1d9      	bne.n	800423e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3314      	adds	r3, #20
 8004290:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800429a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e1      	bne.n	800428a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3314      	adds	r3, #20
 80042e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e3      	bne.n	80042c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800431c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431e:	f023 0310 	bic.w	r3, r3, #16
 8004322:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004330:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004332:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004336:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800433e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e3      	bne.n	800430c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fcaa 	bl	8002ca2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800435c:	b29b      	uxth	r3, r3
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	b29b      	uxth	r3, r3
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f8ad 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800436a:	e09b      	b.n	80044a4 <HAL_UART_IRQHandler+0x518>
 800436c:	080046c9 	.word	0x080046c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004378:	b29b      	uxth	r3, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 808e 	beq.w	80044a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800438c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8089 	beq.w	80044a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	330c      	adds	r3, #12
 80043b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80043bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e3      	bne.n	8004396 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	623b      	str	r3, [r7, #32]
   return(result);
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f023 0301 	bic.w	r3, r3, #1
 80043e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e3      	bne.n	80043ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	330c      	adds	r3, #12
 800441a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	60fb      	str	r3, [r7, #12]
   return(result);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0310 	bic.w	r3, r3, #16
 800442a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004438:	61fa      	str	r2, [r7, #28]
 800443a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	69b9      	ldr	r1, [r7, #24]
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	617b      	str	r3, [r7, #20]
   return(result);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e3      	bne.n	8004414 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004452:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f833 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800445e:	e023      	b.n	80044a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <HAL_UART_IRQHandler+0x4f4>
 800446c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f939 	bl	80046f0 <UART_Transmit_IT>
    return;
 800447e:	e014      	b.n	80044aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00e      	beq.n	80044aa <HAL_UART_IRQHandler+0x51e>
 800448c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f979 	bl	8004790 <UART_EndTransmit_IT>
    return;
 800449e:	e004      	b.n	80044aa <HAL_UART_IRQHandler+0x51e>
    return;
 80044a0:	bf00      	nop
 80044a2:	e002      	b.n	80044aa <HAL_UART_IRQHandler+0x51e>
      return;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <HAL_UART_IRQHandler+0x51e>
      return;
 80044a8:	bf00      	nop
  }
}
 80044aa:	37e8      	adds	r7, #232	@ 0xe8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ec:	e03b      	b.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ee:	6a3b      	ldr	r3, [r7, #32]
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d037      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f6:	f7fd ff2d 	bl	8002354 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	6a3a      	ldr	r2, [r7, #32]
 8004502:	429a      	cmp	r2, r3
 8004504:	d302      	bcc.n	800450c <UART_WaitOnFlagUntilTimeout+0x30>
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e03a      	b.n	8004586 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d023      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b80      	cmp	r3, #128	@ 0x80
 8004522:	d020      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b40      	cmp	r3, #64	@ 0x40
 8004528:	d01d      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b08      	cmp	r3, #8
 8004536:	d116      	bne.n	8004566 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f857 	bl	8004602 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2208      	movs	r2, #8
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e00f      	b.n	8004586 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4013      	ands	r3, r2
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	429a      	cmp	r2, r3
 8004582:	d0b4      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	4613      	mov	r3, r2
 800459a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	88fa      	ldrh	r2, [r7, #6]
 80045a6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2222      	movs	r2, #34	@ 0x22
 80045b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045d2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004602:	b480      	push	{r7}
 8004604:	b095      	sub	sp, #84	@ 0x54
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800461a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004620:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	330c      	adds	r3, #12
 8004628:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800462a:	643a      	str	r2, [r7, #64]	@ 0x40
 800462c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004630:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e5      	bne.n	800460a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3314      	adds	r3, #20
 8004644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	61fb      	str	r3, [r7, #28]
   return(result);
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3314      	adds	r3, #20
 800465c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800465e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004660:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800466c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e5      	bne.n	800463e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	2b01      	cmp	r3, #1
 8004678:	d119      	bne.n	80046ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	60bb      	str	r3, [r7, #8]
   return(result);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f023 0310 	bic.w	r3, r3, #16
 8004690:	647b      	str	r3, [r7, #68]	@ 0x44
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800469a:	61ba      	str	r2, [r7, #24]
 800469c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6979      	ldr	r1, [r7, #20]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	613b      	str	r3, [r7, #16]
   return(result);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e5      	bne.n	800467a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046bc:	bf00      	nop
 80046be:	3754      	adds	r7, #84	@ 0x54
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7fd f9a4 	bl	8001a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b21      	cmp	r3, #33	@ 0x21
 8004702:	d13e      	bne.n	8004782 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470c:	d114      	bne.n	8004738 <UART_Transmit_IT+0x48>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d110      	bne.n	8004738 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800472a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	1c9a      	adds	r2, r3, #2
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	621a      	str	r2, [r3, #32]
 8004736:	e008      	b.n	800474a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	1c59      	adds	r1, r3, #1
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6211      	str	r1, [r2, #32]
 8004742:	781a      	ldrb	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29b      	uxth	r3, r3
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4619      	mov	r1, r3
 8004758:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10f      	bne.n	800477e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800476c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800477c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	e000      	b.n	8004784 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004782:	2302      	movs	r3, #2
  }
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fe7d 	bl	80044b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08c      	sub	sp, #48	@ 0x30
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b22      	cmp	r3, #34	@ 0x22
 80047d2:	f040 80ae 	bne.w	8004932 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047de:	d117      	bne.n	8004810 <UART_Receive_IT+0x50>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d113      	bne.n	8004810 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fe:	b29a      	uxth	r2, r3
 8004800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004802:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004808:	1c9a      	adds	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	629a      	str	r2, [r3, #40]	@ 0x28
 800480e:	e026      	b.n	800485e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004822:	d007      	beq.n	8004834 <UART_Receive_IT+0x74>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <UART_Receive_IT+0x82>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	701a      	strb	r2, [r3, #0]
 8004840:	e008      	b.n	8004854 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	b2db      	uxtb	r3, r3
 800484a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800484e:	b2da      	uxtb	r2, r3
 8004850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004852:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29b      	uxth	r3, r3
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	4619      	mov	r1, r3
 800486c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800486e:	2b00      	cmp	r3, #0
 8004870:	d15d      	bne.n	800492e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0220 	bic.w	r2, r2, #32
 8004880:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004890:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d135      	bne.n	8004924 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	613b      	str	r3, [r7, #16]
   return(result);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f023 0310 	bic.w	r3, r3, #16
 80048d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	330c      	adds	r3, #12
 80048dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048de:	623a      	str	r2, [r7, #32]
 80048e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e2:	69f9      	ldr	r1, [r7, #28]
 80048e4:	6a3a      	ldr	r2, [r7, #32]
 80048e6:	e841 2300 	strex	r3, r2, [r1]
 80048ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e5      	bne.n	80048be <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b10      	cmp	r3, #16
 80048fe:	d10a      	bne.n	8004916 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff fdd1 	bl	80044c4 <HAL_UARTEx_RxEventCallback>
 8004922:	e002      	b.n	800492a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fd f841 	bl	80019ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e002      	b.n	8004934 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	e000      	b.n	8004934 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004932:	2302      	movs	r3, #2
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3730      	adds	r7, #48	@ 0x30
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800493c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004940:	b0c0      	sub	sp, #256	@ 0x100
 8004942:	af00      	add	r7, sp, #0
 8004944:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004958:	68d9      	ldr	r1, [r3, #12]
 800495a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	ea40 0301 	orr.w	r3, r0, r1
 8004964:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	431a      	orrs	r2, r3
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	431a      	orrs	r2, r3
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004994:	f021 010c 	bic.w	r1, r1, #12
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049a2:	430b      	orrs	r3, r1
 80049a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b6:	6999      	ldr	r1, [r3, #24]
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	ea40 0301 	orr.w	r3, r0, r1
 80049c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b8f      	ldr	r3, [pc, #572]	@ (8004c08 <UART_SetConfig+0x2cc>)
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d005      	beq.n	80049dc <UART_SetConfig+0xa0>
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b8d      	ldr	r3, [pc, #564]	@ (8004c0c <UART_SetConfig+0x2d0>)
 80049d8:	429a      	cmp	r2, r3
 80049da:	d104      	bne.n	80049e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f7fe ffee 	bl	80039bc <HAL_RCC_GetPCLK2Freq>
 80049e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049e4:	e003      	b.n	80049ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049e6:	f7fe ffd5 	bl	8003994 <HAL_RCC_GetPCLK1Freq>
 80049ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049f8:	f040 810c 	bne.w	8004c14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a0e:	4622      	mov	r2, r4
 8004a10:	462b      	mov	r3, r5
 8004a12:	1891      	adds	r1, r2, r2
 8004a14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a16:	415b      	adcs	r3, r3
 8004a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a1e:	4621      	mov	r1, r4
 8004a20:	eb12 0801 	adds.w	r8, r2, r1
 8004a24:	4629      	mov	r1, r5
 8004a26:	eb43 0901 	adc.w	r9, r3, r1
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a3e:	4690      	mov	r8, r2
 8004a40:	4699      	mov	r9, r3
 8004a42:	4623      	mov	r3, r4
 8004a44:	eb18 0303 	adds.w	r3, r8, r3
 8004a48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	eb49 0303 	adc.w	r3, r9, r3
 8004a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	18db      	adds	r3, r3, r3
 8004a6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a70:	4613      	mov	r3, r2
 8004a72:	eb42 0303 	adc.w	r3, r2, r3
 8004a76:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a80:	f7fb ffd0 	bl	8000a24 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4b61      	ldr	r3, [pc, #388]	@ (8004c10 <UART_SetConfig+0x2d4>)
 8004a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	011c      	lsls	r4, r3, #4
 8004a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004aa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	1891      	adds	r1, r2, r2
 8004aaa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004aac:	415b      	adcs	r3, r3
 8004aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	eb12 0a01 	adds.w	sl, r2, r1
 8004aba:	4649      	mov	r1, r9
 8004abc:	eb43 0b01 	adc.w	fp, r3, r1
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004acc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ad4:	4692      	mov	sl, r2
 8004ad6:	469b      	mov	fp, r3
 8004ad8:	4643      	mov	r3, r8
 8004ada:	eb1a 0303 	adds.w	r3, sl, r3
 8004ade:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ae8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004af8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004afc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b00:	460b      	mov	r3, r1
 8004b02:	18db      	adds	r3, r3, r3
 8004b04:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b06:	4613      	mov	r3, r2
 8004b08:	eb42 0303 	adc.w	r3, r2, r3
 8004b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b16:	f7fb ff85 	bl	8000a24 <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <UART_SetConfig+0x2d4>)
 8004b22:	fba3 2301 	umull	r2, r3, r3, r1
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2264      	movs	r2, #100	@ 0x64
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	1acb      	subs	r3, r1, r3
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b36:	4b36      	ldr	r3, [pc, #216]	@ (8004c10 <UART_SetConfig+0x2d4>)
 8004b38:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b44:	441c      	add	r4, r3
 8004b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b60:	415b      	adcs	r3, r3
 8004b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b68:	4641      	mov	r1, r8
 8004b6a:	1851      	adds	r1, r2, r1
 8004b6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b6e:	4649      	mov	r1, r9
 8004b70:	414b      	adcs	r3, r1
 8004b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b80:	4659      	mov	r1, fp
 8004b82:	00cb      	lsls	r3, r1, #3
 8004b84:	4651      	mov	r1, sl
 8004b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b8a:	4651      	mov	r1, sl
 8004b8c:	00ca      	lsls	r2, r1, #3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	4642      	mov	r2, r8
 8004b96:	189b      	adds	r3, r3, r2
 8004b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	eb42 0303 	adc.w	r3, r2, r3
 8004ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bb4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	18db      	adds	r3, r3, r3
 8004bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	eb42 0303 	adc.w	r3, r2, r3
 8004bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bd2:	f7fb ff27 	bl	8000a24 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4b0d      	ldr	r3, [pc, #52]	@ (8004c10 <UART_SetConfig+0x2d4>)
 8004bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	2164      	movs	r1, #100	@ 0x64
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	3332      	adds	r3, #50	@ 0x32
 8004bee:	4a08      	ldr	r2, [pc, #32]	@ (8004c10 <UART_SetConfig+0x2d4>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	f003 0207 	and.w	r2, r3, #7
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4422      	add	r2, r4
 8004c02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c04:	e106      	b.n	8004e14 <UART_SetConfig+0x4d8>
 8004c06:	bf00      	nop
 8004c08:	40011000 	.word	0x40011000
 8004c0c:	40011400 	.word	0x40011400
 8004c10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c26:	4642      	mov	r2, r8
 8004c28:	464b      	mov	r3, r9
 8004c2a:	1891      	adds	r1, r2, r2
 8004c2c:	6239      	str	r1, [r7, #32]
 8004c2e:	415b      	adcs	r3, r3
 8004c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c36:	4641      	mov	r1, r8
 8004c38:	1854      	adds	r4, r2, r1
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	eb43 0501 	adc.w	r5, r3, r1
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	00eb      	lsls	r3, r5, #3
 8004c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c4e:	00e2      	lsls	r2, r4, #3
 8004c50:	4614      	mov	r4, r2
 8004c52:	461d      	mov	r5, r3
 8004c54:	4643      	mov	r3, r8
 8004c56:	18e3      	adds	r3, r4, r3
 8004c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c5c:	464b      	mov	r3, r9
 8004c5e:	eb45 0303 	adc.w	r3, r5, r3
 8004c62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c82:	4629      	mov	r1, r5
 8004c84:	008b      	lsls	r3, r1, #2
 8004c86:	4621      	mov	r1, r4
 8004c88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	008a      	lsls	r2, r1, #2
 8004c90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c94:	f7fb fec6 	bl	8000a24 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4b60      	ldr	r3, [pc, #384]	@ (8004e20 <UART_SetConfig+0x4e4>)
 8004c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	011c      	lsls	r4, r3, #4
 8004ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	1891      	adds	r1, r2, r2
 8004cbe:	61b9      	str	r1, [r7, #24]
 8004cc0:	415b      	adcs	r3, r3
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc8:	4641      	mov	r1, r8
 8004cca:	1851      	adds	r1, r2, r1
 8004ccc:	6139      	str	r1, [r7, #16]
 8004cce:	4649      	mov	r1, r9
 8004cd0:	414b      	adcs	r3, r1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ce0:	4659      	mov	r1, fp
 8004ce2:	00cb      	lsls	r3, r1, #3
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cea:	4651      	mov	r1, sl
 8004cec:	00ca      	lsls	r2, r1, #3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	460a      	mov	r2, r1
 8004d00:	eb42 0303 	adc.w	r3, r2, r3
 8004d04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d20:	4649      	mov	r1, r9
 8004d22:	008b      	lsls	r3, r1, #2
 8004d24:	4641      	mov	r1, r8
 8004d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	008a      	lsls	r2, r1, #2
 8004d2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d32:	f7fb fe77 	bl	8000a24 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4b38      	ldr	r3, [pc, #224]	@ (8004e20 <UART_SetConfig+0x4e4>)
 8004d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	2264      	movs	r2, #100	@ 0x64
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	1acb      	subs	r3, r1, r3
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	3332      	adds	r3, #50	@ 0x32
 8004d50:	4a33      	ldr	r2, [pc, #204]	@ (8004e20 <UART_SetConfig+0x4e4>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d5c:	441c      	add	r4, r3
 8004d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d62:	2200      	movs	r2, #0
 8004d64:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d66:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	415b      	adcs	r3, r3
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	1851      	adds	r1, r2, r1
 8004d80:	6039      	str	r1, [r7, #0]
 8004d82:	4649      	mov	r1, r9
 8004d84:	414b      	adcs	r3, r1
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d94:	4659      	mov	r1, fp
 8004d96:	00cb      	lsls	r3, r1, #3
 8004d98:	4651      	mov	r1, sl
 8004d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9e:	4651      	mov	r1, sl
 8004da0:	00ca      	lsls	r2, r1, #3
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	4642      	mov	r2, r8
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dae:	464b      	mov	r3, r9
 8004db0:	460a      	mov	r2, r1
 8004db2:	eb42 0303 	adc.w	r3, r2, r3
 8004db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	008b      	lsls	r3, r1, #2
 8004dd4:	4641      	mov	r1, r8
 8004dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dda:	4641      	mov	r1, r8
 8004ddc:	008a      	lsls	r2, r1, #2
 8004dde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004de2:	f7fb fe1f 	bl	8000a24 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4b0d      	ldr	r3, [pc, #52]	@ (8004e20 <UART_SetConfig+0x4e4>)
 8004dec:	fba3 1302 	umull	r1, r3, r3, r2
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	2164      	movs	r1, #100	@ 0x64
 8004df4:	fb01 f303 	mul.w	r3, r1, r3
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	3332      	adds	r3, #50	@ 0x32
 8004dfe:	4a08      	ldr	r2, [pc, #32]	@ (8004e20 <UART_SetConfig+0x4e4>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	f003 020f 	and.w	r2, r3, #15
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4422      	add	r2, r4
 8004e12:	609a      	str	r2, [r3, #8]
}
 8004e14:	bf00      	nop
 8004e16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e20:	51eb851f 	.word	0x51eb851f

08004e24 <malloc>:
 8004e24:	4b02      	ldr	r3, [pc, #8]	@ (8004e30 <malloc+0xc>)
 8004e26:	4601      	mov	r1, r0
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	f000 b825 	b.w	8004e78 <_malloc_r>
 8004e2e:	bf00      	nop
 8004e30:	20000048 	.word	0x20000048

08004e34 <sbrk_aligned>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4e0f      	ldr	r6, [pc, #60]	@ (8004e74 <sbrk_aligned+0x40>)
 8004e38:	460c      	mov	r4, r1
 8004e3a:	6831      	ldr	r1, [r6, #0]
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	b911      	cbnz	r1, 8004e46 <sbrk_aligned+0x12>
 8004e40:	f000 f8ae 	bl	8004fa0 <_sbrk_r>
 8004e44:	6030      	str	r0, [r6, #0]
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 f8a9 	bl	8004fa0 <_sbrk_r>
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	d103      	bne.n	8004e5a <sbrk_aligned+0x26>
 8004e52:	f04f 34ff 	mov.w	r4, #4294967295
 8004e56:	4620      	mov	r0, r4
 8004e58:	bd70      	pop	{r4, r5, r6, pc}
 8004e5a:	1cc4      	adds	r4, r0, #3
 8004e5c:	f024 0403 	bic.w	r4, r4, #3
 8004e60:	42a0      	cmp	r0, r4
 8004e62:	d0f8      	beq.n	8004e56 <sbrk_aligned+0x22>
 8004e64:	1a21      	subs	r1, r4, r0
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 f89a 	bl	8004fa0 <_sbrk_r>
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d1f2      	bne.n	8004e56 <sbrk_aligned+0x22>
 8004e70:	e7ef      	b.n	8004e52 <sbrk_aligned+0x1e>
 8004e72:	bf00      	nop
 8004e74:	20000694 	.word	0x20000694

08004e78 <_malloc_r>:
 8004e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e7c:	1ccd      	adds	r5, r1, #3
 8004e7e:	f025 0503 	bic.w	r5, r5, #3
 8004e82:	3508      	adds	r5, #8
 8004e84:	2d0c      	cmp	r5, #12
 8004e86:	bf38      	it	cc
 8004e88:	250c      	movcc	r5, #12
 8004e8a:	2d00      	cmp	r5, #0
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	db01      	blt.n	8004e94 <_malloc_r+0x1c>
 8004e90:	42a9      	cmp	r1, r5
 8004e92:	d904      	bls.n	8004e9e <_malloc_r+0x26>
 8004e94:	230c      	movs	r3, #12
 8004e96:	6033      	str	r3, [r6, #0]
 8004e98:	2000      	movs	r0, #0
 8004e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f74 <_malloc_r+0xfc>
 8004ea2:	f000 f869 	bl	8004f78 <__malloc_lock>
 8004ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eaa:	461c      	mov	r4, r3
 8004eac:	bb44      	cbnz	r4, 8004f00 <_malloc_r+0x88>
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f7ff ffbf 	bl	8004e34 <sbrk_aligned>
 8004eb6:	1c43      	adds	r3, r0, #1
 8004eb8:	4604      	mov	r4, r0
 8004eba:	d158      	bne.n	8004f6e <_malloc_r+0xf6>
 8004ebc:	f8d8 4000 	ldr.w	r4, [r8]
 8004ec0:	4627      	mov	r7, r4
 8004ec2:	2f00      	cmp	r7, #0
 8004ec4:	d143      	bne.n	8004f4e <_malloc_r+0xd6>
 8004ec6:	2c00      	cmp	r4, #0
 8004ec8:	d04b      	beq.n	8004f62 <_malloc_r+0xea>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	4639      	mov	r1, r7
 8004ece:	4630      	mov	r0, r6
 8004ed0:	eb04 0903 	add.w	r9, r4, r3
 8004ed4:	f000 f864 	bl	8004fa0 <_sbrk_r>
 8004ed8:	4581      	cmp	r9, r0
 8004eda:	d142      	bne.n	8004f62 <_malloc_r+0xea>
 8004edc:	6821      	ldr	r1, [r4, #0]
 8004ede:	1a6d      	subs	r5, r5, r1
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	f7ff ffa6 	bl	8004e34 <sbrk_aligned>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d03a      	beq.n	8004f62 <_malloc_r+0xea>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	442b      	add	r3, r5
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	bb62      	cbnz	r2, 8004f54 <_malloc_r+0xdc>
 8004efa:	f8c8 7000 	str.w	r7, [r8]
 8004efe:	e00f      	b.n	8004f20 <_malloc_r+0xa8>
 8004f00:	6822      	ldr	r2, [r4, #0]
 8004f02:	1b52      	subs	r2, r2, r5
 8004f04:	d420      	bmi.n	8004f48 <_malloc_r+0xd0>
 8004f06:	2a0b      	cmp	r2, #11
 8004f08:	d917      	bls.n	8004f3a <_malloc_r+0xc2>
 8004f0a:	1961      	adds	r1, r4, r5
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	6025      	str	r5, [r4, #0]
 8004f10:	bf18      	it	ne
 8004f12:	6059      	strne	r1, [r3, #4]
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	bf08      	it	eq
 8004f18:	f8c8 1000 	streq.w	r1, [r8]
 8004f1c:	5162      	str	r2, [r4, r5]
 8004f1e:	604b      	str	r3, [r1, #4]
 8004f20:	4630      	mov	r0, r6
 8004f22:	f000 f82f 	bl	8004f84 <__malloc_unlock>
 8004f26:	f104 000b 	add.w	r0, r4, #11
 8004f2a:	1d23      	adds	r3, r4, #4
 8004f2c:	f020 0007 	bic.w	r0, r0, #7
 8004f30:	1ac2      	subs	r2, r0, r3
 8004f32:	bf1c      	itt	ne
 8004f34:	1a1b      	subne	r3, r3, r0
 8004f36:	50a3      	strne	r3, [r4, r2]
 8004f38:	e7af      	b.n	8004e9a <_malloc_r+0x22>
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	bf0c      	ite	eq
 8004f40:	f8c8 2000 	streq.w	r2, [r8]
 8004f44:	605a      	strne	r2, [r3, #4]
 8004f46:	e7eb      	b.n	8004f20 <_malloc_r+0xa8>
 8004f48:	4623      	mov	r3, r4
 8004f4a:	6864      	ldr	r4, [r4, #4]
 8004f4c:	e7ae      	b.n	8004eac <_malloc_r+0x34>
 8004f4e:	463c      	mov	r4, r7
 8004f50:	687f      	ldr	r7, [r7, #4]
 8004f52:	e7b6      	b.n	8004ec2 <_malloc_r+0x4a>
 8004f54:	461a      	mov	r2, r3
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	42a3      	cmp	r3, r4
 8004f5a:	d1fb      	bne.n	8004f54 <_malloc_r+0xdc>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6053      	str	r3, [r2, #4]
 8004f60:	e7de      	b.n	8004f20 <_malloc_r+0xa8>
 8004f62:	230c      	movs	r3, #12
 8004f64:	6033      	str	r3, [r6, #0]
 8004f66:	4630      	mov	r0, r6
 8004f68:	f000 f80c 	bl	8004f84 <__malloc_unlock>
 8004f6c:	e794      	b.n	8004e98 <_malloc_r+0x20>
 8004f6e:	6005      	str	r5, [r0, #0]
 8004f70:	e7d6      	b.n	8004f20 <_malloc_r+0xa8>
 8004f72:	bf00      	nop
 8004f74:	20000698 	.word	0x20000698

08004f78 <__malloc_lock>:
 8004f78:	4801      	ldr	r0, [pc, #4]	@ (8004f80 <__malloc_lock+0x8>)
 8004f7a:	f000 b84b 	b.w	8005014 <__retarget_lock_acquire_recursive>
 8004f7e:	bf00      	nop
 8004f80:	200007d8 	.word	0x200007d8

08004f84 <__malloc_unlock>:
 8004f84:	4801      	ldr	r0, [pc, #4]	@ (8004f8c <__malloc_unlock+0x8>)
 8004f86:	f000 b846 	b.w	8005016 <__retarget_lock_release_recursive>
 8004f8a:	bf00      	nop
 8004f8c:	200007d8 	.word	0x200007d8

08004f90 <memset>:
 8004f90:	4402      	add	r2, r0
 8004f92:	4603      	mov	r3, r0
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d100      	bne.n	8004f9a <memset+0xa>
 8004f98:	4770      	bx	lr
 8004f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9e:	e7f9      	b.n	8004f94 <memset+0x4>

08004fa0 <_sbrk_r>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	4d06      	ldr	r5, [pc, #24]	@ (8004fbc <_sbrk_r+0x1c>)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	4608      	mov	r0, r1
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	f7fd f8fa 	bl	80021a4 <_sbrk>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d102      	bne.n	8004fba <_sbrk_r+0x1a>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	b103      	cbz	r3, 8004fba <_sbrk_r+0x1a>
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	200007d4 	.word	0x200007d4

08004fc0 <__errno>:
 8004fc0:	4b01      	ldr	r3, [pc, #4]	@ (8004fc8 <__errno+0x8>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20000048 	.word	0x20000048

08004fcc <__libc_init_array>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	4d0d      	ldr	r5, [pc, #52]	@ (8005004 <__libc_init_array+0x38>)
 8004fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005008 <__libc_init_array+0x3c>)
 8004fd2:	1b64      	subs	r4, r4, r5
 8004fd4:	10a4      	asrs	r4, r4, #2
 8004fd6:	2600      	movs	r6, #0
 8004fd8:	42a6      	cmp	r6, r4
 8004fda:	d109      	bne.n	8004ff0 <__libc_init_array+0x24>
 8004fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800500c <__libc_init_array+0x40>)
 8004fde:	4c0c      	ldr	r4, [pc, #48]	@ (8005010 <__libc_init_array+0x44>)
 8004fe0:	f000 f81a 	bl	8005018 <_init>
 8004fe4:	1b64      	subs	r4, r4, r5
 8004fe6:	10a4      	asrs	r4, r4, #2
 8004fe8:	2600      	movs	r6, #0
 8004fea:	42a6      	cmp	r6, r4
 8004fec:	d105      	bne.n	8004ffa <__libc_init_array+0x2e>
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff4:	4798      	blx	r3
 8004ff6:	3601      	adds	r6, #1
 8004ff8:	e7ee      	b.n	8004fd8 <__libc_init_array+0xc>
 8004ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffe:	4798      	blx	r3
 8005000:	3601      	adds	r6, #1
 8005002:	e7f2      	b.n	8004fea <__libc_init_array+0x1e>
 8005004:	08005268 	.word	0x08005268
 8005008:	08005268 	.word	0x08005268
 800500c:	08005268 	.word	0x08005268
 8005010:	0800526c 	.word	0x0800526c

08005014 <__retarget_lock_acquire_recursive>:
 8005014:	4770      	bx	lr

08005016 <__retarget_lock_release_recursive>:
 8005016:	4770      	bx	lr

08005018 <_init>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	bf00      	nop
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr

08005024 <_fini>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	bf00      	nop
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr
