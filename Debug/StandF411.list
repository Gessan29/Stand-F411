
StandF411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005530  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  080056d0  080056d0  000066d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a60  08005a60  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a68  08005a68  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a68  08005a68  00006a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a6c  08005a6c  00006a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005a70  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  200001d8  08005c44  000071d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  08005c44  00007804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c073  00000000  00000000  00007204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217a  00000000  00000000  00013277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000477c  00000000  00000000  000153f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  00019b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d4  00000000  00000000  0001a338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177a3  00000000  00000000  0001ac0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dee8  00000000  00000000  000323af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093595  00000000  00000000  00040297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d382c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025f0  00000000  00000000  000d3870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000d5e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056b8 	.word	0x080056b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080056b8 	.word	0x080056b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <ADC_IN0_Voltage>:


uint16_t adcSamples[100];
char chel [701];// массив для хранения 100 точек напряжения аналоговово сигнала с генератора.

void ADC_IN0_Voltage (){
 8000f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	  HAL_ADC_Start(&hadc1);
 8000f4c:	4834      	ldr	r0, [pc, #208]	@ (8001020 <ADC_IN0_Voltage+0xd8>)
 8000f4e:	4d35      	ldr	r5, [pc, #212]	@ (8001024 <ADC_IN0_Voltage+0xdc>)
	for (int i = 0; i < 100; i++){
	//HAL_ADC_PollForConversion (&hadc1, HAL_MAX_DELAY);
		  SET_BIT(GPIOC ->BSRR, GPIO_BSRR_BS14);
 8000f50:	4e35      	ldr	r6, [pc, #212]	@ (8001028 <ADC_IN0_Voltage+0xe0>)
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8000f52:	4c36      	ldr	r4, [pc, #216]	@ (800102c <ADC_IN0_Voltage+0xe4>)
		  while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {}
		  LL_ADC_ClearFlag_EOCS(ADC1);
			SET_BIT(GPIOC ->BSRR, GPIO_BSRR_BR14);
		  adcSamples[i] = HAL_ADC_GetValue (&hadc1);
 8000f54:	4f32      	ldr	r7, [pc, #200]	@ (8001020 <ADC_IN0_Voltage+0xd8>)
void ADC_IN0_Voltage (){
 8000f56:	b081      	sub	sp, #4
	  HAL_ADC_Start(&hadc1);
 8000f58:	f000 fc54 	bl	8001804 <HAL_ADC_Start>
	for (int i = 0; i < 100; i++){
 8000f5c:	f105 09c8 	add.w	r9, r5, #200	@ 0xc8
	  HAL_ADC_Start(&hadc1);
 8000f60:	46a8      	mov	r8, r5
		  SET_BIT(GPIOC ->BSRR, GPIO_BSRR_BS14);
 8000f62:	69b3      	ldr	r3, [r6, #24]
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f68:	61b3      	str	r3, [r6, #24]
 8000f6a:	6823      	ldr	r3, [r4, #0]
		  while(!LL_ADC_IsActiveFlag_EOCS(ADC1)) {}
 8000f6c:	079b      	lsls	r3, r3, #30
 8000f6e:	d5fc      	bpl.n	8000f6a <ADC_IN0_Voltage+0x22>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOCS(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8000f70:	f06f 0302 	mvn.w	r3, #2
 8000f74:	6023      	str	r3, [r4, #0]
			SET_BIT(GPIOC ->BSRR, GPIO_BSRR_BR14);
 8000f76:	69b3      	ldr	r3, [r6, #24]
 8000f78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
		  adcSamples[i] = HAL_ADC_GetValue (&hadc1);
 8000f7c:	4638      	mov	r0, r7
			SET_BIT(GPIOC ->BSRR, GPIO_BSRR_BR14);
 8000f7e:	61b3      	str	r3, [r6, #24]
		  adcSamples[i] = HAL_ADC_GetValue (&hadc1);
 8000f80:	f000 fccc 	bl	800191c <HAL_ADC_GetValue>
 8000f84:	f828 0f02 	strh.w	r0, [r8, #2]!
	for (int i = 0; i < 100; i++){
 8000f88:	45c8      	cmp	r8, r9
 8000f8a:	d1ea      	bne.n	8000f62 <ADC_IN0_Voltage+0x1a>
	}
	  HAL_ADC_Stop(&hadc1);
 8000f8c:	4824      	ldr	r0, [pc, #144]	@ (8001020 <ADC_IN0_Voltage+0xd8>)
 8000f8e:	4c28      	ldr	r4, [pc, #160]	@ (8001030 <ADC_IN0_Voltage+0xe8>)
 8000f90:	f8df b0a8 	ldr.w	fp, [pc, #168]	@ 800103c <ADC_IN0_Voltage+0xf4>
 8000f94:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8001034 <ADC_IN0_Voltage+0xec>
	for (int i = 0; i < 100; i++){
		    		  voltage = adcSamples[i] * 3.3 / 4095;
		    		  sprintf(msg, "%.3f\r\n", voltage );
 8000f98:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 8001040 <ADC_IN0_Voltage+0xf8>
	  HAL_ADC_Stop(&hadc1);
 8000f9c:	f000 fca2 	bl	80018e4 <HAL_ADC_Stop>
		    		  voltage = adcSamples[i] * 3.3 / 4095;
 8000fa0:	a71b      	add	r7, pc, #108	@ (adr r7, 8001010 <ADC_IN0_Voltage+0xc8>)
 8000fa2:	e9d7 6700 	ldrd	r6, r7, [r7]
 8000fa6:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 8000faa:	f7ff fac3 	bl	8000534 <__aeabi_i2d>
 8000fae:	4632      	mov	r2, r6
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	f7ff fb29 	bl	8000608 <__aeabi_dmul>
 8000fb6:	a318      	add	r3, pc, #96	@ (adr r3, 8001018 <ADC_IN0_Voltage+0xd0>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f7ff fc4e 	bl	800085c <__aeabi_ddiv>
 8000fc0:	f7ff fdfa 	bl	8000bb8 <__aeabi_d2f>
 8000fc4:	f8cb 0000 	str.w	r0, [fp]
		    		  sprintf(msg, "%.3f\r\n", voltage );
 8000fc8:	f7ff fac6 	bl	8000558 <__aeabi_f2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4818      	ldr	r0, [pc, #96]	@ (8001034 <ADC_IN0_Voltage+0xec>)
 8000fd2:	4651      	mov	r1, sl
 8000fd4:	f002 fa42 	bl	800345c <siprintf>
		    		  memcpy(&chel[i * 7], msg, 7);
 8000fd8:	f8d8 0000 	ldr.w	r0, [r8]
 8000fdc:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8000fe0:	f898 3006 	ldrb.w	r3, [r8, #6]
 8000fe4:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 100; i++){
 8000fe6:	454d      	cmp	r5, r9
		    		  memcpy(&chel[i * 7], msg, 7);
 8000fe8:	80a2      	strh	r2, [r4, #4]
 8000fea:	71a3      	strb	r3, [r4, #6]
	for (int i = 0; i < 100; i++){
 8000fec:	f104 0407 	add.w	r4, r4, #7
 8000ff0:	d1d9      	bne.n	8000fa6 <ADC_IN0_Voltage+0x5e>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)chel, strlen(chel), HAL_MAX_DELAY);
 8000ff2:	480f      	ldr	r0, [pc, #60]	@ (8001030 <ADC_IN0_Voltage+0xe8>)
 8000ff4:	f7ff f944 	bl	8000280 <strlen>
 8000ff8:	490d      	ldr	r1, [pc, #52]	@ (8001030 <ADC_IN0_Voltage+0xe8>)
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	480e      	ldr	r0, [pc, #56]	@ (8001038 <ADC_IN0_Voltage+0xf0>)
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	b292      	uxth	r2, r2
}
 8001004:	b001      	add	sp, #4
 8001006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_UART_Transmit(&huart1, (uint8_t*)chel, strlen(chel), HAL_MAX_DELAY);
 800100a:	f001 baa9 	b.w	8002560 <HAL_UART_Transmit>
 800100e:	bf00      	nop
 8001010:	66666666 	.word	0x66666666
 8001014:	400a6666 	.word	0x400a6666
 8001018:	00000000 	.word	0x00000000
 800101c:	40affe00 	.word	0x40affe00
 8001020:	20000668 	.word	0x20000668
 8001024:	200004b2 	.word	0x200004b2
 8001028:	40020800 	.word	0x40020800
 800102c:	40012000 	.word	0x40012000
 8001030:	200001f4 	.word	0x200001f4
 8001034:	20000580 	.word	0x20000580
 8001038:	20000620 	.word	0x20000620
 800103c:	20000588 	.word	0x20000588
 8001040:	080056d0 	.word	0x080056d0

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	2300      	movs	r3, #0
{
 8001048:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 800104e:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001052:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001056:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4920      	ldr	r1, [pc, #128]	@ (80010dc <SystemClock_Config+0x98>)
 800105c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105e:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001068:	6408      	str	r0, [r1, #64]	@ 0x40
 800106a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800106c:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001070:	9101      	str	r1, [sp, #4]
 8001072:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001080:	2001      	movs	r0, #1
 8001082:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001086:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001090:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001094:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001096:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109a:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 144;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800109c:	2104      	movs	r1, #4
 800109e:	2002      	movs	r0, #2
 80010a0:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010a4:	2219      	movs	r2, #25
  RCC_OscInitStruct.PLL.PLLN = 144;
 80010a6:	2390      	movs	r3, #144	@ 0x90
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010aa:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80010ac:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f000 febb 	bl	8001e28 <HAL_RCC_OscConfig>
 80010b2:	b108      	cbz	r0, 80010b8 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b8:	210f      	movs	r1, #15
 80010ba:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010bc:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c4:	a803      	add	r0, sp, #12
 80010c6:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c8:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ce:	f001 f8c1 	bl	8002254 <HAL_RCC_ClockConfig>
 80010d2:	b108      	cbz	r0, 80010d8 <SystemClock_Config+0x94>
 80010d4:	b672      	cpsid	i
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <SystemClock_Config+0x92>
}
 80010d8:	b014      	add	sp, #80	@ 0x50
 80010da:	bd10      	pop	{r4, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40007000 	.word	0x40007000

080010e4 <main>:
{
 80010e4:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	2400      	movs	r4, #0
{
 80010e8:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 80010ea:	f000 faa1 	bl	8001630 <HAL_Init>
  SystemClock_Config();
 80010ee:	f7ff ffa9 	bl	8001044 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80010f6:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001270 <main+0x18c>)
 80010fc:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001100:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001102:	485c      	ldr	r0, [pc, #368]	@ (8001274 <main+0x190>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	f042 0204 	orr.w	r2, r2, #4
 8001108:	631a      	str	r2, [r3, #48]	@ 0x30
 800110a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800110c:	f002 0204 	and.w	r2, r2, #4
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001114:	9401      	str	r4, [sp, #4]
 8001116:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001118:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800111c:	631a      	str	r2, [r3, #48]	@ 0x30
 800111e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001120:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001124:	9201      	str	r2, [sp, #4]
 8001126:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	9402      	str	r4, [sp, #8]
 800112a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800112c:	f042 0201 	orr.w	r2, r2, #1
 8001130:	631a      	str	r2, [r3, #48]	@ 0x30
 8001132:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001134:	f002 0201 	and.w	r2, r2, #1
 8001138:	9202      	str	r2, [sp, #8]
 800113a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	9403      	str	r4, [sp, #12]
 800113e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001140:	f042 0202 	orr.w	r2, r2, #2
 8001144:	631a      	str	r2, [r3, #48]	@ 0x30
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800114c:	4622      	mov	r2, r4
 800114e:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	9303      	str	r3, [sp, #12]
 8001154:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001156:	f000 fe63 	bl	8001e20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800115a:	4622      	mov	r2, r4
 800115c:	4846      	ldr	r0, [pc, #280]	@ (8001278 <main+0x194>)
 800115e:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
 8001162:	f000 fe5d 	bl	8001e20 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001168:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116c:	4841      	ldr	r0, [pc, #260]	@ (8001274 <main+0x190>)
 800116e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	f000 fd5c 	bl	8001c34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800117c:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	483d      	ldr	r0, [pc, #244]	@ (8001278 <main+0x194>)
 8001182:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f000 fd52 	bl	8001c34 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8001190:	483a      	ldr	r0, [pc, #232]	@ (800127c <main+0x198>)
  huart1.Init.BaudRate = 115200;
 8001192:	4b3b      	ldr	r3, [pc, #236]	@ (8001280 <main+0x19c>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8001194:	6104      	str	r4, [r0, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001196:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800119a:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart1.Init.BaudRate = 115200;
 800119e:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a2:	240c      	movs	r4, #12
  huart1.Init.BaudRate = 115200;
 80011a4:	e9c0 3600 	strd	r3, r6, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a8:	6144      	str	r4, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011aa:	f001 f9a7 	bl	80024fc <HAL_UART_Init>
 80011ae:	b108      	cbz	r0, 80011b4 <main+0xd0>
 80011b0:	b672      	cpsid	i
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <main+0xce>
  huart2.Instance = USART2;
 80011b4:	4603      	mov	r3, r0
 80011b6:	4833      	ldr	r0, [pc, #204]	@ (8001284 <main+0x1a0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b8:	e9c0 6301 	strd	r6, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c0:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	61c3      	str	r3, [r0, #28]
  huart2.Instance = USART2;
 80011c6:	4b30      	ldr	r3, [pc, #192]	@ (8001288 <main+0x1a4>)
 80011c8:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ca:	f001 f997 	bl	80024fc <HAL_UART_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b108      	cbz	r0, 80011d6 <main+0xf2>
 80011d2:	b672      	cpsid	i
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <main+0xf0>
  huart6.Instance = USART6;
 80011d6:	482d      	ldr	r0, [pc, #180]	@ (800128c <main+0x1a8>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011d8:	e9c0 6301 	strd	r6, r3, [r0, #4]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011e0:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	61c3      	str	r3, [r0, #28]
  huart6.Instance = USART6;
 80011e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <main+0x1ac>)
 80011e8:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011ea:	f001 f987 	bl	80024fc <HAL_UART_Init>
 80011ee:	b9e8      	cbnz	r0, 800122c <main+0x148>
  hadc1.Instance = ADC1;
 80011f0:	4c28      	ldr	r4, [pc, #160]	@ (8001294 <main+0x1b0>)
 80011f2:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <main+0x1b4>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f4:	4a29      	ldr	r2, [pc, #164]	@ (800129c <main+0x1b8>)
  hadc1.Instance = ADC1;
 80011f6:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011fc:	e9c4 3001 	strd	r3, r0, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001200:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8001204:	e9cd 0006 	strd	r0, r0, [sp, #24]
  hadc1.Init.ScanConvMode = DISABLE;
 8001208:	6120      	str	r0, [r4, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800120a:	f884 0020 	strb.w	r0, [r4, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120e:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001210:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001214:	6160      	str	r0, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001216:	2300      	movs	r3, #0
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001218:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800121a:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
  hadc1.Init.ContinuousConvMode = ENABLE;
 800121e:	7625      	strb	r5, [r4, #24]
  hadc1.Init.NbrOfConversion = 1;
 8001220:	61e5      	str	r5, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001222:	f000 fa43 	bl	80016ac <HAL_ADC_Init>
 8001226:	b118      	cbz	r0, 8001230 <main+0x14c>
 8001228:	b672      	cpsid	i
  while (1)
 800122a:	e7fe      	b.n	800122a <main+0x146>
 800122c:	b672      	cpsid	i
 800122e:	e7fe      	b.n	800122e <main+0x14a>
  sConfig.Channel = ADC_CHANNEL_0;
 8001230:	2200      	movs	r2, #0
 8001232:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	a904      	add	r1, sp, #16
 8001236:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 8001238:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800123c:	9506      	str	r5, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	f000 fb71 	bl	8001924 <HAL_ADC_ConfigChannel>
 8001242:	b108      	cbz	r0, 8001248 <main+0x164>
 8001244:	b672      	cpsid	i
  while (1)
 8001246:	e7fe      	b.n	8001246 <main+0x162>
 8001248:	4c15      	ldr	r4, [pc, #84]	@ (80012a0 <main+0x1bc>)
	    		  for ( ADC_counter; ADC_counter < 1; ADC_counter++){
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	2b00      	cmp	r3, #0
	    		  HAL_Delay(1000);
 800124e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
	    		  for ( ADC_counter; ADC_counter < 1; ADC_counter++){
 8001252:	dc09      	bgt.n	8001268 <main+0x184>
	    			  ADC_IN0_Voltage();
 8001254:	f7ff fe78 	bl	8000f48 <ADC_IN0_Voltage>
	    		  for ( ADC_counter; ADC_counter < 1; ADC_counter++){
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	6023      	str	r3, [r4, #0]
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	2b00      	cmp	r3, #0
	    		  HAL_Delay(1000);
 8001262:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
	    		  for ( ADC_counter; ADC_counter < 1; ADC_counter++){
 8001266:	ddf5      	ble.n	8001254 <main+0x170>
	    		  HAL_Delay(1000);
 8001268:	f000 fa0e 	bl	8001688 <HAL_Delay>
	    		  for ( ADC_counter; ADC_counter < 1; ADC_counter++){
 800126c:	e7ed      	b.n	800124a <main+0x166>
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40020800 	.word	0x40020800
 8001278:	40020400 	.word	0x40020400
 800127c:	20000620 	.word	0x20000620
 8001280:	40011000 	.word	0x40011000
 8001284:	200005d8 	.word	0x200005d8
 8001288:	40004400 	.word	0x40004400
 800128c:	20000590 	.word	0x20000590
 8001290:	40011400 	.word	0x40011400
 8001294:	20000668 	.word	0x20000668
 8001298:	40012000 	.word	0x40012000
 800129c:	0f000001 	.word	0x0f000001
 80012a0:	2000057c 	.word	0x2000057c

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <HAL_MspInit+0x34>)
 80012a8:	2100      	movs	r1, #0
 80012aa:	9100      	str	r1, [sp, #0]
 80012ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80012b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012b6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80012ba:	9200      	str	r2, [sp, #0]
 80012bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	9101      	str	r1, [sp, #4]
 80012c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012c2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d2:	b002      	add	sp, #8
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	00000000 	.word	0x00000000

080012e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80012e2:	4a19      	ldr	r2, [pc, #100]	@ (8001348 <HAL_ADC_MspInit+0x68>)
 80012e4:	6801      	ldr	r1, [r0, #0]
{
 80012e6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80012ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80012f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80012f4:	9306      	str	r3, [sp, #24]
  if(hadc->Instance==ADC1)
 80012f6:	d002      	beq.n	80012fe <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012f8:	b009      	add	sp, #36	@ 0x24
 80012fa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012fe:	f502 328c 	add.w	r2, r2, #71680	@ 0x11800
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 8001306:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 800130a:	6450      	str	r0, [r2, #68]	@ 0x44
 800130c:	6c50      	ldr	r0, [r2, #68]	@ 0x44
 800130e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8001312:	9000      	str	r0, [sp, #0]
 8001314:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	480c      	ldr	r0, [pc, #48]	@ (800134c <HAL_ADC_MspInit+0x6c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001324:	ed9f 7b06 	vldr	d7, [pc, #24]	@ 8001340 <HAL_ADC_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001330:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f000 fc7d 	bl	8001c34 <HAL_GPIO_Init>
}
 800133a:	b009      	add	sp, #36	@ 0x24
 800133c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001340:	000000f3 	.word	0x000000f3
 8001344:	00000003 	.word	0x00000003
 8001348:	40012000 	.word	0x40012000
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8001352:	6803      	ldr	r3, [r0, #0]
 8001354:	4a48      	ldr	r2, [pc, #288]	@ (8001478 <HAL_UART_MspInit+0x128>)
{
 8001356:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 800135a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001360:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001364:	940a      	str	r4, [sp, #40]	@ 0x28
  if(huart->Instance==USART1)
 8001366:	d007      	beq.n	8001378 <HAL_UART_MspInit+0x28>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8001368:	4a44      	ldr	r2, [pc, #272]	@ (800147c <HAL_UART_MspInit+0x12c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d030      	beq.n	80013d0 <HAL_UART_MspInit+0x80>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 800136e:	4a44      	ldr	r2, [pc, #272]	@ (8001480 <HAL_UART_MspInit+0x130>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d058      	beq.n	8001426 <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001374:	b00d      	add	sp, #52	@ 0x34
 8001376:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001378:	4b42      	ldr	r3, [pc, #264]	@ (8001484 <HAL_UART_MspInit+0x134>)
 800137a:	9400      	str	r4, [sp, #0]
 800137c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	4842      	ldr	r0, [pc, #264]	@ (8001488 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001380:	f042 0210 	orr.w	r2, r2, #16
 8001384:	645a      	str	r2, [r3, #68]	@ 0x44
 8001386:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001388:	f002 0210 	and.w	r2, r2, #16
 800138c:	9200      	str	r2, [sp, #0]
 800138e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	9401      	str	r4, [sp, #4]
 8001392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001394:	f042 0201 	orr.w	r2, r2, #1
 8001398:	631a      	str	r2, [r3, #48]	@ 0x30
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013a2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80013a6:	2302      	movs	r3, #2
 80013a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2307      	movs	r3, #7
 80013b0:	2203      	movs	r2, #3
 80013b2:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f000 fc3c 	bl	8001c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013bc:	4622      	mov	r2, r4
 80013be:	4621      	mov	r1, r4
 80013c0:	2025      	movs	r0, #37	@ 0x25
 80013c2:	f000 fb77 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013c6:	2025      	movs	r0, #37	@ 0x25
 80013c8:	f000 fbb0 	bl	8001b2c <HAL_NVIC_EnableIRQ>
}
 80013cc:	b00d      	add	sp, #52	@ 0x34
 80013ce:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <HAL_UART_MspInit+0x134>)
 80013d2:	9402      	str	r4, [sp, #8]
 80013d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	482c      	ldr	r0, [pc, #176]	@ (8001488 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80013dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80013de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013e0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80013e4:	9202      	str	r2, [sp, #8]
 80013e6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	9403      	str	r4, [sp, #12]
 80013ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ec:	f042 0201 	orr.w	r2, r2, #1
 80013f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013fa:	220c      	movs	r2, #12
 80013fc:	2302      	movs	r3, #2
 80013fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2307      	movs	r3, #7
 8001406:	2203      	movs	r2, #3
 8001408:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f000 fc11 	bl	8001c34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001412:	4622      	mov	r2, r4
 8001414:	4621      	mov	r1, r4
 8001416:	2026      	movs	r0, #38	@ 0x26
 8001418:	f000 fb4c 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800141c:	2026      	movs	r0, #38	@ 0x26
 800141e:	f000 fb85 	bl	8001b2c <HAL_NVIC_EnableIRQ>
}
 8001422:	b00d      	add	sp, #52	@ 0x34
 8001424:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART6_CLK_ENABLE();
 8001426:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <HAL_UART_MspInit+0x134>)
 8001428:	9404      	str	r4, [sp, #16]
 800142a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	4816      	ldr	r0, [pc, #88]	@ (8001488 <HAL_UART_MspInit+0x138>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800142e:	f042 0220 	orr.w	r2, r2, #32
 8001432:	645a      	str	r2, [r3, #68]	@ 0x44
 8001434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001436:	f002 0220 	and.w	r2, r2, #32
 800143a:	9204      	str	r2, [sp, #16]
 800143c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	9405      	str	r4, [sp, #20]
 8001440:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001442:	f042 0201 	orr.w	r2, r2, #1
 8001446:	631a      	str	r2, [r3, #48]	@ 0x30
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800144a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8001470 <HAL_UART_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2203      	movs	r2, #3
 8001456:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800145a:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	9c05      	ldr	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f000 fbe6 	bl	8001c34 <HAL_GPIO_Init>
}
 8001468:	b00d      	add	sp, #52	@ 0x34
 800146a:	bd30      	pop	{r4, r5, pc}
 800146c:	f3af 8000 	nop.w
 8001470:	00001800 	.word	0x00001800
 8001474:	00000002 	.word	0x00000002
 8001478:	40011000 	.word	0x40011000
 800147c:	40004400 	.word	0x40004400
 8001480:	40011400 	.word	0x40011400
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800148c:	e7fe      	b.n	800148c <NMI_Handler>
 800148e:	bf00      	nop

08001490 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <HardFault_Handler>
 8001492:	bf00      	nop

08001494 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler>
 8001496:	bf00      	nop

08001498 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <BusFault_Handler>
 800149a:	bf00      	nop

0800149c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler>
 800149e:	bf00      	nop

080014a0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop

080014ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ac:	f000 b8da 	b.w	8001664 <HAL_IncTick>

080014b0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014b0:	4801      	ldr	r0, [pc, #4]	@ (80014b8 <USART1_IRQHandler+0x8>)
 80014b2:	f001 b933 	b.w	800271c <HAL_UART_IRQHandler>
 80014b6:	bf00      	nop
 80014b8:	20000620 	.word	0x20000620

080014bc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014bc:	4801      	ldr	r0, [pc, #4]	@ (80014c4 <USART2_IRQHandler+0x8>)
 80014be:	f001 b92d 	b.w	800271c <HAL_UART_IRQHandler>
 80014c2:	bf00      	nop
 80014c4:	200005d8 	.word	0x200005d8

080014c8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80014c8:	2001      	movs	r0, #1
 80014ca:	4770      	bx	lr

080014cc <_kill>:

int _kill(int pid, int sig)
{
 80014cc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014ce:	f002 f87b 	bl	80035c8 <__errno>
 80014d2:	2316      	movs	r3, #22
 80014d4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80014d6:	f04f 30ff 	mov.w	r0, #4294967295
 80014da:	bd08      	pop	{r3, pc}

080014dc <_exit>:

void _exit (int status)
{
 80014dc:	b508      	push	{r3, lr}
  errno = EINVAL;
 80014de:	f002 f873 	bl	80035c8 <__errno>
 80014e2:	2316      	movs	r3, #22
 80014e4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80014e6:	e7fe      	b.n	80014e6 <_exit+0xa>

080014e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	1e16      	subs	r6, r2, #0
 80014ec:	dd07      	ble.n	80014fe <_read+0x16>
 80014ee:	460c      	mov	r4, r1
 80014f0:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	42a5      	cmp	r5, r4
 80014fc:	d1f9      	bne.n	80014f2 <_read+0xa>
  }

  return len;
}
 80014fe:	4630      	mov	r0, r6
 8001500:	bd70      	pop	{r4, r5, r6, pc}
 8001502:	bf00      	nop

08001504 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001504:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	1e16      	subs	r6, r2, #0
 8001508:	dd07      	ble.n	800151a <_write+0x16>
 800150a:	460c      	mov	r4, r1
 800150c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800150e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001512:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	42a5      	cmp	r5, r4
 8001518:	d1f9      	bne.n	800150e <_write+0xa>
  }
  return len;
}
 800151a:	4630      	mov	r0, r6
 800151c:	bd70      	pop	{r4, r5, r6, pc}
 800151e:	bf00      	nop

08001520 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop

08001528 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001528:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800152c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800152e:	2000      	movs	r0, #0
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001534:	2001      	movs	r0, #1
 8001536:	4770      	bx	lr

08001538 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001538:	2000      	movs	r0, #0
 800153a:	4770      	bx	lr

0800153c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	490c      	ldr	r1, [pc, #48]	@ (8001570 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153e:	4a0d      	ldr	r2, [pc, #52]	@ (8001574 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001540:	680b      	ldr	r3, [r1, #0]
{
 8001542:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001544:	4c0c      	ldr	r4, [pc, #48]	@ (8001578 <_sbrk+0x3c>)
 8001546:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001548:	b12b      	cbz	r3, 8001556 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4418      	add	r0, r3
 800154c:	4290      	cmp	r0, r2
 800154e:	d807      	bhi.n	8001560 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001550:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <_sbrk+0x40>)
 8001558:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800155a:	4418      	add	r0, r3
 800155c:	4290      	cmp	r0, r2
 800155e:	d9f7      	bls.n	8001550 <_sbrk+0x14>
    errno = ENOMEM;
 8001560:	f002 f832 	bl	80035c8 <__errno>
 8001564:	230c      	movs	r3, #12
 8001566:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd10      	pop	{r4, pc}
 8001570:	200006b0 	.word	0x200006b0
 8001574:	20020000 	.word	0x20020000
 8001578:	00000400 	.word	0x00000400
 800157c:	20000808 	.word	0x20000808

08001580 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4a03      	ldr	r2, [pc, #12]	@ (8001590 <SystemInit+0x10>)
 8001582:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001586:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800158a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001598:	f7ff fff2 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800159c:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159e:	490d      	ldr	r1, [pc, #52]	@ (80015d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a0:	4a0d      	ldr	r2, [pc, #52]	@ (80015d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b4:	4c0a      	ldr	r4, [pc, #40]	@ (80015e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c2:	f002 f807 	bl	80035d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c6:	f7ff fd8d 	bl	80010e4 <main>
  bx  lr    
 80015ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015d8:	08005a70 	.word	0x08005a70
  ldr r2, =_sbss
 80015dc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80015e0:	20000804 	.word	0x20000804

080015e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC_IRQHandler>
	...

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <HAL_InitTick+0x3c>)
 80015ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <HAL_InitTick+0x40>)
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
{
 80015f2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015f8:	fbb0 f0f2 	udiv	r0, r0, r2
 80015fc:	fbb3 f0f0 	udiv	r0, r3, r0
 8001600:	f000 faa2 	bl	8001b48 <HAL_SYSTICK_Config>
 8001604:	b908      	cbnz	r0, 800160a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	2d0f      	cmp	r5, #15
 8001608:	d901      	bls.n	800160e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800160a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800160c:	bd38      	pop	{r3, r4, r5, pc}
 800160e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	4602      	mov	r2, r0
 8001612:	4629      	mov	r1, r5
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 fa4c 	bl	8001ab4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <HAL_InitTick+0x44>)
 800161e:	4620      	mov	r0, r4
 8001620:	601d      	str	r5, [r3, #0]
}
 8001622:	bd38      	pop	{r3, r4, r5, pc}
 8001624:	20000004 	.word	0x20000004
 8001628:	20000000 	.word	0x20000000
 800162c:	20000008 	.word	0x20000008

08001630 <HAL_Init>:
{
 8001630:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <HAL_Init+0x30>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800163a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001642:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800164a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 fa1f 	bl	8001a90 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	200f      	movs	r0, #15
 8001654:	f7ff ffc8 	bl	80015e8 <HAL_InitTick>
  HAL_MspInit();
 8001658:	f7ff fe24 	bl	80012a4 <HAL_MspInit>
}
 800165c:	2000      	movs	r0, #0
 800165e:	bd08      	pop	{r3, pc}
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001664:	4a03      	ldr	r2, [pc, #12]	@ (8001674 <HAL_IncTick+0x10>)
 8001666:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <HAL_IncTick+0x14>)
 8001668:	6811      	ldr	r1, [r2, #0]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	440b      	add	r3, r1
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200006b4 	.word	0x200006b4
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800167c:	4b01      	ldr	r3, [pc, #4]	@ (8001684 <HAL_GetTick+0x8>)
 800167e:	6818      	ldr	r0, [r3, #0]
}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200006b4 	.word	0x200006b4

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b538      	push	{r3, r4, r5, lr}
 800168a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff fff6 	bl	800167c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001690:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001692:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001694:	d002      	beq.n	800169c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <HAL_Delay+0x20>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800169c:	f7ff ffee 	bl	800167c <HAL_GetTick>
 80016a0:	1b40      	subs	r0, r0, r5
 80016a2:	42a0      	cmp	r0, r4
 80016a4:	d3fa      	bcc.n	800169c <HAL_Delay+0x14>
  {
  }
}
 80016a6:	bd38      	pop	{r3, r4, r5, pc}
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 80016ac:	2800      	cmp	r0, #0
 80016ae:	f000 809e 	beq.w	80017ee <HAL_ADC_Init+0x142>
{
 80016b2:	b538      	push	{r3, r4, r5, lr}
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b4:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80016b6:	4604      	mov	r4, r0
 80016b8:	b13d      	cbz	r5, 80016ca <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016bc:	06db      	lsls	r3, r3, #27
 80016be:	d50c      	bpl.n	80016da <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016c0:	2300      	movs	r3, #0
 80016c2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    tmp_hal_status = HAL_ERROR;
 80016c6:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 80016c8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80016ca:	f7ff fe09 	bl	80012e0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80016ce:	6465      	str	r5, [r4, #68]	@ 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    hadc->Lock = HAL_UNLOCKED;
 80016d2:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016d6:	06db      	lsls	r3, r3, #27
 80016d8:	d4f2      	bmi.n	80016c0 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 80016da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016dc:	4a47      	ldr	r2, [pc, #284]	@ (80017fc <HAL_ADC_Init+0x150>)
    ADC_STATE_CLR_SET(hadc->State,
 80016de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016e2:	f023 0302 	bic.w	r3, r3, #2
 80016e6:	f043 0302 	orr.w	r3, r3, #2
 80016ea:	6423      	str	r3, [r4, #64]	@ 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016ec:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ee:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016f0:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 80016f4:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016f6:	6851      	ldr	r1, [r2, #4]
 80016f8:	6860      	ldr	r0, [r4, #4]
 80016fa:	4301      	orrs	r1, r0
 80016fc:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016fe:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001700:	6920      	ldr	r0, [r4, #16]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001702:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001704:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001710:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001712:	685a      	ldr	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001714:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001716:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800171a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001722:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001724:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001726:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800172a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	4302      	orrs	r2, r0
 8001730:	609a      	str	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001732:	4a33      	ldr	r2, [pc, #204]	@ (8001800 <HAL_ADC_Init+0x154>)
 8001734:	4291      	cmp	r1, r2
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001736:	689a      	ldr	r2, [r3, #8]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001738:	d051      	beq.n	80017de <HAL_ADC_Init+0x132>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800173a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800173e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	4311      	orrs	r1, r2
 8001746:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800174e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	4302      	orrs	r2, r0
 8001754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	f022 0202 	bic.w	r2, r2, #2
 800175c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	7e21      	ldrb	r1, [r4, #24]
 8001762:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001766:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001768:	f894 2020 	ldrb.w	r2, [r4, #32]
 800176c:	2a00      	cmp	r2, #0
 800176e:	d040      	beq.n	80017f2 <HAL_ADC_Init+0x146>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001770:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001772:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001774:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001778:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001780:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	3901      	subs	r1, #1
 8001786:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800178a:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800178c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800178e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001790:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001794:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001798:	3901      	subs	r1, #1
 800179a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800179e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017a0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017a2:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 80017b0:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 80017b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017be:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80017c0:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017c2:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80017c6:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80017c8:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80017ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017cc:	f023 0303 	bic.w	r3, r3, #3
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 80017d6:	2300      	movs	r3, #0
 80017d8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80017dc:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	e7b3      	b.n	8001756 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 80017ee:	2001      	movs	r0, #1
}
 80017f0:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	e7c7      	b.n	800178c <HAL_ADC_Init+0xe0>
 80017fc:	40012300 	.word	0x40012300
 8001800:	0f000001 	.word	0x0f000001

08001804 <HAL_ADC_Start>:
{
 8001804:	b410      	push	{r4}
  __HAL_LOCK(hadc);
 8001806:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800180a:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800180c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800180e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001810:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001812:	d05a      	beq.n	80018ca <HAL_ADC_Start+0xc6>
 8001814:	2301      	movs	r3, #1
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001816:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 8001818:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800181c:	6893      	ldr	r3, [r2, #8]
 800181e:	07dc      	lsls	r4, r3, #31
 8001820:	d414      	bmi.n	800184c <HAL_ADC_Start+0x48>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001822:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <HAL_ADC_Start+0xd0>)
 8001824:	4c2c      	ldr	r4, [pc, #176]	@ (80018d8 <HAL_ADC_Start+0xd4>)
 8001826:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8001828:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800182a:	fba4 4303 	umull	r4, r3, r4, r3
 800182e:	0c9b      	lsrs	r3, r3, #18
 8001830:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8001834:	f041 0101 	orr.w	r1, r1, #1
 8001838:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800183a:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 800183c:	9b01      	ldr	r3, [sp, #4]
 800183e:	b12b      	cbz	r3, 800184c <HAL_ADC_Start+0x48>
      counter--;
 8001840:	9b01      	ldr	r3, [sp, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	9301      	str	r3, [sp, #4]
    while (counter != 0U)
 8001846:	9b01      	ldr	r3, [sp, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f9      	bne.n	8001840 <HAL_ADC_Start+0x3c>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800184c:	6893      	ldr	r3, [r2, #8]
 800184e:	f013 0f01 	tst.w	r3, #1
    ADC_STATE_CLR_SET(hadc->State,
 8001852:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001854:	d02d      	beq.n	80018b2 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8001856:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001862:	6403      	str	r3, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001864:	6853      	ldr	r3, [r2, #4]
 8001866:	0559      	lsls	r1, r3, #21
 8001868:	d505      	bpl.n	8001876 <HAL_ADC_Start+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800186a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800186c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001870:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001874:	6403      	str	r3, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001876:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001878:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800187c:	bf1c      	itt	ne
 800187e:	6c43      	ldrne	r3, [r0, #68]	@ 0x44
 8001880:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001884:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001886:	2400      	movs	r4, #0
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <HAL_ADC_Start+0xd8>)
    __HAL_UNLOCK(hadc);
 800188a:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800188e:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 8001892:	6011      	str	r1, [r2, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	06db      	lsls	r3, r3, #27
 8001898:	d002      	beq.n	80018a0 <HAL_ADC_Start+0x9c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800189a:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_ADC_Start+0xdc>)
 800189c:	429a      	cmp	r2, r3
 800189e:	d10f      	bne.n	80018c0 <HAL_ADC_Start+0xbc>
 80018a0:	6893      	ldr	r3, [r2, #8]
 80018a2:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
 80018a6:	d10b      	bne.n	80018c0 <HAL_ADC_Start+0xbc>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018a8:	6893      	ldr	r3, [r2, #8]
 80018aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018ae:	6093      	str	r3, [r2, #8]
 80018b0:	e006      	b.n	80018c0 <HAL_ADC_Start+0xbc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6443      	str	r3, [r0, #68]	@ 0x44
  return HAL_OK;
 80018c0:	2000      	movs	r0, #0
}
 80018c2:	b003      	add	sp, #12
 80018c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018c8:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80018ca:	2002      	movs	r0, #2
}
 80018cc:	b003      	add	sp, #12
 80018ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	20000000 	.word	0x20000000
 80018d8:	431bde83 	.word	0x431bde83
 80018dc:	40012300 	.word	0x40012300
 80018e0:	40012000 	.word	0x40012000

080018e4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80018e4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d014      	beq.n	8001916 <HAL_ADC_Stop+0x32>
  __HAL_ADC_DISABLE(hadc);
 80018ec:	6803      	ldr	r3, [r0, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	f022 0201 	bic.w	r2, r2, #1
 80018f4:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	07db      	lsls	r3, r3, #31
 80018fa:	d407      	bmi.n	800190c <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 80018fc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80018fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6403      	str	r3, [r0, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 800190c:	2300      	movs	r3, #0
 800190e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  return HAL_OK;
 8001912:	4618      	mov	r0, r3
 8001914:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8001916:	2002      	movs	r0, #2
}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop

0800191c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop

08001924 <HAL_ADC_ConfigChannel>:
{
 8001924:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001926:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800192a:	b082      	sub	sp, #8
 800192c:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 800192e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001930:	f04f 0000 	mov.w	r0, #0
 8001934:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001936:	f000 809e 	beq.w	8001a76 <HAL_ADC_ConfigChannel+0x152>
 800193a:	2301      	movs	r3, #1
 800193c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001940:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001942:	6813      	ldr	r3, [r2, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001944:	688c      	ldr	r4, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001946:	2d09      	cmp	r5, #9
 8001948:	b2a8      	uxth	r0, r5
 800194a:	d828      	bhi.n	800199e <HAL_ADC_ConfigChannel+0x7a>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800194c:	691e      	ldr	r6, [r3, #16]
 800194e:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8001952:	f04f 0c07 	mov.w	ip, #7
 8001956:	fa0c fc0e 	lsl.w	ip, ip, lr
 800195a:	ea26 060c 	bic.w	r6, r6, ip
 800195e:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001960:	691e      	ldr	r6, [r3, #16]
 8001962:	fa04 f40e 	lsl.w	r4, r4, lr
 8001966:	4334      	orrs	r4, r6
 8001968:	611c      	str	r4, [r3, #16]
  if (sConfig->Rank < 7U)
 800196a:	684c      	ldr	r4, [r1, #4]
 800196c:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800196e:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8001972:	d82a      	bhi.n	80019ca <HAL_ADC_ConfigChannel+0xa6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001974:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8001976:	3905      	subs	r1, #5
 8001978:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800197c:	4088      	lsls	r0, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800197e:	fa0c f101 	lsl.w	r1, ip, r1
 8001982:	ea24 0101 	bic.w	r1, r4, r1
 8001986:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001988:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800198a:	4308      	orrs	r0, r1
 800198c:	6358      	str	r0, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800198e:	493b      	ldr	r1, [pc, #236]	@ (8001a7c <HAL_ADC_ConfigChannel+0x158>)
 8001990:	428b      	cmp	r3, r1
 8001992:	d02b      	beq.n	80019ec <HAL_ADC_ConfigChannel+0xc8>
  __HAL_UNLOCK(hadc);
 8001994:	2000      	movs	r0, #0
 8001996:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
}
 800199a:	b002      	add	sp, #8
 800199c:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800199e:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80019a2:	68de      	ldr	r6, [r3, #12]
 80019a4:	f1ac 0c1e 	sub.w	ip, ip, #30
 80019a8:	f04f 0e07 	mov.w	lr, #7
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ac:	fa04 f40c 	lsl.w	r4, r4, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019b0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80019b4:	ea26 060c 	bic.w	r6, r6, ip
 80019b8:	60de      	str	r6, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ba:	68de      	ldr	r6, [r3, #12]
 80019bc:	4334      	orrs	r4, r6
 80019be:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7U)
 80019c0:	684c      	ldr	r4, [r1, #4]
 80019c2:	2c06      	cmp	r4, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019c4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 80019c8:	d9d4      	bls.n	8001974 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80019ca:	2c0c      	cmp	r4, #12
 80019cc:	d81f      	bhi.n	8001a0e <HAL_ADC_ConfigChannel+0xea>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019ce:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80019d0:	3923      	subs	r1, #35	@ 0x23
 80019d2:	261f      	movs	r6, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019d4:	4088      	lsls	r0, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019d6:	fa06 f101 	lsl.w	r1, r6, r1
 80019da:	ea24 0101 	bic.w	r1, r4, r1
 80019de:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019e2:	4308      	orrs	r0, r1
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019e4:	4925      	ldr	r1, [pc, #148]	@ (8001a7c <HAL_ADC_ConfigChannel+0x158>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019e6:	6318      	str	r0, [r3, #48]	@ 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019e8:	428b      	cmp	r3, r1
 80019ea:	d1d3      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x70>
 80019ec:	2d12      	cmp	r5, #18
 80019ee:	d01b      	beq.n	8001a28 <HAL_ADC_ConfigChannel+0x104>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019f0:	4b23      	ldr	r3, [pc, #140]	@ (8001a80 <HAL_ADC_ConfigChannel+0x15c>)
 80019f2:	429d      	cmp	r5, r3
 80019f4:	d022      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0x118>
 80019f6:	2d11      	cmp	r5, #17
 80019f8:	d1cc      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019fa:	4b22      	ldr	r3, [pc, #136]	@ (8001a84 <HAL_ADC_ConfigChannel+0x160>)
 80019fc:	6859      	ldr	r1, [r3, #4]
 80019fe:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8001a02:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a04:	6859      	ldr	r1, [r3, #4]
 8001a06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001a0a:	6059      	str	r1, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a0c:	e7c2      	b.n	8001994 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a0e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8001a10:	3941      	subs	r1, #65	@ 0x41
 8001a12:	261f      	movs	r6, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a14:	4088      	lsls	r0, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a16:	fa06 f101 	lsl.w	r1, r6, r1
 8001a1a:	ea24 0101 	bic.w	r1, r4, r1
 8001a1e:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a22:	4308      	orrs	r0, r1
 8001a24:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8001a26:	e7b2      	b.n	800198e <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a28:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <HAL_ADC_ConfigChannel+0x160>)
 8001a2a:	6859      	ldr	r1, [r3, #4]
 8001a2c:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8001a30:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 8001a38:	6059      	str	r1, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a3a:	e7ab      	b.n	8001994 <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_ADC_ConfigChannel+0x160>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a3e:	4c12      	ldr	r4, [pc, #72]	@ (8001a88 <HAL_ADC_ConfigChannel+0x164>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a40:	6859      	ldr	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a42:	4812      	ldr	r0, [pc, #72]	@ (8001a8c <HAL_ADC_ConfigChannel+0x168>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a44:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8001a48:	6059      	str	r1, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001a50:	6059      	str	r1, [r3, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	fba0 0303 	umull	r0, r3, r0, r3
 8001a58:	0c9b      	lsrs	r3, r3, #18
 8001a5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8001a62:	9b01      	ldr	r3, [sp, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d095      	beq.n	8001994 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8001a68:	9b01      	ldr	r3, [sp, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8001a6e:	9b01      	ldr	r3, [sp, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f9      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x144>
 8001a74:	e78e      	b.n	8001994 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001a76:	2002      	movs	r0, #2
}
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	40012000 	.word	0x40012000
 8001a80:	10000012 	.word	0x10000012
 8001a84:	40012300 	.word	0x40012300
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	431bde83 	.word	0x431bde83

08001a90 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4907      	ldr	r1, [pc, #28]	@ (8001ab0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a92:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a94:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001aaa:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <HAL_NVIC_SetPriority+0x70>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001abc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abe:	f1c3 0e07 	rsb	lr, r3, #7
 8001ac2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aca:	bf28      	it	cs
 8001acc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad0:	f1bc 0f06 	cmp.w	ip, #6
 8001ad4:	d91c      	bls.n	8001b10 <HAL_NVIC_SetPriority+0x5c>
 8001ad6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	fa03 f30c 	lsl.w	r3, r3, ip
 8001ae2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	fa03 f30e 	lsl.w	r3, r3, lr
 8001aee:	ea21 0303 	bic.w	r3, r1, r3
 8001af2:	fa03 f30c 	lsl.w	r3, r3, ip
 8001af6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001afa:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001afe:	db0a      	blt.n	8001b16 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001b04:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001b08:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b10:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	4694      	mov	ip, r2
 8001b14:	e7e7      	b.n	8001ae6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <HAL_NVIC_SetPriority+0x74>)
 8001b18:	f000 000f 	and.w	r0, r0, #15
 8001b1c:	4402      	add	r2, r0
 8001b1e:	7613      	strb	r3, [r2, #24]
 8001b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b24:	e000ed00 	.word	0xe000ed00
 8001b28:	e000ecfc 	.word	0xe000ecfc

08001b2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	db07      	blt.n	8001b40 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b30:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <HAL_NVIC_EnableIRQ+0x18>)
 8001b32:	0941      	lsrs	r1, r0, #5
 8001b34:	2301      	movs	r3, #1
 8001b36:	f000 001f 	and.w	r0, r0, #31
 8001b3a:	4083      	lsls	r3, r0
 8001b3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	3801      	subs	r0, #1
 8001b4a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001b4e:	d301      	bcc.n	8001b54 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b50:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b52:	4770      	bx	lr
{
 8001b54:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	4c07      	ldr	r4, [pc, #28]	@ (8001b78 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001b62:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b66:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b68:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	619a      	str	r2, [r3, #24]
}
 8001b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	6119      	str	r1, [r3, #16]
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b80:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8001b82:	f7ff fd7b 	bl	800167c <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b86:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d006      	beq.n	8001b9c <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b92:	2300      	movs	r3, #0
 8001b94:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b98:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8001b9a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f022 0216 	bic.w	r2, r2, #22
 8001ba4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bac:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001bb0:	4605      	mov	r5, r0
 8001bb2:	b342      	cbz	r2, 8001c06 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f022 0208 	bic.w	r2, r2, #8
 8001bba:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc4:	e005      	b.n	8001bd2 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc6:	f7ff fd59 	bl	800167c <HAL_GetTick>
 8001bca:	1b43      	subs	r3, r0, r5
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d810      	bhi.n	8001bf2 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f013 0301 	ands.w	r3, r3, #1
 8001bd8:	d1f5      	bne.n	8001bc6 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bda:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001bdc:	223f      	movs	r2, #63	@ 0x3f
 8001bde:	408a      	lsls	r2, r1
  return HAL_OK;
 8001be0:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001be2:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001be4:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001be6:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001be8:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001bec:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8001bf8:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001c04:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c06:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001c08:	2a00      	cmp	r2, #0
 8001c0a:	d1d3      	bne.n	8001bb4 <HAL_DMA_Abort+0x38>
 8001c0c:	e7d6      	b.n	8001bbc <HAL_DMA_Abort+0x40>
 8001c0e:	bf00      	nop

08001c10 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c10:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d003      	beq.n	8001c20 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c20:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c22:	2305      	movs	r3, #5
 8001c24:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001c28:	6813      	ldr	r3, [r2, #0]
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 8001c2e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c38:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3a:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3c:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8001e14 <HAL_GPIO_Init+0x1e0>
{
 8001c40:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8001c42:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c46:	4689      	mov	r9, r1
 8001c48:	e003      	b.n	8001c52 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	f000 8082 	beq.w	8001d56 <HAL_GPIO_Init+0x122>
    ioposition = 0x01U << position;
 8001c52:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c56:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8001c5a:	43a2      	bics	r2, r4
 8001c5c:	d1f5      	bne.n	8001c4a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001c62:	f001 0203 	and.w	r2, r1, #3
 8001c66:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c6a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c6e:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c74:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c78:	d970      	bls.n	8001d5c <HAL_GPIO_Init+0x128>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7a:	2a03      	cmp	r2, #3
 8001c7c:	f040 80a7 	bne.w	8001dce <HAL_GPIO_Init+0x19a>
      temp = GPIOx->MODER;
 8001c80:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c82:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c86:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c88:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c8a:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001c8e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c90:	d0db      	beq.n	8001c4a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2200      	movs	r2, #0
 8001c94:	9203      	str	r2, [sp, #12]
 8001c96:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001c9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c9e:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8001ca2:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001ca6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001caa:	9203      	str	r2, [sp, #12]
 8001cac:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001cae:	f023 0203 	bic.w	r2, r3, #3
 8001cb2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb6:	f003 0703 	and.w	r7, r3, #3
 8001cba:	260f      	movs	r6, #15
 8001cbc:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8001cc0:	00bf      	lsls	r7, r7, #2
 8001cc2:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cc6:	4e50      	ldr	r6, [pc, #320]	@ (8001e08 <HAL_GPIO_Init+0x1d4>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc8:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cca:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ccc:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd0:	d018      	beq.n	8001d04 <HAL_GPIO_Init+0xd0>
 8001cd2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001cd6:	42b0      	cmp	r0, r6
 8001cd8:	f000 8084 	beq.w	8001de4 <HAL_GPIO_Init+0x1b0>
 8001cdc:	4e4b      	ldr	r6, [pc, #300]	@ (8001e0c <HAL_GPIO_Init+0x1d8>)
 8001cde:	42b0      	cmp	r0, r6
 8001ce0:	f000 8086 	beq.w	8001df0 <HAL_GPIO_Init+0x1bc>
 8001ce4:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8001e18 <HAL_GPIO_Init+0x1e4>
 8001ce8:	4560      	cmp	r0, ip
 8001cea:	f000 8087 	beq.w	8001dfc <HAL_GPIO_Init+0x1c8>
 8001cee:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8001e1c <HAL_GPIO_Init+0x1e8>
 8001cf2:	4560      	cmp	r0, ip
 8001cf4:	bf0c      	ite	eq
 8001cf6:	f04f 0c04 	moveq.w	ip, #4
 8001cfa:	f04f 0c07 	movne.w	ip, #7
 8001cfe:	fa0c f707 	lsl.w	r7, ip, r7
 8001d02:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d04:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d06:	4a42      	ldr	r2, [pc, #264]	@ (8001e10 <HAL_GPIO_Init+0x1dc>)
 8001d08:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0a:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8001d0c:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001d10:	4e3f      	ldr	r6, [pc, #252]	@ (8001e10 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001d12:	bf54      	ite	pl
 8001d14:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001d16:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8001d1a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001d1c:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001d1e:	4e3c      	ldr	r6, [pc, #240]	@ (8001e10 <HAL_GPIO_Init+0x1dc>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8001d22:	bf54      	ite	pl
 8001d24:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001d26:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8001d2a:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001d2c:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2e:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001d30:	4e37      	ldr	r6, [pc, #220]	@ (8001e10 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001d32:	bf54      	ite	pl
 8001d34:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001d36:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8001d3a:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3c:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d3e:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d40:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001d44:	4932      	ldr	r1, [pc, #200]	@ (8001e10 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001d46:	bf54      	ite	pl
 8001d48:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001d4a:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8001d50:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	f47f af7e 	bne.w	8001c52 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001d56:	b005      	add	sp, #20
 8001d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8001d5c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d5e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d62:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8001d66:	fa07 f70c 	lsl.w	r7, r7, ip
 8001d6a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001d6e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d70:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d72:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d76:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8001d7a:	409f      	lsls	r7, r3
 8001d7c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d80:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001d82:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d84:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d88:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001d8c:	fa07 f70c 	lsl.w	r7, r7, ip
 8001d90:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d94:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001d96:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d98:	f47f af72 	bne.w	8001c80 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8001d9c:	08df      	lsrs	r7, r3, #3
 8001d9e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001da2:	9701      	str	r7, [sp, #4]
 8001da4:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da6:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8001daa:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dac:	f003 0e07 	and.w	lr, r3, #7
 8001db0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001db4:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db6:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dba:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001dbe:	9e00      	ldr	r6, [sp, #0]
 8001dc0:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001dc4:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001dca:	6237      	str	r7, [r6, #32]
 8001dcc:	e758      	b.n	8001c80 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8001dce:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd0:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd4:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001dd8:	fa07 f70c 	lsl.w	r7, r7, ip
 8001ddc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001de0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	e74d      	b.n	8001c80 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de4:	f04f 0c01 	mov.w	ip, #1
 8001de8:	fa0c f707 	lsl.w	r7, ip, r7
 8001dec:	433d      	orrs	r5, r7
 8001dee:	e789      	b.n	8001d04 <HAL_GPIO_Init+0xd0>
 8001df0:	f04f 0c02 	mov.w	ip, #2
 8001df4:	fa0c f707 	lsl.w	r7, ip, r7
 8001df8:	433d      	orrs	r5, r7
 8001dfa:	e783      	b.n	8001d04 <HAL_GPIO_Init+0xd0>
 8001dfc:	f04f 0c03 	mov.w	ip, #3
 8001e00:	fa0c f707 	lsl.w	r7, ip, r7
 8001e04:	433d      	orrs	r5, r7
 8001e06:	e77d      	b.n	8001d04 <HAL_GPIO_Init+0xd0>
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40013c00 	.word	0x40013c00
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000

08001e20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	b902      	cbnz	r2, 8001e24 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e22:	0409      	lsls	r1, r1, #16
 8001e24:	6181      	str	r1, [r0, #24]
  }
}
 8001e26:	4770      	bx	lr

08001e28 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	f000 81d8 	beq.w	80021de <HAL_RCC_OscConfig+0x3b6>
{
 8001e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	6803      	ldr	r3, [r0, #0]
 8001e34:	07dd      	lsls	r5, r3, #31
{
 8001e36:	b082      	sub	sp, #8
 8001e38:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	d52f      	bpl.n	8001e9c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3c:	499d      	ldr	r1, [pc, #628]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 8001e3e:	688a      	ldr	r2, [r1, #8]
 8001e40:	f002 020c 	and.w	r2, r2, #12
 8001e44:	2a04      	cmp	r2, #4
 8001e46:	f000 80ec 	beq.w	8002022 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4a:	688a      	ldr	r2, [r1, #8]
 8001e4c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e50:	2a08      	cmp	r2, #8
 8001e52:	f000 80e2 	beq.w	800201a <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	6863      	ldr	r3, [r4, #4]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5c:	f000 80eb 	beq.w	8002036 <HAL_RCC_OscConfig+0x20e>
 8001e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e64:	f000 8173 	beq.w	800214e <HAL_RCC_OscConfig+0x326>
 8001e68:	4d92      	ldr	r5, [pc, #584]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 8001e6a:	682a      	ldr	r2, [r5, #0]
 8001e6c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001e70:	602a      	str	r2, [r5, #0]
 8001e72:	682a      	ldr	r2, [r5, #0]
 8001e74:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e78:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 80e0 	bne.w	8002040 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fbfc 	bl	800167c <HAL_GetTick>
 8001e84:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e005      	b.n	8001e94 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fbf8 	bl	800167c <HAL_GetTick>
 8001e8c:	1b80      	subs	r0, r0, r6
 8001e8e:	2864      	cmp	r0, #100	@ 0x64
 8001e90:	f200 8100 	bhi.w	8002094 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	039f      	lsls	r7, r3, #14
 8001e98:	d4f6      	bmi.n	8001e88 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	079d      	lsls	r5, r3, #30
 8001e9e:	d528      	bpl.n	8001ef2 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ea0:	4a84      	ldr	r2, [pc, #528]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 8001ea2:	6891      	ldr	r1, [r2, #8]
 8001ea4:	f011 0f0c 	tst.w	r1, #12
 8001ea8:	f000 809b 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eac:	6891      	ldr	r1, [r2, #8]
 8001eae:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eb2:	2908      	cmp	r1, #8
 8001eb4:	f000 8091 	beq.w	8001fda <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb8:	68e3      	ldr	r3, [r4, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 810c 	beq.w	80020d8 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80020b8 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec2:	4e7c      	ldr	r6, [pc, #496]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ec8:	f7ff fbd8 	bl	800167c <HAL_GetTick>
 8001ecc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ece:	e005      	b.n	8001edc <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff fbd4 	bl	800167c <HAL_GetTick>
 8001ed4:	1b40      	subs	r0, r0, r5
 8001ed6:	2802      	cmp	r0, #2
 8001ed8:	f200 80dc 	bhi.w	8002094 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	6833      	ldr	r3, [r6, #0]
 8001ede:	079f      	lsls	r7, r3, #30
 8001ee0:	d5f6      	bpl.n	8001ed0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee2:	6833      	ldr	r3, [r6, #0]
 8001ee4:	6922      	ldr	r2, [r4, #16]
 8001ee6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001eea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001eee:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	071a      	lsls	r2, r3, #28
 8001ef4:	d45c      	bmi.n	8001fb0 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef6:	075d      	lsls	r5, r3, #29
 8001ef8:	d53a      	bpl.n	8001f70 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001efa:	4a6e      	ldr	r2, [pc, #440]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 8001efc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001efe:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	f040 8088 	bne.w	8002016 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f10:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001f1a:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4e67      	ldr	r6, [pc, #412]	@ (80020bc <HAL_RCC_OscConfig+0x294>)
 8001f1e:	6833      	ldr	r3, [r6, #0]
 8001f20:	05d8      	lsls	r0, r3, #23
 8001f22:	f140 80a7 	bpl.w	8002074 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f26:	68a3      	ldr	r3, [r4, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	f000 80b7 	beq.w	800209c <HAL_RCC_OscConfig+0x274>
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	f000 811d 	beq.w	800216e <HAL_RCC_OscConfig+0x346>
 8001f34:	4e5f      	ldr	r6, [pc, #380]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 8001f36:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	6732      	str	r2, [r6, #112]	@ 0x70
 8001f3e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8001f40:	f022 0204 	bic.w	r2, r2, #4
 8001f44:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 80ad 	bne.w	80020a6 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fb96 	bl	800167c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001f54:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f56:	e005      	b.n	8001f64 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f58:	f7ff fb90 	bl	800167c <HAL_GetTick>
 8001f5c:	1bc0      	subs	r0, r0, r7
 8001f5e:	4540      	cmp	r0, r8
 8001f60:	f200 8098 	bhi.w	8002094 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8001f66:	079b      	lsls	r3, r3, #30
 8001f68:	d4f6      	bmi.n	8001f58 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f6a:	2d00      	cmp	r5, #0
 8001f6c:	f040 80f9 	bne.w	8002162 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f70:	69a3      	ldr	r3, [r4, #24]
 8001f72:	b1cb      	cbz	r3, 8001fa8 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f74:	4d4f      	ldr	r5, [pc, #316]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 8001f76:	68aa      	ldr	r2, [r5, #8]
 8001f78:	f002 020c 	and.w	r2, r2, #12
 8001f7c:	2a08      	cmp	r2, #8
 8001f7e:	f000 80bc 	beq.w	80020fa <HAL_RCC_OscConfig+0x2d2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f82:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f84:	4b4c      	ldr	r3, [pc, #304]	@ (80020b8 <HAL_RCC_OscConfig+0x290>)
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f8c:	f000 80f9 	beq.w	8002182 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fb74 	bl	800167c <HAL_GetTick>
 8001f94:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	e004      	b.n	8001fa2 <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff fb70 	bl	800167c <HAL_GetTick>
 8001f9c:	1b00      	subs	r0, r0, r4
 8001f9e:	2802      	cmp	r0, #2
 8001fa0:	d878      	bhi.n	8002094 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	019b      	lsls	r3, r3, #6
 8001fa6:	d4f7      	bmi.n	8001f98 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001fa8:	2000      	movs	r0, #0
}
 8001faa:	b002      	add	sp, #8
 8001fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb0:	6963      	ldr	r3, [r4, #20]
 8001fb2:	b1fb      	cbz	r3, 8001ff4 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8001fb4:	4b40      	ldr	r3, [pc, #256]	@ (80020b8 <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb6:	4e3f      	ldr	r6, [pc, #252]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fb5d 	bl	800167c <HAL_GetTick>
 8001fc2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc4:	e004      	b.n	8001fd0 <HAL_RCC_OscConfig+0x1a8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fb59 	bl	800167c <HAL_GetTick>
 8001fca:	1b40      	subs	r0, r0, r5
 8001fcc:	2802      	cmp	r0, #2
 8001fce:	d861      	bhi.n	8002094 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd0:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8001fd2:	079b      	lsls	r3, r3, #30
 8001fd4:	d5f7      	bpl.n	8001fc6 <HAL_RCC_OscConfig+0x19e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	e78d      	b.n	8001ef6 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fda:	6852      	ldr	r2, [r2, #4]
 8001fdc:	0251      	lsls	r1, r2, #9
 8001fde:	f53f af6b 	bmi.w	8001eb8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4a34      	ldr	r2, [pc, #208]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	0792      	lsls	r2, r2, #30
 8001fe8:	d538      	bpl.n	800205c <HAL_RCC_OscConfig+0x234>
 8001fea:	68e2      	ldr	r2, [r4, #12]
 8001fec:	2a01      	cmp	r2, #1
 8001fee:	d035      	beq.n	800205c <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	e7da      	b.n	8001faa <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8001ff4:	4a30      	ldr	r2, [pc, #192]	@ (80020b8 <HAL_RCC_OscConfig+0x290>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff6:	4e2f      	ldr	r6, [pc, #188]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8001ff8:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fb3e 	bl	800167c <HAL_GetTick>
 8002000:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002002:	e004      	b.n	800200e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7ff fb3a 	bl	800167c <HAL_GetTick>
 8002008:	1b40      	subs	r0, r0, r5
 800200a:	2802      	cmp	r0, #2
 800200c:	d842      	bhi.n	8002094 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002010:	079f      	lsls	r7, r3, #30
 8002012:	d4f7      	bmi.n	8002004 <HAL_RCC_OscConfig+0x1dc>
 8002014:	e7df      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8002016:	2500      	movs	r5, #0
 8002018:	e780      	b.n	8001f1c <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	684a      	ldr	r2, [r1, #4]
 800201c:	0251      	lsls	r1, r2, #9
 800201e:	f57f af1a 	bpl.w	8001e56 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002022:	4a24      	ldr	r2, [pc, #144]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	0392      	lsls	r2, r2, #14
 8002028:	f57f af38 	bpl.w	8001e9c <HAL_RCC_OscConfig+0x74>
 800202c:	6862      	ldr	r2, [r4, #4]
 800202e:	2a00      	cmp	r2, #0
 8002030:	f47f af34 	bne.w	8001e9c <HAL_RCC_OscConfig+0x74>
 8002034:	e7dc      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002036:	4a1f      	ldr	r2, [pc, #124]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002040:	f7ff fb1c 	bl	800167c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002044:	4e1b      	ldr	r6, [pc, #108]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002046:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002048:	e004      	b.n	8002054 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204a:	f7ff fb17 	bl	800167c <HAL_GetTick>
 800204e:	1b40      	subs	r0, r0, r5
 8002050:	2864      	cmp	r0, #100	@ 0x64
 8002052:	d81f      	bhi.n	8002094 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002054:	6833      	ldr	r3, [r6, #0]
 8002056:	039b      	lsls	r3, r3, #14
 8002058:	d5f7      	bpl.n	800204a <HAL_RCC_OscConfig+0x222>
 800205a:	e71e      	b.n	8001e9a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4915      	ldr	r1, [pc, #84]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 800205e:	6920      	ldr	r0, [r4, #16]
 8002060:	680a      	ldr	r2, [r1, #0]
 8002062:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8002066:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800206a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206c:	071a      	lsls	r2, r3, #28
 800206e:	f57f af42 	bpl.w	8001ef6 <HAL_RCC_OscConfig+0xce>
 8002072:	e79d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002074:	6833      	ldr	r3, [r6, #0]
 8002076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800207c:	f7ff fafe 	bl	800167c <HAL_GetTick>
 8002080:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	6833      	ldr	r3, [r6, #0]
 8002084:	05d9      	lsls	r1, r3, #23
 8002086:	f53f af4e 	bmi.w	8001f26 <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208a:	f7ff faf7 	bl	800167c <HAL_GetTick>
 800208e:	1bc0      	subs	r0, r0, r7
 8002090:	2802      	cmp	r0, #2
 8002092:	d9f6      	bls.n	8002082 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8002094:	2003      	movs	r0, #3
}
 8002096:	b002      	add	sp, #8
 8002098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209c:	4a05      	ldr	r2, [pc, #20]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
 800209e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80020a6:	f7ff fae9 	bl	800167c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020aa:	4f02      	ldr	r7, [pc, #8]	@ (80020b4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80020ac:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_OscConfig+0x2a2>
 80020b4:	40023800 	.word	0x40023800
 80020b8:	42470000 	.word	0x42470000
 80020bc:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c0:	f7ff fadc 	bl	800167c <HAL_GetTick>
 80020c4:	1b80      	subs	r0, r0, r6
 80020c6:	4540      	cmp	r0, r8
 80020c8:	d8e4      	bhi.n	8002094 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020cc:	079a      	lsls	r2, r3, #30
 80020ce:	d5f7      	bpl.n	80020c0 <HAL_RCC_OscConfig+0x298>
    if(pwrclkchanged == SET)
 80020d0:	2d00      	cmp	r5, #0
 80020d2:	f43f af4d 	beq.w	8001f70 <HAL_RCC_OscConfig+0x148>
 80020d6:	e044      	b.n	8002162 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 80020d8:	4a42      	ldr	r2, [pc, #264]	@ (80021e4 <HAL_RCC_OscConfig+0x3bc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	4e43      	ldr	r6, [pc, #268]	@ (80021e8 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 80020dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020de:	f7ff facd 	bl	800167c <HAL_GetTick>
 80020e2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e4:	e004      	b.n	80020f0 <HAL_RCC_OscConfig+0x2c8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e6:	f7ff fac9 	bl	800167c <HAL_GetTick>
 80020ea:	1b40      	subs	r0, r0, r5
 80020ec:	2802      	cmp	r0, #2
 80020ee:	d8d1      	bhi.n	8002094 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f0:	6833      	ldr	r3, [r6, #0]
 80020f2:	0799      	lsls	r1, r3, #30
 80020f4:	d4f7      	bmi.n	80020e6 <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	e6fb      	b.n	8001ef2 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	f43f af78 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8002100:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002102:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002104:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002108:	4291      	cmp	r1, r2
 800210a:	f47f af71 	bne.w	8001ff0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002110:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002114:	4291      	cmp	r1, r2
 8002116:	f47f af6b 	bne.w	8001ff0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800211a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800211c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002120:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002122:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002126:	f47f af63 	bne.w	8001ff0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800212a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800212c:	0852      	lsrs	r2, r2, #1
 800212e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002132:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002134:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002138:	f47f af5a 	bne.w	8001ff0 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800213c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800213e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002142:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002146:	bf14      	ite	ne
 8002148:	2001      	movne	r0, #1
 800214a:	2000      	moveq	r0, #0
 800214c:	e72d      	b.n	8001faa <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214e:	4b26      	ldr	r3, [pc, #152]	@ (80021e8 <HAL_RCC_OscConfig+0x3c0>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800215e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002160:	e76e      	b.n	8002040 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002162:	4a21      	ldr	r2, [pc, #132]	@ (80021e8 <HAL_RCC_OscConfig+0x3c0>)
 8002164:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800216a:	6413      	str	r3, [r2, #64]	@ 0x40
 800216c:	e700      	b.n	8001f70 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216e:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <HAL_RCC_OscConfig+0x3c0>)
 8002170:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002172:	f042 0204 	orr.w	r2, r2, #4
 8002176:	671a      	str	r2, [r3, #112]	@ 0x70
 8002178:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002180:	e791      	b.n	80020a6 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8002182:	f7ff fa7b 	bl	800167c <HAL_GetTick>
 8002186:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002188:	e005      	b.n	8002196 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff fa77 	bl	800167c <HAL_GetTick>
 800218e:	1b80      	subs	r0, r0, r6
 8002190:	2802      	cmp	r0, #2
 8002192:	f63f af7f 	bhi.w	8002094 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002196:	682b      	ldr	r3, [r5, #0]
 8002198:	0199      	lsls	r1, r3, #6
 800219a:	d4f6      	bmi.n	800218a <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800219c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80021a0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80021a2:	430b      	orrs	r3, r1
 80021a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80021a8:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 80021ac:	0852      	lsrs	r2, r2, #1
 80021ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80021b2:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80021b4:	490b      	ldr	r1, [pc, #44]	@ (80021e4 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80021ba:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021bc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80021be:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80021c0:	f7ff fa5c 	bl	800167c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c4:	4d08      	ldr	r5, [pc, #32]	@ (80021e8 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 80021c6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c8:	e005      	b.n	80021d6 <HAL_RCC_OscConfig+0x3ae>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ca:	f7ff fa57 	bl	800167c <HAL_GetTick>
 80021ce:	1b00      	subs	r0, r0, r4
 80021d0:	2802      	cmp	r0, #2
 80021d2:	f63f af5f 	bhi.w	8002094 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	682b      	ldr	r3, [r5, #0]
 80021d8:	019a      	lsls	r2, r3, #6
 80021da:	d5f6      	bpl.n	80021ca <HAL_RCC_OscConfig+0x3a2>
 80021dc:	e6e4      	b.n	8001fa8 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 80021de:	2001      	movs	r0, #1
}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	42470000 	.word	0x42470000
 80021e8:	40023800 	.word	0x40023800

080021ec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ec:	4916      	ldr	r1, [pc, #88]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80021ee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f0:	688b      	ldr	r3, [r1, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d01b      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0x46>
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d117      	bne.n	800222e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002200:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002202:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002204:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002208:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800220c:	d113      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220e:	480f      	ldr	r0, [pc, #60]	@ (800224c <HAL_RCC_GetSysClockFreq+0x60>)
 8002210:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002214:	fba1 0100 	umull	r0, r1, r1, r0
 8002218:	f7fe fd1e 	bl	8000c58 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800221c:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <HAL_RCC_GetSysClockFreq+0x5c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002224:	3301      	adds	r3, #1
 8002226:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002228:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800222c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800222e:	4807      	ldr	r0, [pc, #28]	@ (800224c <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002230:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002232:	4807      	ldr	r0, [pc, #28]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002234:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002236:	4806      	ldr	r0, [pc, #24]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x64>)
 8002238:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800223c:	2300      	movs	r3, #0
 800223e:	fba1 0100 	umull	r0, r1, r1, r0
 8002242:	f7fe fd09 	bl	8000c58 <__aeabi_uldivmod>
 8002246:	e7e9      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x30>
 8002248:	40023800 	.word	0x40023800
 800224c:	00f42400 	.word	0x00f42400
 8002250:	017d7840 	.word	0x017d7840

08002254 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002254:	2800      	cmp	r0, #0
 8002256:	f000 8087 	beq.w	8002368 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800225a:	4a48      	ldr	r2, [pc, #288]	@ (800237c <HAL_RCC_ClockConfig+0x128>)
 800225c:	6813      	ldr	r3, [r2, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	428b      	cmp	r3, r1
{
 8002264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002268:	460d      	mov	r5, r1
 800226a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	d209      	bcs.n	8002282 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	b2cb      	uxtb	r3, r1
 8002270:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	428b      	cmp	r3, r1
 800227a:	d002      	beq.n	8002282 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
}
 800227e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	0798      	lsls	r0, r3, #30
 8002286:	d514      	bpl.n	80022b2 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	0759      	lsls	r1, r3, #29
 800228a:	d504      	bpl.n	8002296 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800228c:	493c      	ldr	r1, [pc, #240]	@ (8002380 <HAL_RCC_ClockConfig+0x12c>)
 800228e:	688a      	ldr	r2, [r1, #8]
 8002290:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002294:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002296:	071a      	lsls	r2, r3, #28
 8002298:	d504      	bpl.n	80022a4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800229a:	4939      	ldr	r1, [pc, #228]	@ (8002380 <HAL_RCC_ClockConfig+0x12c>)
 800229c:	688a      	ldr	r2, [r1, #8]
 800229e:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80022a2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4936      	ldr	r1, [pc, #216]	@ (8002380 <HAL_RCC_ClockConfig+0x12c>)
 80022a6:	68a0      	ldr	r0, [r4, #8]
 80022a8:	688a      	ldr	r2, [r1, #8]
 80022aa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80022ae:	4302      	orrs	r2, r0
 80022b0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	07df      	lsls	r7, r3, #31
 80022b4:	d521      	bpl.n	80022fa <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b6:	6862      	ldr	r2, [r4, #4]
 80022b8:	2a01      	cmp	r2, #1
 80022ba:	d057      	beq.n	800236c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022bc:	1e93      	subs	r3, r2, #2
 80022be:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002380 <HAL_RCC_ClockConfig+0x12c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c4:	d94d      	bls.n	8002362 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	0799      	lsls	r1, r3, #30
 80022c8:	d5d8      	bpl.n	800227c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4e2d      	ldr	r6, [pc, #180]	@ (8002380 <HAL_RCC_ClockConfig+0x12c>)
 80022cc:	68b3      	ldr	r3, [r6, #8]
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80022d6:	f7ff f9d1 	bl	800167c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022da:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80022de:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e0:	e004      	b.n	80022ec <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e2:	f7ff f9cb 	bl	800167c <HAL_GetTick>
 80022e6:	1bc0      	subs	r0, r0, r7
 80022e8:	4540      	cmp	r0, r8
 80022ea:	d844      	bhi.n	8002376 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ec:	68b3      	ldr	r3, [r6, #8]
 80022ee:	6862      	ldr	r2, [r4, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022f8:	d1f3      	bne.n	80022e2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022fa:	4a20      	ldr	r2, [pc, #128]	@ (800237c <HAL_RCC_ClockConfig+0x128>)
 80022fc:	6813      	ldr	r3, [r2, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	42ab      	cmp	r3, r5
 8002304:	d906      	bls.n	8002314 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	b2eb      	uxtb	r3, r5
 8002308:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	6813      	ldr	r3, [r2, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	42ab      	cmp	r3, r5
 8002312:	d1b3      	bne.n	800227c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	075a      	lsls	r2, r3, #29
 8002318:	d506      	bpl.n	8002328 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231a:	4919      	ldr	r1, [pc, #100]	@ (8002380 <HAL_RCC_ClockConfig+0x12c>)
 800231c:	68e0      	ldr	r0, [r4, #12]
 800231e:	688a      	ldr	r2, [r1, #8]
 8002320:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8002324:	4302      	orrs	r2, r0
 8002326:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	071b      	lsls	r3, r3, #28
 800232a:	d507      	bpl.n	800233c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232c:	4a14      	ldr	r2, [pc, #80]	@ (8002380 <HAL_RCC_ClockConfig+0x12c>)
 800232e:	6921      	ldr	r1, [r4, #16]
 8002330:	6893      	ldr	r3, [r2, #8]
 8002332:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002336:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800233a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233c:	f7ff ff56 	bl	80021ec <HAL_RCC_GetSysClockFreq>
 8002340:	4a0f      	ldr	r2, [pc, #60]	@ (8002380 <HAL_RCC_ClockConfig+0x12c>)
 8002342:	4c10      	ldr	r4, [pc, #64]	@ (8002384 <HAL_RCC_ClockConfig+0x130>)
 8002344:	6892      	ldr	r2, [r2, #8]
 8002346:	4910      	ldr	r1, [pc, #64]	@ (8002388 <HAL_RCC_ClockConfig+0x134>)
 8002348:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800234c:	4603      	mov	r3, r0
 800234e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002350:	480e      	ldr	r0, [pc, #56]	@ (800238c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002352:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002354:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002356:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002358:	f7ff f946 	bl	80015e8 <HAL_InitTick>
  return HAL_OK;
 800235c:	2000      	movs	r0, #0
}
 800235e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	0198      	lsls	r0, r3, #6
 8002364:	d4b1      	bmi.n	80022ca <HAL_RCC_ClockConfig+0x76>
 8002366:	e789      	b.n	800227c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002368:	2001      	movs	r0, #1
}
 800236a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236c:	4b04      	ldr	r3, [pc, #16]	@ (8002380 <HAL_RCC_ClockConfig+0x12c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	039e      	lsls	r6, r3, #14
 8002372:	d4aa      	bmi.n	80022ca <HAL_RCC_ClockConfig+0x76>
 8002374:	e782      	b.n	800227c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002376:	2003      	movs	r0, #3
 8002378:	e781      	b.n	800227e <HAL_RCC_ClockConfig+0x2a>
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00
 8002380:	40023800 	.word	0x40023800
 8002384:	080056e0 	.word	0x080056e0
 8002388:	20000000 	.word	0x20000000
 800238c:	20000008 	.word	0x20000008

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002392:	4905      	ldr	r1, [pc, #20]	@ (80023a8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4a05      	ldr	r2, [pc, #20]	@ (80023ac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002398:	6808      	ldr	r0, [r1, #0]
 800239a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800239e:	5cd3      	ldrb	r3, [r2, r3]
}
 80023a0:	40d8      	lsrs	r0, r3
 80023a2:	4770      	bx	lr
 80023a4:	40023800 	.word	0x40023800
 80023a8:	20000000 	.word	0x20000000
 80023ac:	080056d8 	.word	0x080056d8

080023b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80023b2:	4905      	ldr	r1, [pc, #20]	@ (80023c8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023b8:	6808      	ldr	r0, [r1, #0]
 80023ba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80023be:	5cd3      	ldrb	r3, [r2, r3]
}
 80023c0:	40d8      	lsrs	r0, r3
 80023c2:	4770      	bx	lr
 80023c4:	40023800 	.word	0x40023800
 80023c8:	20000000 	.word	0x20000000
 80023cc:	080056d8 	.word	0x080056d8

080023d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d2:	f102 030c 	add.w	r3, r2, #12
 80023d6:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023de:	f102 0c0c 	add.w	ip, r2, #12
 80023e2:	e84c 3100 	strex	r1, r3, [ip]
 80023e6:	2900      	cmp	r1, #0
 80023e8:	d1f3      	bne.n	80023d2 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ea:	f102 0314 	add.w	r3, r2, #20
 80023ee:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	f102 0c14 	add.w	ip, r2, #20
 80023fa:	e84c 3100 	strex	r1, r3, [ip]
 80023fe:	2900      	cmp	r1, #0
 8002400:	d1f3      	bne.n	80023ea <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002402:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002404:	2b01      	cmp	r3, #1
 8002406:	d005      	beq.n	8002414 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002408:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800240a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800240c:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002410:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002412:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	f102 030c 	add.w	r3, r2, #12
 8002418:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800241c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002420:	f102 0c0c 	add.w	ip, r2, #12
 8002424:	e84c 3100 	strex	r1, r3, [ip]
 8002428:	2900      	cmp	r1, #0
 800242a:	d1f3      	bne.n	8002414 <UART_EndRxTransfer+0x44>
 800242c:	e7ec      	b.n	8002408 <UART_EndRxTransfer+0x38>
 800242e:	bf00      	nop

08002430 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002430:	6802      	ldr	r2, [r0, #0]
 8002432:	6911      	ldr	r1, [r2, #16]
{
 8002434:	b538      	push	{r3, r4, r5, lr}
 8002436:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002438:	68c0      	ldr	r0, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800243a:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800243c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8002440:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002442:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002444:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002446:	4303      	orrs	r3, r0
 8002448:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800244a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800244c:	4303      	orrs	r3, r0
 800244e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002450:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8002454:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002458:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800245a:	430b      	orrs	r3, r1
 800245c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800245e:	6953      	ldr	r3, [r2, #20]
 8002460:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002462:	4923      	ldr	r1, [pc, #140]	@ (80024f0 <UART_SetConfig+0xc0>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002468:	4303      	orrs	r3, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800246a:	428a      	cmp	r2, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800246c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800246e:	d005      	beq.n	800247c <UART_SetConfig+0x4c>
 8002470:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <UART_SetConfig+0xc4>)
 8002472:	429a      	cmp	r2, r3
 8002474:	d002      	beq.n	800247c <UART_SetConfig+0x4c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002476:	f7ff ff8b 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 800247a:	e001      	b.n	8002480 <UART_SetConfig+0x50>
      pclk = HAL_RCC_GetPCLK2Freq();
 800247c:	f7ff ff98 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002480:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002482:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002484:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002488:	e9d4 5300 	ldrd	r5, r3, [r4]
 800248c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002490:	d013      	beq.n	80024ba <UART_SetConfig+0x8a>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002492:	009a      	lsls	r2, r3, #2
 8002494:	0f9b      	lsrs	r3, r3, #30
 8002496:	f7fe fbdf 	bl	8000c58 <__aeabi_uldivmod>
 800249a:	4a17      	ldr	r2, [pc, #92]	@ (80024f8 <UART_SetConfig+0xc8>)
 800249c:	fba2 1300 	umull	r1, r3, r2, r0
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	2164      	movs	r1, #100	@ 0x64
 80024a4:	fb01 0013 	mls	r0, r1, r3, r0
 80024a8:	0100      	lsls	r0, r0, #4
 80024aa:	3032      	adds	r0, #50	@ 0x32
 80024ac:	fba2 2000 	umull	r2, r0, r2, r0
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80024b6:	60ab      	str	r3, [r5, #8]
  }
}
 80024b8:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ba:	18da      	adds	r2, r3, r3
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	415b      	adcs	r3, r3
 80024c2:	f7fe fbc9 	bl	8000c58 <__aeabi_uldivmod>
 80024c6:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <UART_SetConfig+0xc8>)
 80024c8:	fba2 3100 	umull	r3, r1, r2, r0
 80024cc:	0949      	lsrs	r1, r1, #5
 80024ce:	2364      	movs	r3, #100	@ 0x64
 80024d0:	fb03 0311 	mls	r3, r3, r1, r0
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	3332      	adds	r3, #50	@ 0x32
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80024e6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024ea:	4413      	add	r3, r2
 80024ec:	60ab      	str	r3, [r5, #8]
}
 80024ee:	bd38      	pop	{r3, r4, r5, pc}
 80024f0:	40011000 	.word	0x40011000
 80024f4:	40011400 	.word	0x40011400
 80024f8:	51eb851f 	.word	0x51eb851f

080024fc <HAL_UART_Init>:
  if (huart == NULL)
 80024fc:	b370      	cbz	r0, 800255c <HAL_UART_Init+0x60>
{
 80024fe:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002500:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002504:	4604      	mov	r4, r0
 8002506:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800250a:	b313      	cbz	r3, 8002552 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 800250c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800250e:	2324      	movs	r3, #36	@ 0x24
 8002510:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002514:	68d3      	ldr	r3, [r2, #12]
 8002516:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  UART_SetConfig(huart);
 800251a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800251c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800251e:	f7ff ff87 	bl	8002430 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	6919      	ldr	r1, [r3, #16]
 8002526:	f421 4190 	bic.w	r1, r1, #18432	@ 0x4800
 800252a:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800252c:	6959      	ldr	r1, [r3, #20]
 800252e:	f021 012a 	bic.w	r1, r1, #42	@ 0x2a
 8002532:	6159      	str	r1, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002534:	68d9      	ldr	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002536:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8002538:	f04f 0c20 	mov.w	ip, #32
  __HAL_UART_ENABLE(huart);
 800253c:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8002540:	60d9      	str	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002542:	6462      	str	r2, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002544:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002548:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
  return HAL_OK;
 800254c:	4610      	mov	r0, r2
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800254e:	6362      	str	r2, [r4, #52]	@ 0x34
}
 8002550:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002552:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002556:	f7fe fefb 	bl	8001350 <HAL_UART_MspInit>
 800255a:	e7d7      	b.n	800250c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 800255c:	2001      	movs	r0, #1
}
 800255e:	4770      	bx	lr

08002560 <HAL_UART_Transmit>:
{
 8002560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002564:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002566:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800256a:	2820      	cmp	r0, #32
 800256c:	d14b      	bne.n	8002606 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800256e:	4688      	mov	r8, r1
 8002570:	b109      	cbz	r1, 8002576 <HAL_UART_Transmit+0x16>
 8002572:	4617      	mov	r7, r2
 8002574:	b912      	cbnz	r2, 800257c <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8002576:	2001      	movs	r0, #1
}
 8002578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800257c:	461c      	mov	r4, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002582:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002584:	f8c5 9044 	str.w	r9, [r5, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002588:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800258c:	f7ff f876 	bl	800167c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002590:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8002592:	84af      	strh	r7, [r5, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8002598:	84ef      	strh	r7, [r5, #38]	@ 0x26
    tickstart = HAL_GetTick();
 800259a:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259c:	d036      	beq.n	800260c <HAL_UART_Transmit+0xac>
    while (huart->TxXferCount > 0U)
 800259e:	8cea      	ldrh	r2, [r5, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a0:	682b      	ldr	r3, [r5, #0]
    while (huart->TxXferCount > 0U)
 80025a2:	b292      	uxth	r2, r2
 80025a4:	b912      	cbnz	r2, 80025ac <HAL_UART_Transmit+0x4c>
 80025a6:	e017      	b.n	80025d8 <HAL_UART_Transmit+0x78>
    if (Timeout != HAL_MAX_DELAY)
 80025a8:	1c67      	adds	r7, r4, #1
 80025aa:	d11d      	bne.n	80025e8 <HAL_UART_Transmit+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	0610      	lsls	r0, r2, #24
 80025b0:	d5fa      	bpl.n	80025a8 <HAL_UART_Transmit+0x48>
      if (pdata8bits == NULL)
 80025b2:	f1b8 0f00 	cmp.w	r8, #0
 80025b6:	d020      	beq.n	80025fa <HAL_UART_Transmit+0x9a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025b8:	f818 2b01 	ldrb.w	r2, [r8], #1
 80025bc:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 80025be:	8cea      	ldrh	r2, [r5, #38]	@ 0x26
 80025c0:	3a01      	subs	r2, #1
 80025c2:	b292      	uxth	r2, r2
 80025c4:	84ea      	strh	r2, [r5, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025c6:	8cea      	ldrh	r2, [r5, #38]	@ 0x26
 80025c8:	b292      	uxth	r2, r2
 80025ca:	2a00      	cmp	r2, #0
 80025cc:	d1ee      	bne.n	80025ac <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	0652      	lsls	r2, r2, #25
 80025d2:	d404      	bmi.n	80025de <HAL_UART_Transmit+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 80025d4:	1c61      	adds	r1, r4, #1
 80025d6:	d125      	bne.n	8002624 <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	0652      	lsls	r2, r2, #25
 80025dc:	d5fa      	bpl.n	80025d4 <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 80025de:	2320      	movs	r3, #32
 80025e0:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    return HAL_OK;
 80025e4:	2000      	movs	r0, #0
 80025e6:	e7c7      	b.n	8002578 <HAL_UART_Transmit+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e8:	f7ff f848 	bl	800167c <HAL_GetTick>
 80025ec:	1b80      	subs	r0, r0, r6
 80025ee:	4284      	cmp	r4, r0
 80025f0:	d312      	bcc.n	8002618 <HAL_UART_Transmit+0xb8>
 80025f2:	b18c      	cbz	r4, 8002618 <HAL_UART_Transmit+0xb8>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80025f4:	682b      	ldr	r3, [r5, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	e7d8      	b.n	80025ac <HAL_UART_Transmit+0x4c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025fa:	f839 2b02 	ldrh.w	r2, [r9], #2
 80025fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002602:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002604:	e7db      	b.n	80025be <HAL_UART_Transmit+0x5e>
    return HAL_BUSY;
 8002606:	2002      	movs	r0, #2
}
 8002608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800260c:	692b      	ldr	r3, [r5, #16]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1c5      	bne.n	800259e <HAL_UART_Transmit+0x3e>
 8002612:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8002614:	4698      	mov	r8, r3
 8002616:	e7c2      	b.n	800259e <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8002618:	2320      	movs	r3, #32
 800261a:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
        return HAL_TIMEOUT;
 800261e:	2003      	movs	r0, #3
}
 8002620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002624:	f7ff f82a 	bl	800167c <HAL_GetTick>
 8002628:	1b83      	subs	r3, r0, r6
 800262a:	429c      	cmp	r4, r3
 800262c:	d3f4      	bcc.n	8002618 <HAL_UART_Transmit+0xb8>
 800262e:	2c00      	cmp	r4, #0
 8002630:	d0f2      	beq.n	8002618 <HAL_UART_Transmit+0xb8>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002632:	682b      	ldr	r3, [r5, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	e7cf      	b.n	80025d8 <HAL_UART_Transmit+0x78>

08002638 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop

0800263c <HAL_UART_RxCpltCallback>:
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop

08002640 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop

08002644 <UART_DMAAbortOnError>:
{
 8002644:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002646:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800264c:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800264e:	f7ff fff7 	bl	8002640 <HAL_UART_ErrorCallback>
}
 8002652:	bd08      	pop	{r3, pc}

08002654 <HAL_UARTEx_RxEventCallback>:
}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop

08002658 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002658:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800265c:	2b22      	cmp	r3, #34	@ 0x22
 800265e:	d157      	bne.n	8002710 <UART_Receive_IT.isra.0+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002660:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002662:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002664:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800266a:	d044      	beq.n	80026f6 <UART_Receive_IT.isra.0+0x9e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800266c:	2b00      	cmp	r3, #0
 800266e:	d14b      	bne.n	8002708 <UART_Receive_IT.isra.0+0xb0>
 8002670:	6903      	ldr	r3, [r0, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d148      	bne.n	8002708 <UART_Receive_IT.isra.0+0xb0>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002676:	684b      	ldr	r3, [r1, #4]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800267c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800267e:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8002680:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8002682:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8002684:	3b01      	subs	r3, #1
 8002686:	b29b      	uxth	r3, r3
 8002688:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800268a:	2b00      	cmp	r3, #0
 800268c:	d140      	bne.n	8002710 <UART_Receive_IT.isra.0+0xb8>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800268e:	6802      	ldr	r2, [r0, #0]
 8002690:	68d1      	ldr	r1, [r2, #12]
 8002692:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8002696:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002698:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800269a:	68d1      	ldr	r1, [r2, #12]
 800269c:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80026a0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026a2:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80026a4:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026a8:	f021 0101 	bic.w	r1, r1, #1
 80026ac:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80026ae:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026b2:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026b4:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80026b6:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80026b8:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ba:	d12a      	bne.n	8002712 <UART_Receive_IT.isra.0+0xba>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026bc:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026be:	f102 030c 	add.w	r3, r2, #12
 80026c2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ca:	f102 0c0c 	add.w	ip, r2, #12
 80026ce:	e84c 3100 	strex	r1, r3, [ip]
 80026d2:	2900      	cmp	r1, #0
 80026d4:	d1f3      	bne.n	80026be <UART_Receive_IT.isra.0+0x66>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026d6:	6813      	ldr	r3, [r2, #0]
 80026d8:	06db      	lsls	r3, r3, #27
 80026da:	d506      	bpl.n	80026ea <UART_Receive_IT.isra.0+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026dc:	2300      	movs	r3, #0
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	6813      	ldr	r3, [r2, #0]
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	6853      	ldr	r3, [r2, #4]
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026ea:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80026ec:	f7ff ffb2 	bl	8002654 <HAL_UARTEx_RxEventCallback>
}
 80026f0:	b003      	add	sp, #12
 80026f2:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f6:	6903      	ldr	r3, [r0, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1bc      	bne.n	8002676 <UART_Receive_IT.isra.0+0x1e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026fc:	684b      	ldr	r3, [r1, #4]
 80026fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002702:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8002706:	e7bb      	b.n	8002680 <UART_Receive_IT.isra.0+0x28>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002708:	684b      	ldr	r3, [r1, #4]
 800270a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800270e:	e7b4      	b.n	800267a <UART_Receive_IT.isra.0+0x22>
 8002710:	4770      	bx	lr
        HAL_UART_RxCpltCallback(huart);
 8002712:	f7ff ff93 	bl	800263c <HAL_UART_RxCpltCallback>
}
 8002716:	b003      	add	sp, #12
 8002718:	f85d fb04 	ldr.w	pc, [sp], #4

0800271c <HAL_UART_IRQHandler>:
{
 800271c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800271e:	6805      	ldr	r5, [r0, #0]
 8002720:	682b      	ldr	r3, [r5, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002722:	68ee      	ldr	r6, [r5, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002724:	6969      	ldr	r1, [r5, #20]
  if (errorflags == RESET)
 8002726:	f013 0f0f 	tst.w	r3, #15
{
 800272a:	b082      	sub	sp, #8
 800272c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800272e:	462a      	mov	r2, r5
  if (errorflags == RESET)
 8002730:	d170      	bne.n	8002814 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002732:	0699      	lsls	r1, r3, #26
 8002734:	d502      	bpl.n	800273c <HAL_UART_IRQHandler+0x20>
 8002736:	06b5      	lsls	r5, r6, #26
 8002738:	f100 80c4 	bmi.w	80028c4 <HAL_UART_IRQHandler+0x1a8>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800273c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800273e:	2901      	cmp	r1, #1
 8002740:	d00b      	beq.n	800275a <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002742:	0618      	lsls	r0, r3, #24
 8002744:	d502      	bpl.n	800274c <HAL_UART_IRQHandler+0x30>
 8002746:	0631      	lsls	r1, r6, #24
 8002748:	f100 8092 	bmi.w	8002870 <HAL_UART_IRQHandler+0x154>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800274c:	065b      	lsls	r3, r3, #25
 800274e:	d502      	bpl.n	8002756 <HAL_UART_IRQHandler+0x3a>
 8002750:	0675      	lsls	r5, r6, #25
 8002752:	f100 80ac 	bmi.w	80028ae <HAL_UART_IRQHandler+0x192>
}
 8002756:	b002      	add	sp, #8
 8002758:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 800275a:	06d8      	lsls	r0, r3, #27
 800275c:	d5f1      	bpl.n	8002742 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800275e:	06f1      	lsls	r1, r6, #27
 8002760:	d5ef      	bpl.n	8002742 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002762:	2300      	movs	r3, #0
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	6853      	ldr	r3, [r2, #4]
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002770:	6953      	ldr	r3, [r2, #20]
 8002772:	065d      	lsls	r5, r3, #25
 8002774:	f140 8107 	bpl.w	8002986 <HAL_UART_IRQHandler+0x26a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002778:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800277a:	6803      	ldr	r3, [r0, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0e8      	beq.n	8002756 <HAL_UART_IRQHandler+0x3a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002784:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8002786:	4299      	cmp	r1, r3
 8002788:	d9e5      	bls.n	8002756 <HAL_UART_IRQHandler+0x3a>
        huart->RxXferCount = nb_remaining_rx_data;
 800278a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800278c:	69c3      	ldr	r3, [r0, #28]
 800278e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002792:	d036      	beq.n	8002802 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	f102 030c 	add.w	r3, r2, #12
 8002798:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800279c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	f102 050c 	add.w	r5, r2, #12
 80027a4:	e845 3100 	strex	r1, r3, [r5]
 80027a8:	2900      	cmp	r1, #0
 80027aa:	d1f3      	bne.n	8002794 <HAL_UART_IRQHandler+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ac:	f102 0314 	add.w	r3, r2, #20
 80027b0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b8:	f102 0514 	add.w	r5, r2, #20
 80027bc:	e845 3100 	strex	r1, r3, [r5]
 80027c0:	2900      	cmp	r1, #0
 80027c2:	d1f3      	bne.n	80027ac <HAL_UART_IRQHandler+0x90>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c4:	f102 0314 	add.w	r3, r2, #20
 80027c8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d0:	f102 0514 	add.w	r5, r2, #20
 80027d4:	e845 3100 	strex	r1, r3, [r5]
 80027d8:	2900      	cmp	r1, #0
 80027da:	d1f3      	bne.n	80027c4 <HAL_UART_IRQHandler+0xa8>
          huart->RxState = HAL_UART_STATE_READY;
 80027dc:	2320      	movs	r3, #32
 80027de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e2:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e4:	f102 030c 	add.w	r3, r2, #12
 80027e8:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ec:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f0:	f102 050c 	add.w	r5, r2, #12
 80027f4:	e845 3100 	strex	r1, r3, [r5]
 80027f8:	2900      	cmp	r1, #0
 80027fa:	d1f3      	bne.n	80027e4 <HAL_UART_IRQHandler+0xc8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027fc:	f7ff f9be 	bl	8001b7c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002800:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002802:	2302      	movs	r3, #2
 8002804:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002806:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8002808:	1ac9      	subs	r1, r1, r3
 800280a:	4620      	mov	r0, r4
 800280c:	b289      	uxth	r1, r1
 800280e:	f7ff ff21 	bl	8002654 <HAL_UARTEx_RxEventCallback>
 8002812:	e7a0      	b.n	8002756 <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002814:	f011 0101 	ands.w	r1, r1, #1
 8002818:	d16c      	bne.n	80028f4 <HAL_UART_IRQHandler+0x1d8>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800281a:	f416 7f90 	tst.w	r6, #288	@ 0x120
 800281e:	d08d      	beq.n	800273c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002820:	07da      	lsls	r2, r3, #31
 8002822:	d50a      	bpl.n	800283a <HAL_UART_IRQHandler+0x11e>
 8002824:	05f0      	lsls	r0, r6, #23
 8002826:	f140 80e9 	bpl.w	80029fc <HAL_UART_IRQHandler+0x2e0>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800282a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800282c:	0758      	lsls	r0, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002834:	d54f      	bpl.n	80028d6 <HAL_UART_IRQHandler+0x1ba>
 8002836:	2900      	cmp	r1, #0
 8002838:	d160      	bne.n	80028fc <HAL_UART_IRQHandler+0x1e0>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800283a:	0798      	lsls	r0, r3, #30
 800283c:	d564      	bpl.n	8002908 <HAL_UART_IRQHandler+0x1ec>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800283e:	0719      	lsls	r1, r3, #28
 8002840:	f100 809e 	bmi.w	8002980 <HAL_UART_IRQHandler+0x264>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002844:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002846:	2a00      	cmp	r2, #0
 8002848:	d085      	beq.n	8002756 <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800284a:	069a      	lsls	r2, r3, #26
 800284c:	d502      	bpl.n	8002854 <HAL_UART_IRQHandler+0x138>
 800284e:	06b3      	lsls	r3, r6, #26
 8002850:	f100 80d8 	bmi.w	8002a04 <HAL_UART_IRQHandler+0x2e8>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002854:	696b      	ldr	r3, [r5, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002856:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800285c:	f002 0208 	and.w	r2, r2, #8
 8002860:	ea53 0602 	orrs.w	r6, r3, r2
        UART_EndRxTransfer(huart);
 8002864:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002866:	d156      	bne.n	8002916 <HAL_UART_IRQHandler+0x1fa>
        HAL_UART_ErrorCallback(huart);
 8002868:	f7ff feea 	bl	8002640 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286c:	6466      	str	r6, [r4, #68]	@ 0x44
 800286e:	e772      	b.n	8002756 <HAL_UART_IRQHandler+0x3a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002870:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002874:	2b21      	cmp	r3, #33	@ 0x21
 8002876:	f47f af6e 	bne.w	8002756 <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287a:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800287c:	6a23      	ldr	r3, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8002882:	f000 80c4 	beq.w	8002a0e <HAL_UART_IRQHandler+0x2f2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	6221      	str	r1, [r4, #32]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 800288e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002890:	3b01      	subs	r3, #1
 8002892:	b29b      	uxth	r3, r3
 8002894:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8002896:	2b00      	cmp	r3, #0
 8002898:	f47f af5d 	bne.w	8002756 <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800289c:	68d3      	ldr	r3, [r2, #12]
 800289e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028a2:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028a4:	68d3      	ldr	r3, [r2, #12]
 80028a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028aa:	60d3      	str	r3, [r2, #12]
 80028ac:	e753      	b.n	8002756 <HAL_UART_IRQHandler+0x3a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028ae:	68d3      	ldr	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80028b0:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028b6:	60d3      	str	r3, [r2, #12]
  HAL_UART_TxCpltCallback(huart);
 80028b8:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80028ba:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80028be:	f7ff febb 	bl	8002638 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80028c2:	e748      	b.n	8002756 <HAL_UART_IRQHandler+0x3a>
}
 80028c4:	b002      	add	sp, #8
 80028c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80028ca:	f7ff bec5 	b.w	8002658 <UART_Receive_IT.isra.0>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028ce:	05f0      	lsls	r0, r6, #23
 80028d0:	d4ab      	bmi.n	800282a <HAL_UART_IRQHandler+0x10e>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d2:	075a      	lsls	r2, r3, #29
 80028d4:	d412      	bmi.n	80028fc <HAL_UART_IRQHandler+0x1e0>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028d6:	0798      	lsls	r0, r3, #30
 80028d8:	d516      	bpl.n	8002908 <HAL_UART_IRQHandler+0x1ec>
 80028da:	2900      	cmp	r1, #0
 80028dc:	d0af      	beq.n	800283e <HAL_UART_IRQHandler+0x122>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028de:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80028e0:	f042 0204 	orr.w	r2, r2, #4
 80028e4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028e6:	071a      	lsls	r2, r3, #28
 80028e8:	d5ac      	bpl.n	8002844 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ea:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80028ec:	f042 0208 	orr.w	r2, r2, #8
 80028f0:	6462      	str	r2, [r4, #68]	@ 0x44
 80028f2:	e7a7      	b.n	8002844 <HAL_UART_IRQHandler+0x128>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028f4:	07d8      	lsls	r0, r3, #31
 80028f6:	d4ea      	bmi.n	80028ce <HAL_UART_IRQHandler+0x1b2>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028f8:	075a      	lsls	r2, r3, #29
 80028fa:	d53c      	bpl.n	8002976 <HAL_UART_IRQHandler+0x25a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028fc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028fe:	0798      	lsls	r0, r3, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002900:	f042 0202 	orr.w	r2, r2, #2
 8002904:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002906:	d4ea      	bmi.n	80028de <HAL_UART_IRQHandler+0x1c2>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002908:	0718      	lsls	r0, r3, #28
 800290a:	d59b      	bpl.n	8002844 <HAL_UART_IRQHandler+0x128>
 800290c:	f006 0220 	and.w	r2, r6, #32
 8002910:	430a      	orrs	r2, r1
 8002912:	d097      	beq.n	8002844 <HAL_UART_IRQHandler+0x128>
 8002914:	e7e9      	b.n	80028ea <HAL_UART_IRQHandler+0x1ce>
        UART_EndRxTransfer(huart);
 8002916:	f7ff fd5b 	bl	80023d0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291a:	696b      	ldr	r3, [r5, #20]
 800291c:	065e      	lsls	r6, r3, #25
 800291e:	d526      	bpl.n	800296e <HAL_UART_IRQHandler+0x252>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002920:	f105 0314 	add.w	r3, r5, #20
 8002924:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	f105 0114 	add.w	r1, r5, #20
 8002930:	e841 3200 	strex	r2, r3, [r1]
 8002934:	b162      	cbz	r2, 8002950 <HAL_UART_IRQHandler+0x234>
 8002936:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	f102 0314 	add.w	r3, r2, #20
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002944:	f102 0014 	add.w	r0, r2, #20
 8002948:	e840 3100 	strex	r1, r3, [r0]
 800294c:	2900      	cmp	r1, #0
 800294e:	d1f3      	bne.n	8002938 <HAL_UART_IRQHandler+0x21c>
          if (huart->hdmarx != NULL)
 8002950:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002952:	b160      	cbz	r0, 800296e <HAL_UART_IRQHandler+0x252>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002954:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <HAL_UART_IRQHandler+0x308>)
 8002956:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002958:	f7ff f95a 	bl	8001c10 <HAL_DMA_Abort_IT>
 800295c:	2800      	cmp	r0, #0
 800295e:	f43f aefa 	beq.w	8002756 <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002962:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002964:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8002966:	b002      	add	sp, #8
 8002968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800296c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800296e:	4620      	mov	r0, r4
 8002970:	f7ff fe66 	bl	8002640 <HAL_UART_ErrorCallback>
 8002974:	e6ef      	b.n	8002756 <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002976:	0799      	lsls	r1, r3, #30
 8002978:	d4b1      	bmi.n	80028de <HAL_UART_IRQHandler+0x1c2>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800297a:	071a      	lsls	r2, r3, #28
 800297c:	d4b5      	bmi.n	80028ea <HAL_UART_IRQHandler+0x1ce>
 800297e:	e761      	b.n	8002844 <HAL_UART_IRQHandler+0x128>
 8002980:	06b2      	lsls	r2, r6, #26
 8002982:	d4b2      	bmi.n	80028ea <HAL_UART_IRQHandler+0x1ce>
 8002984:	e75e      	b.n	8002844 <HAL_UART_IRQHandler+0x128>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002986:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8002988:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800298a:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 800298c:	b29b      	uxth	r3, r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800298e:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002990:	2b00      	cmp	r3, #0
 8002992:	f43f aee0 	beq.w	8002756 <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002996:	1a41      	subs	r1, r0, r1
 8002998:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800299a:	2900      	cmp	r1, #0
 800299c:	f43f aedb 	beq.w	8002756 <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a0:	f102 030c 	add.w	r3, r2, #12
 80029a4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	f102 050c 	add.w	r5, r2, #12
 80029b0:	e845 3000 	strex	r0, r3, [r5]
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d1f3      	bne.n	80029a0 <HAL_UART_IRQHandler+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b8:	f102 0314 	add.w	r3, r2, #20
 80029bc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c4:	f102 0514 	add.w	r5, r2, #20
 80029c8:	e845 3000 	strex	r0, r3, [r5]
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d1f3      	bne.n	80029b8 <HAL_UART_IRQHandler+0x29c>
        huart->RxState = HAL_UART_STATE_READY;
 80029d0:	2320      	movs	r3, #32
 80029d2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d6:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d8:	f102 030c 	add.w	r3, r2, #12
 80029dc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e4:	f102 050c 	add.w	r5, r2, #12
 80029e8:	e845 3000 	strex	r0, r3, [r5]
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d1f3      	bne.n	80029d8 <HAL_UART_IRQHandler+0x2bc>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029f0:	2302      	movs	r3, #2
 80029f2:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff fe2d 	bl	8002654 <HAL_UARTEx_RxEventCallback>
 80029fa:	e6ac      	b.n	8002756 <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029fc:	075a      	lsls	r2, r3, #29
 80029fe:	f53f af1c 	bmi.w	800283a <HAL_UART_IRQHandler+0x11e>
 8002a02:	e768      	b.n	80028d6 <HAL_UART_IRQHandler+0x1ba>
        UART_Receive_IT(huart);
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7ff fe27 	bl	8002658 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a0a:	6825      	ldr	r5, [r4, #0]
 8002a0c:	e722      	b.n	8002854 <HAL_UART_IRQHandler+0x138>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a0e:	6921      	ldr	r1, [r4, #16]
 8002a10:	2900      	cmp	r1, #0
 8002a12:	f47f af38 	bne.w	8002886 <HAL_UART_IRQHandler+0x16a>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a16:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002a1a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002a1e:	6051      	str	r1, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002a20:	6223      	str	r3, [r4, #32]
 8002a22:	e734      	b.n	800288e <HAL_UART_IRQHandler+0x172>
 8002a24:	08002645 	.word	0x08002645

08002a28 <__cvt>:
 8002a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a2c:	ec57 6b10 	vmov	r6, r7, d0
 8002a30:	2f00      	cmp	r7, #0
 8002a32:	460c      	mov	r4, r1
 8002a34:	4619      	mov	r1, r3
 8002a36:	463b      	mov	r3, r7
 8002a38:	bfbb      	ittet	lt
 8002a3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002a3e:	461f      	movlt	r7, r3
 8002a40:	2300      	movge	r3, #0
 8002a42:	232d      	movlt	r3, #45	@ 0x2d
 8002a44:	700b      	strb	r3, [r1, #0]
 8002a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002a4c:	4691      	mov	r9, r2
 8002a4e:	f023 0820 	bic.w	r8, r3, #32
 8002a52:	bfbc      	itt	lt
 8002a54:	4632      	movlt	r2, r6
 8002a56:	4616      	movlt	r6, r2
 8002a58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002a5c:	d005      	beq.n	8002a6a <__cvt+0x42>
 8002a5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002a62:	d100      	bne.n	8002a66 <__cvt+0x3e>
 8002a64:	3401      	adds	r4, #1
 8002a66:	2102      	movs	r1, #2
 8002a68:	e000      	b.n	8002a6c <__cvt+0x44>
 8002a6a:	2103      	movs	r1, #3
 8002a6c:	ab03      	add	r3, sp, #12
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	ab02      	add	r3, sp, #8
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	ec47 6b10 	vmov	d0, r6, r7
 8002a78:	4653      	mov	r3, sl
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	f000 fe5c 	bl	8003738 <_dtoa_r>
 8002a80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002a84:	4605      	mov	r5, r0
 8002a86:	d119      	bne.n	8002abc <__cvt+0x94>
 8002a88:	f019 0f01 	tst.w	r9, #1
 8002a8c:	d00e      	beq.n	8002aac <__cvt+0x84>
 8002a8e:	eb00 0904 	add.w	r9, r0, r4
 8002a92:	2200      	movs	r2, #0
 8002a94:	2300      	movs	r3, #0
 8002a96:	4630      	mov	r0, r6
 8002a98:	4639      	mov	r1, r7
 8002a9a:	f7fe f81d 	bl	8000ad8 <__aeabi_dcmpeq>
 8002a9e:	b108      	cbz	r0, 8002aa4 <__cvt+0x7c>
 8002aa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8002aa4:	2230      	movs	r2, #48	@ 0x30
 8002aa6:	9b03      	ldr	r3, [sp, #12]
 8002aa8:	454b      	cmp	r3, r9
 8002aaa:	d31e      	bcc.n	8002aea <__cvt+0xc2>
 8002aac:	9b03      	ldr	r3, [sp, #12]
 8002aae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002ab0:	1b5b      	subs	r3, r3, r5
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	b004      	add	sp, #16
 8002ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002abc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ac0:	eb00 0904 	add.w	r9, r0, r4
 8002ac4:	d1e5      	bne.n	8002a92 <__cvt+0x6a>
 8002ac6:	7803      	ldrb	r3, [r0, #0]
 8002ac8:	2b30      	cmp	r3, #48	@ 0x30
 8002aca:	d10a      	bne.n	8002ae2 <__cvt+0xba>
 8002acc:	2200      	movs	r2, #0
 8002ace:	2300      	movs	r3, #0
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	4639      	mov	r1, r7
 8002ad4:	f7fe f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8002ad8:	b918      	cbnz	r0, 8002ae2 <__cvt+0xba>
 8002ada:	f1c4 0401 	rsb	r4, r4, #1
 8002ade:	f8ca 4000 	str.w	r4, [sl]
 8002ae2:	f8da 3000 	ldr.w	r3, [sl]
 8002ae6:	4499      	add	r9, r3
 8002ae8:	e7d3      	b.n	8002a92 <__cvt+0x6a>
 8002aea:	1c59      	adds	r1, r3, #1
 8002aec:	9103      	str	r1, [sp, #12]
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e7d9      	b.n	8002aa6 <__cvt+0x7e>

08002af2 <__exponent>:
 8002af2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002af4:	2900      	cmp	r1, #0
 8002af6:	bfba      	itte	lt
 8002af8:	4249      	neglt	r1, r1
 8002afa:	232d      	movlt	r3, #45	@ 0x2d
 8002afc:	232b      	movge	r3, #43	@ 0x2b
 8002afe:	2909      	cmp	r1, #9
 8002b00:	7002      	strb	r2, [r0, #0]
 8002b02:	7043      	strb	r3, [r0, #1]
 8002b04:	dd29      	ble.n	8002b5a <__exponent+0x68>
 8002b06:	f10d 0307 	add.w	r3, sp, #7
 8002b0a:	461d      	mov	r5, r3
 8002b0c:	270a      	movs	r7, #10
 8002b0e:	461a      	mov	r2, r3
 8002b10:	fbb1 f6f7 	udiv	r6, r1, r7
 8002b14:	fb07 1416 	mls	r4, r7, r6, r1
 8002b18:	3430      	adds	r4, #48	@ 0x30
 8002b1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002b1e:	460c      	mov	r4, r1
 8002b20:	2c63      	cmp	r4, #99	@ 0x63
 8002b22:	f103 33ff 	add.w	r3, r3, #4294967295
 8002b26:	4631      	mov	r1, r6
 8002b28:	dcf1      	bgt.n	8002b0e <__exponent+0x1c>
 8002b2a:	3130      	adds	r1, #48	@ 0x30
 8002b2c:	1e94      	subs	r4, r2, #2
 8002b2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002b32:	1c41      	adds	r1, r0, #1
 8002b34:	4623      	mov	r3, r4
 8002b36:	42ab      	cmp	r3, r5
 8002b38:	d30a      	bcc.n	8002b50 <__exponent+0x5e>
 8002b3a:	f10d 0309 	add.w	r3, sp, #9
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	42ac      	cmp	r4, r5
 8002b42:	bf88      	it	hi
 8002b44:	2300      	movhi	r3, #0
 8002b46:	3302      	adds	r3, #2
 8002b48:	4403      	add	r3, r0
 8002b4a:	1a18      	subs	r0, r3, r0
 8002b4c:	b003      	add	sp, #12
 8002b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002b54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002b58:	e7ed      	b.n	8002b36 <__exponent+0x44>
 8002b5a:	2330      	movs	r3, #48	@ 0x30
 8002b5c:	3130      	adds	r1, #48	@ 0x30
 8002b5e:	7083      	strb	r3, [r0, #2]
 8002b60:	70c1      	strb	r1, [r0, #3]
 8002b62:	1d03      	adds	r3, r0, #4
 8002b64:	e7f1      	b.n	8002b4a <__exponent+0x58>
	...

08002b68 <_printf_float>:
 8002b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6c:	b08d      	sub	sp, #52	@ 0x34
 8002b6e:	460c      	mov	r4, r1
 8002b70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002b74:	4616      	mov	r6, r2
 8002b76:	461f      	mov	r7, r3
 8002b78:	4605      	mov	r5, r0
 8002b7a:	f000 fcdb 	bl	8003534 <_localeconv_r>
 8002b7e:	6803      	ldr	r3, [r0, #0]
 8002b80:	9304      	str	r3, [sp, #16]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fb7c 	bl	8000280 <strlen>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8002b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b90:	9005      	str	r0, [sp, #20]
 8002b92:	3307      	adds	r3, #7
 8002b94:	f023 0307 	bic.w	r3, r3, #7
 8002b98:	f103 0208 	add.w	r2, r3, #8
 8002b9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002ba0:	f8d4 b000 	ldr.w	fp, [r4]
 8002ba4:	f8c8 2000 	str.w	r2, [r8]
 8002ba8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002bac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002bb0:	9307      	str	r3, [sp, #28]
 8002bb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8002bb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bbe:	4b9c      	ldr	r3, [pc, #624]	@ (8002e30 <_printf_float+0x2c8>)
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	f7fd ffba 	bl	8000b3c <__aeabi_dcmpun>
 8002bc8:	bb70      	cbnz	r0, 8002c28 <_printf_float+0xc0>
 8002bca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002bce:	4b98      	ldr	r3, [pc, #608]	@ (8002e30 <_printf_float+0x2c8>)
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	f7fd ff94 	bl	8000b00 <__aeabi_dcmple>
 8002bd8:	bb30      	cbnz	r0, 8002c28 <_printf_float+0xc0>
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2300      	movs	r3, #0
 8002bde:	4640      	mov	r0, r8
 8002be0:	4649      	mov	r1, r9
 8002be2:	f7fd ff83 	bl	8000aec <__aeabi_dcmplt>
 8002be6:	b110      	cbz	r0, 8002bee <_printf_float+0x86>
 8002be8:	232d      	movs	r3, #45	@ 0x2d
 8002bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bee:	4a91      	ldr	r2, [pc, #580]	@ (8002e34 <_printf_float+0x2cc>)
 8002bf0:	4b91      	ldr	r3, [pc, #580]	@ (8002e38 <_printf_float+0x2d0>)
 8002bf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002bf6:	bf94      	ite	ls
 8002bf8:	4690      	movls	r8, r2
 8002bfa:	4698      	movhi	r8, r3
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	6123      	str	r3, [r4, #16]
 8002c00:	f02b 0304 	bic.w	r3, fp, #4
 8002c04:	6023      	str	r3, [r4, #0]
 8002c06:	f04f 0900 	mov.w	r9, #0
 8002c0a:	9700      	str	r7, [sp, #0]
 8002c0c:	4633      	mov	r3, r6
 8002c0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002c10:	4621      	mov	r1, r4
 8002c12:	4628      	mov	r0, r5
 8002c14:	f000 f9d2 	bl	8002fbc <_printf_common>
 8002c18:	3001      	adds	r0, #1
 8002c1a:	f040 808d 	bne.w	8002d38 <_printf_float+0x1d0>
 8002c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c22:	b00d      	add	sp, #52	@ 0x34
 8002c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c28:	4642      	mov	r2, r8
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	4640      	mov	r0, r8
 8002c2e:	4649      	mov	r1, r9
 8002c30:	f7fd ff84 	bl	8000b3c <__aeabi_dcmpun>
 8002c34:	b140      	cbz	r0, 8002c48 <_printf_float+0xe0>
 8002c36:	464b      	mov	r3, r9
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bfbc      	itt	lt
 8002c3c:	232d      	movlt	r3, #45	@ 0x2d
 8002c3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002c42:	4a7e      	ldr	r2, [pc, #504]	@ (8002e3c <_printf_float+0x2d4>)
 8002c44:	4b7e      	ldr	r3, [pc, #504]	@ (8002e40 <_printf_float+0x2d8>)
 8002c46:	e7d4      	b.n	8002bf2 <_printf_float+0x8a>
 8002c48:	6863      	ldr	r3, [r4, #4]
 8002c4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002c4e:	9206      	str	r2, [sp, #24]
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	d13b      	bne.n	8002ccc <_printf_float+0x164>
 8002c54:	2306      	movs	r3, #6
 8002c56:	6063      	str	r3, [r4, #4]
 8002c58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	6022      	str	r2, [r4, #0]
 8002c60:	9303      	str	r3, [sp, #12]
 8002c62:	ab0a      	add	r3, sp, #40	@ 0x28
 8002c64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002c68:	ab09      	add	r3, sp, #36	@ 0x24
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	6861      	ldr	r1, [r4, #4]
 8002c6e:	ec49 8b10 	vmov	d0, r8, r9
 8002c72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002c76:	4628      	mov	r0, r5
 8002c78:	f7ff fed6 	bl	8002a28 <__cvt>
 8002c7c:	9b06      	ldr	r3, [sp, #24]
 8002c7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002c80:	2b47      	cmp	r3, #71	@ 0x47
 8002c82:	4680      	mov	r8, r0
 8002c84:	d129      	bne.n	8002cda <_printf_float+0x172>
 8002c86:	1cc8      	adds	r0, r1, #3
 8002c88:	db02      	blt.n	8002c90 <_printf_float+0x128>
 8002c8a:	6863      	ldr	r3, [r4, #4]
 8002c8c:	4299      	cmp	r1, r3
 8002c8e:	dd41      	ble.n	8002d14 <_printf_float+0x1ac>
 8002c90:	f1aa 0a02 	sub.w	sl, sl, #2
 8002c94:	fa5f fa8a 	uxtb.w	sl, sl
 8002c98:	3901      	subs	r1, #1
 8002c9a:	4652      	mov	r2, sl
 8002c9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002ca0:	9109      	str	r1, [sp, #36]	@ 0x24
 8002ca2:	f7ff ff26 	bl	8002af2 <__exponent>
 8002ca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002ca8:	1813      	adds	r3, r2, r0
 8002caa:	2a01      	cmp	r2, #1
 8002cac:	4681      	mov	r9, r0
 8002cae:	6123      	str	r3, [r4, #16]
 8002cb0:	dc02      	bgt.n	8002cb8 <_printf_float+0x150>
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	07d2      	lsls	r2, r2, #31
 8002cb6:	d501      	bpl.n	8002cbc <_printf_float+0x154>
 8002cb8:	3301      	adds	r3, #1
 8002cba:	6123      	str	r3, [r4, #16]
 8002cbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0a2      	beq.n	8002c0a <_printf_float+0xa2>
 8002cc4:	232d      	movs	r3, #45	@ 0x2d
 8002cc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cca:	e79e      	b.n	8002c0a <_printf_float+0xa2>
 8002ccc:	9a06      	ldr	r2, [sp, #24]
 8002cce:	2a47      	cmp	r2, #71	@ 0x47
 8002cd0:	d1c2      	bne.n	8002c58 <_printf_float+0xf0>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1c0      	bne.n	8002c58 <_printf_float+0xf0>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e7bd      	b.n	8002c56 <_printf_float+0xee>
 8002cda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002cde:	d9db      	bls.n	8002c98 <_printf_float+0x130>
 8002ce0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002ce4:	d118      	bne.n	8002d18 <_printf_float+0x1b0>
 8002ce6:	2900      	cmp	r1, #0
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	dd0b      	ble.n	8002d04 <_printf_float+0x19c>
 8002cec:	6121      	str	r1, [r4, #16]
 8002cee:	b913      	cbnz	r3, 8002cf6 <_printf_float+0x18e>
 8002cf0:	6822      	ldr	r2, [r4, #0]
 8002cf2:	07d0      	lsls	r0, r2, #31
 8002cf4:	d502      	bpl.n	8002cfc <_printf_float+0x194>
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	440b      	add	r3, r1
 8002cfa:	6123      	str	r3, [r4, #16]
 8002cfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002cfe:	f04f 0900 	mov.w	r9, #0
 8002d02:	e7db      	b.n	8002cbc <_printf_float+0x154>
 8002d04:	b913      	cbnz	r3, 8002d0c <_printf_float+0x1a4>
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	07d2      	lsls	r2, r2, #31
 8002d0a:	d501      	bpl.n	8002d10 <_printf_float+0x1a8>
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	e7f4      	b.n	8002cfa <_printf_float+0x192>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e7f2      	b.n	8002cfa <_printf_float+0x192>
 8002d14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002d1a:	4299      	cmp	r1, r3
 8002d1c:	db05      	blt.n	8002d2a <_printf_float+0x1c2>
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	6121      	str	r1, [r4, #16]
 8002d22:	07d8      	lsls	r0, r3, #31
 8002d24:	d5ea      	bpl.n	8002cfc <_printf_float+0x194>
 8002d26:	1c4b      	adds	r3, r1, #1
 8002d28:	e7e7      	b.n	8002cfa <_printf_float+0x192>
 8002d2a:	2900      	cmp	r1, #0
 8002d2c:	bfd4      	ite	le
 8002d2e:	f1c1 0202 	rsble	r2, r1, #2
 8002d32:	2201      	movgt	r2, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	e7e0      	b.n	8002cfa <_printf_float+0x192>
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	055a      	lsls	r2, r3, #21
 8002d3c:	d407      	bmi.n	8002d4e <_printf_float+0x1e6>
 8002d3e:	6923      	ldr	r3, [r4, #16]
 8002d40:	4642      	mov	r2, r8
 8002d42:	4631      	mov	r1, r6
 8002d44:	4628      	mov	r0, r5
 8002d46:	47b8      	blx	r7
 8002d48:	3001      	adds	r0, #1
 8002d4a:	d12b      	bne.n	8002da4 <_printf_float+0x23c>
 8002d4c:	e767      	b.n	8002c1e <_printf_float+0xb6>
 8002d4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002d52:	f240 80dd 	bls.w	8002f10 <_printf_float+0x3a8>
 8002d56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f7fd febb 	bl	8000ad8 <__aeabi_dcmpeq>
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d033      	beq.n	8002dce <_printf_float+0x266>
 8002d66:	4a37      	ldr	r2, [pc, #220]	@ (8002e44 <_printf_float+0x2dc>)
 8002d68:	2301      	movs	r3, #1
 8002d6a:	4631      	mov	r1, r6
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	47b8      	blx	r7
 8002d70:	3001      	adds	r0, #1
 8002d72:	f43f af54 	beq.w	8002c1e <_printf_float+0xb6>
 8002d76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8002d7a:	4543      	cmp	r3, r8
 8002d7c:	db02      	blt.n	8002d84 <_printf_float+0x21c>
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	07d8      	lsls	r0, r3, #31
 8002d82:	d50f      	bpl.n	8002da4 <_printf_float+0x23c>
 8002d84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002d88:	4631      	mov	r1, r6
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	47b8      	blx	r7
 8002d8e:	3001      	adds	r0, #1
 8002d90:	f43f af45 	beq.w	8002c1e <_printf_float+0xb6>
 8002d94:	f04f 0900 	mov.w	r9, #0
 8002d98:	f108 38ff 	add.w	r8, r8, #4294967295
 8002d9c:	f104 0a1a 	add.w	sl, r4, #26
 8002da0:	45c8      	cmp	r8, r9
 8002da2:	dc09      	bgt.n	8002db8 <_printf_float+0x250>
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	079b      	lsls	r3, r3, #30
 8002da8:	f100 8103 	bmi.w	8002fb2 <_printf_float+0x44a>
 8002dac:	68e0      	ldr	r0, [r4, #12]
 8002dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002db0:	4298      	cmp	r0, r3
 8002db2:	bfb8      	it	lt
 8002db4:	4618      	movlt	r0, r3
 8002db6:	e734      	b.n	8002c22 <_printf_float+0xba>
 8002db8:	2301      	movs	r3, #1
 8002dba:	4652      	mov	r2, sl
 8002dbc:	4631      	mov	r1, r6
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	47b8      	blx	r7
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	f43f af2b 	beq.w	8002c1e <_printf_float+0xb6>
 8002dc8:	f109 0901 	add.w	r9, r9, #1
 8002dcc:	e7e8      	b.n	8002da0 <_printf_float+0x238>
 8002dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	dc39      	bgt.n	8002e48 <_printf_float+0x2e0>
 8002dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e44 <_printf_float+0x2dc>)
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	4631      	mov	r1, r6
 8002dda:	4628      	mov	r0, r5
 8002ddc:	47b8      	blx	r7
 8002dde:	3001      	adds	r0, #1
 8002de0:	f43f af1d 	beq.w	8002c1e <_printf_float+0xb6>
 8002de4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002de8:	ea59 0303 	orrs.w	r3, r9, r3
 8002dec:	d102      	bne.n	8002df4 <_printf_float+0x28c>
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	07d9      	lsls	r1, r3, #31
 8002df2:	d5d7      	bpl.n	8002da4 <_printf_float+0x23c>
 8002df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002df8:	4631      	mov	r1, r6
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	47b8      	blx	r7
 8002dfe:	3001      	adds	r0, #1
 8002e00:	f43f af0d 	beq.w	8002c1e <_printf_float+0xb6>
 8002e04:	f04f 0a00 	mov.w	sl, #0
 8002e08:	f104 0b1a 	add.w	fp, r4, #26
 8002e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e0e:	425b      	negs	r3, r3
 8002e10:	4553      	cmp	r3, sl
 8002e12:	dc01      	bgt.n	8002e18 <_printf_float+0x2b0>
 8002e14:	464b      	mov	r3, r9
 8002e16:	e793      	b.n	8002d40 <_printf_float+0x1d8>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	465a      	mov	r2, fp
 8002e1c:	4631      	mov	r1, r6
 8002e1e:	4628      	mov	r0, r5
 8002e20:	47b8      	blx	r7
 8002e22:	3001      	adds	r0, #1
 8002e24:	f43f aefb 	beq.w	8002c1e <_printf_float+0xb6>
 8002e28:	f10a 0a01 	add.w	sl, sl, #1
 8002e2c:	e7ee      	b.n	8002e0c <_printf_float+0x2a4>
 8002e2e:	bf00      	nop
 8002e30:	7fefffff 	.word	0x7fefffff
 8002e34:	080056f0 	.word	0x080056f0
 8002e38:	080056f4 	.word	0x080056f4
 8002e3c:	080056f8 	.word	0x080056f8
 8002e40:	080056fc 	.word	0x080056fc
 8002e44:	08005700 	.word	0x08005700
 8002e48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002e4e:	4553      	cmp	r3, sl
 8002e50:	bfa8      	it	ge
 8002e52:	4653      	movge	r3, sl
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	4699      	mov	r9, r3
 8002e58:	dc36      	bgt.n	8002ec8 <_printf_float+0x360>
 8002e5a:	f04f 0b00 	mov.w	fp, #0
 8002e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e62:	f104 021a 	add.w	r2, r4, #26
 8002e66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002e68:	9306      	str	r3, [sp, #24]
 8002e6a:	eba3 0309 	sub.w	r3, r3, r9
 8002e6e:	455b      	cmp	r3, fp
 8002e70:	dc31      	bgt.n	8002ed6 <_printf_float+0x36e>
 8002e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e74:	459a      	cmp	sl, r3
 8002e76:	dc3a      	bgt.n	8002eee <_printf_float+0x386>
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	07da      	lsls	r2, r3, #31
 8002e7c:	d437      	bmi.n	8002eee <_printf_float+0x386>
 8002e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e80:	ebaa 0903 	sub.w	r9, sl, r3
 8002e84:	9b06      	ldr	r3, [sp, #24]
 8002e86:	ebaa 0303 	sub.w	r3, sl, r3
 8002e8a:	4599      	cmp	r9, r3
 8002e8c:	bfa8      	it	ge
 8002e8e:	4699      	movge	r9, r3
 8002e90:	f1b9 0f00 	cmp.w	r9, #0
 8002e94:	dc33      	bgt.n	8002efe <_printf_float+0x396>
 8002e96:	f04f 0800 	mov.w	r8, #0
 8002e9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e9e:	f104 0b1a 	add.w	fp, r4, #26
 8002ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ea4:	ebaa 0303 	sub.w	r3, sl, r3
 8002ea8:	eba3 0309 	sub.w	r3, r3, r9
 8002eac:	4543      	cmp	r3, r8
 8002eae:	f77f af79 	ble.w	8002da4 <_printf_float+0x23c>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	465a      	mov	r2, fp
 8002eb6:	4631      	mov	r1, r6
 8002eb8:	4628      	mov	r0, r5
 8002eba:	47b8      	blx	r7
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	f43f aeae 	beq.w	8002c1e <_printf_float+0xb6>
 8002ec2:	f108 0801 	add.w	r8, r8, #1
 8002ec6:	e7ec      	b.n	8002ea2 <_printf_float+0x33a>
 8002ec8:	4642      	mov	r2, r8
 8002eca:	4631      	mov	r1, r6
 8002ecc:	4628      	mov	r0, r5
 8002ece:	47b8      	blx	r7
 8002ed0:	3001      	adds	r0, #1
 8002ed2:	d1c2      	bne.n	8002e5a <_printf_float+0x2f2>
 8002ed4:	e6a3      	b.n	8002c1e <_printf_float+0xb6>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4631      	mov	r1, r6
 8002eda:	4628      	mov	r0, r5
 8002edc:	9206      	str	r2, [sp, #24]
 8002ede:	47b8      	blx	r7
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	f43f ae9c 	beq.w	8002c1e <_printf_float+0xb6>
 8002ee6:	9a06      	ldr	r2, [sp, #24]
 8002ee8:	f10b 0b01 	add.w	fp, fp, #1
 8002eec:	e7bb      	b.n	8002e66 <_printf_float+0x2fe>
 8002eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ef2:	4631      	mov	r1, r6
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	47b8      	blx	r7
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d1c0      	bne.n	8002e7e <_printf_float+0x316>
 8002efc:	e68f      	b.n	8002c1e <_printf_float+0xb6>
 8002efe:	9a06      	ldr	r2, [sp, #24]
 8002f00:	464b      	mov	r3, r9
 8002f02:	4442      	add	r2, r8
 8002f04:	4631      	mov	r1, r6
 8002f06:	4628      	mov	r0, r5
 8002f08:	47b8      	blx	r7
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	d1c3      	bne.n	8002e96 <_printf_float+0x32e>
 8002f0e:	e686      	b.n	8002c1e <_printf_float+0xb6>
 8002f10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002f14:	f1ba 0f01 	cmp.w	sl, #1
 8002f18:	dc01      	bgt.n	8002f1e <_printf_float+0x3b6>
 8002f1a:	07db      	lsls	r3, r3, #31
 8002f1c:	d536      	bpl.n	8002f8c <_printf_float+0x424>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	4642      	mov	r2, r8
 8002f22:	4631      	mov	r1, r6
 8002f24:	4628      	mov	r0, r5
 8002f26:	47b8      	blx	r7
 8002f28:	3001      	adds	r0, #1
 8002f2a:	f43f ae78 	beq.w	8002c1e <_printf_float+0xb6>
 8002f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f32:	4631      	mov	r1, r6
 8002f34:	4628      	mov	r0, r5
 8002f36:	47b8      	blx	r7
 8002f38:	3001      	adds	r0, #1
 8002f3a:	f43f ae70 	beq.w	8002c1e <_printf_float+0xb6>
 8002f3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002f42:	2200      	movs	r2, #0
 8002f44:	2300      	movs	r3, #0
 8002f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002f4a:	f7fd fdc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f4e:	b9c0      	cbnz	r0, 8002f82 <_printf_float+0x41a>
 8002f50:	4653      	mov	r3, sl
 8002f52:	f108 0201 	add.w	r2, r8, #1
 8002f56:	4631      	mov	r1, r6
 8002f58:	4628      	mov	r0, r5
 8002f5a:	47b8      	blx	r7
 8002f5c:	3001      	adds	r0, #1
 8002f5e:	d10c      	bne.n	8002f7a <_printf_float+0x412>
 8002f60:	e65d      	b.n	8002c1e <_printf_float+0xb6>
 8002f62:	2301      	movs	r3, #1
 8002f64:	465a      	mov	r2, fp
 8002f66:	4631      	mov	r1, r6
 8002f68:	4628      	mov	r0, r5
 8002f6a:	47b8      	blx	r7
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	f43f ae56 	beq.w	8002c1e <_printf_float+0xb6>
 8002f72:	f108 0801 	add.w	r8, r8, #1
 8002f76:	45d0      	cmp	r8, sl
 8002f78:	dbf3      	blt.n	8002f62 <_printf_float+0x3fa>
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002f80:	e6df      	b.n	8002d42 <_printf_float+0x1da>
 8002f82:	f04f 0800 	mov.w	r8, #0
 8002f86:	f104 0b1a 	add.w	fp, r4, #26
 8002f8a:	e7f4      	b.n	8002f76 <_printf_float+0x40e>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	4642      	mov	r2, r8
 8002f90:	e7e1      	b.n	8002f56 <_printf_float+0x3ee>
 8002f92:	2301      	movs	r3, #1
 8002f94:	464a      	mov	r2, r9
 8002f96:	4631      	mov	r1, r6
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b8      	blx	r7
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	f43f ae3e 	beq.w	8002c1e <_printf_float+0xb6>
 8002fa2:	f108 0801 	add.w	r8, r8, #1
 8002fa6:	68e3      	ldr	r3, [r4, #12]
 8002fa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002faa:	1a5b      	subs	r3, r3, r1
 8002fac:	4543      	cmp	r3, r8
 8002fae:	dcf0      	bgt.n	8002f92 <_printf_float+0x42a>
 8002fb0:	e6fc      	b.n	8002dac <_printf_float+0x244>
 8002fb2:	f04f 0800 	mov.w	r8, #0
 8002fb6:	f104 0919 	add.w	r9, r4, #25
 8002fba:	e7f4      	b.n	8002fa6 <_printf_float+0x43e>

08002fbc <_printf_common>:
 8002fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fc0:	4616      	mov	r6, r2
 8002fc2:	4698      	mov	r8, r3
 8002fc4:	688a      	ldr	r2, [r1, #8]
 8002fc6:	690b      	ldr	r3, [r1, #16]
 8002fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	bfb8      	it	lt
 8002fd0:	4613      	movlt	r3, r2
 8002fd2:	6033      	str	r3, [r6, #0]
 8002fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002fd8:	4607      	mov	r7, r0
 8002fda:	460c      	mov	r4, r1
 8002fdc:	b10a      	cbz	r2, 8002fe2 <_printf_common+0x26>
 8002fde:	3301      	adds	r3, #1
 8002fe0:	6033      	str	r3, [r6, #0]
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	0699      	lsls	r1, r3, #26
 8002fe6:	bf42      	ittt	mi
 8002fe8:	6833      	ldrmi	r3, [r6, #0]
 8002fea:	3302      	addmi	r3, #2
 8002fec:	6033      	strmi	r3, [r6, #0]
 8002fee:	6825      	ldr	r5, [r4, #0]
 8002ff0:	f015 0506 	ands.w	r5, r5, #6
 8002ff4:	d106      	bne.n	8003004 <_printf_common+0x48>
 8002ff6:	f104 0a19 	add.w	sl, r4, #25
 8002ffa:	68e3      	ldr	r3, [r4, #12]
 8002ffc:	6832      	ldr	r2, [r6, #0]
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	42ab      	cmp	r3, r5
 8003002:	dc26      	bgt.n	8003052 <_printf_common+0x96>
 8003004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	3b00      	subs	r3, #0
 800300c:	bf18      	it	ne
 800300e:	2301      	movne	r3, #1
 8003010:	0692      	lsls	r2, r2, #26
 8003012:	d42b      	bmi.n	800306c <_printf_common+0xb0>
 8003014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003018:	4641      	mov	r1, r8
 800301a:	4638      	mov	r0, r7
 800301c:	47c8      	blx	r9
 800301e:	3001      	adds	r0, #1
 8003020:	d01e      	beq.n	8003060 <_printf_common+0xa4>
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	6922      	ldr	r2, [r4, #16]
 8003026:	f003 0306 	and.w	r3, r3, #6
 800302a:	2b04      	cmp	r3, #4
 800302c:	bf02      	ittt	eq
 800302e:	68e5      	ldreq	r5, [r4, #12]
 8003030:	6833      	ldreq	r3, [r6, #0]
 8003032:	1aed      	subeq	r5, r5, r3
 8003034:	68a3      	ldr	r3, [r4, #8]
 8003036:	bf0c      	ite	eq
 8003038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800303c:	2500      	movne	r5, #0
 800303e:	4293      	cmp	r3, r2
 8003040:	bfc4      	itt	gt
 8003042:	1a9b      	subgt	r3, r3, r2
 8003044:	18ed      	addgt	r5, r5, r3
 8003046:	2600      	movs	r6, #0
 8003048:	341a      	adds	r4, #26
 800304a:	42b5      	cmp	r5, r6
 800304c:	d11a      	bne.n	8003084 <_printf_common+0xc8>
 800304e:	2000      	movs	r0, #0
 8003050:	e008      	b.n	8003064 <_printf_common+0xa8>
 8003052:	2301      	movs	r3, #1
 8003054:	4652      	mov	r2, sl
 8003056:	4641      	mov	r1, r8
 8003058:	4638      	mov	r0, r7
 800305a:	47c8      	blx	r9
 800305c:	3001      	adds	r0, #1
 800305e:	d103      	bne.n	8003068 <_printf_common+0xac>
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003068:	3501      	adds	r5, #1
 800306a:	e7c6      	b.n	8002ffa <_printf_common+0x3e>
 800306c:	18e1      	adds	r1, r4, r3
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	2030      	movs	r0, #48	@ 0x30
 8003072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003076:	4422      	add	r2, r4
 8003078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800307c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003080:	3302      	adds	r3, #2
 8003082:	e7c7      	b.n	8003014 <_printf_common+0x58>
 8003084:	2301      	movs	r3, #1
 8003086:	4622      	mov	r2, r4
 8003088:	4641      	mov	r1, r8
 800308a:	4638      	mov	r0, r7
 800308c:	47c8      	blx	r9
 800308e:	3001      	adds	r0, #1
 8003090:	d0e6      	beq.n	8003060 <_printf_common+0xa4>
 8003092:	3601      	adds	r6, #1
 8003094:	e7d9      	b.n	800304a <_printf_common+0x8e>
	...

08003098 <_printf_i>:
 8003098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800309c:	7e0f      	ldrb	r7, [r1, #24]
 800309e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80030a0:	2f78      	cmp	r7, #120	@ 0x78
 80030a2:	4691      	mov	r9, r2
 80030a4:	4680      	mov	r8, r0
 80030a6:	460c      	mov	r4, r1
 80030a8:	469a      	mov	sl, r3
 80030aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80030ae:	d807      	bhi.n	80030c0 <_printf_i+0x28>
 80030b0:	2f62      	cmp	r7, #98	@ 0x62
 80030b2:	d80a      	bhi.n	80030ca <_printf_i+0x32>
 80030b4:	2f00      	cmp	r7, #0
 80030b6:	f000 80d2 	beq.w	800325e <_printf_i+0x1c6>
 80030ba:	2f58      	cmp	r7, #88	@ 0x58
 80030bc:	f000 80b9 	beq.w	8003232 <_printf_i+0x19a>
 80030c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030c8:	e03a      	b.n	8003140 <_printf_i+0xa8>
 80030ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030ce:	2b15      	cmp	r3, #21
 80030d0:	d8f6      	bhi.n	80030c0 <_printf_i+0x28>
 80030d2:	a101      	add	r1, pc, #4	@ (adr r1, 80030d8 <_printf_i+0x40>)
 80030d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030d8:	08003131 	.word	0x08003131
 80030dc:	08003145 	.word	0x08003145
 80030e0:	080030c1 	.word	0x080030c1
 80030e4:	080030c1 	.word	0x080030c1
 80030e8:	080030c1 	.word	0x080030c1
 80030ec:	080030c1 	.word	0x080030c1
 80030f0:	08003145 	.word	0x08003145
 80030f4:	080030c1 	.word	0x080030c1
 80030f8:	080030c1 	.word	0x080030c1
 80030fc:	080030c1 	.word	0x080030c1
 8003100:	080030c1 	.word	0x080030c1
 8003104:	08003245 	.word	0x08003245
 8003108:	0800316f 	.word	0x0800316f
 800310c:	080031ff 	.word	0x080031ff
 8003110:	080030c1 	.word	0x080030c1
 8003114:	080030c1 	.word	0x080030c1
 8003118:	08003267 	.word	0x08003267
 800311c:	080030c1 	.word	0x080030c1
 8003120:	0800316f 	.word	0x0800316f
 8003124:	080030c1 	.word	0x080030c1
 8003128:	080030c1 	.word	0x080030c1
 800312c:	08003207 	.word	0x08003207
 8003130:	6833      	ldr	r3, [r6, #0]
 8003132:	1d1a      	adds	r2, r3, #4
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6032      	str	r2, [r6, #0]
 8003138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800313c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003140:	2301      	movs	r3, #1
 8003142:	e09d      	b.n	8003280 <_printf_i+0x1e8>
 8003144:	6833      	ldr	r3, [r6, #0]
 8003146:	6820      	ldr	r0, [r4, #0]
 8003148:	1d19      	adds	r1, r3, #4
 800314a:	6031      	str	r1, [r6, #0]
 800314c:	0606      	lsls	r6, r0, #24
 800314e:	d501      	bpl.n	8003154 <_printf_i+0xbc>
 8003150:	681d      	ldr	r5, [r3, #0]
 8003152:	e003      	b.n	800315c <_printf_i+0xc4>
 8003154:	0645      	lsls	r5, r0, #25
 8003156:	d5fb      	bpl.n	8003150 <_printf_i+0xb8>
 8003158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800315c:	2d00      	cmp	r5, #0
 800315e:	da03      	bge.n	8003168 <_printf_i+0xd0>
 8003160:	232d      	movs	r3, #45	@ 0x2d
 8003162:	426d      	negs	r5, r5
 8003164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003168:	4859      	ldr	r0, [pc, #356]	@ (80032d0 <_printf_i+0x238>)
 800316a:	230a      	movs	r3, #10
 800316c:	e011      	b.n	8003192 <_printf_i+0xfa>
 800316e:	6821      	ldr	r1, [r4, #0]
 8003170:	6833      	ldr	r3, [r6, #0]
 8003172:	0608      	lsls	r0, r1, #24
 8003174:	f853 5b04 	ldr.w	r5, [r3], #4
 8003178:	d402      	bmi.n	8003180 <_printf_i+0xe8>
 800317a:	0649      	lsls	r1, r1, #25
 800317c:	bf48      	it	mi
 800317e:	b2ad      	uxthmi	r5, r5
 8003180:	2f6f      	cmp	r7, #111	@ 0x6f
 8003182:	4853      	ldr	r0, [pc, #332]	@ (80032d0 <_printf_i+0x238>)
 8003184:	6033      	str	r3, [r6, #0]
 8003186:	bf14      	ite	ne
 8003188:	230a      	movne	r3, #10
 800318a:	2308      	moveq	r3, #8
 800318c:	2100      	movs	r1, #0
 800318e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003192:	6866      	ldr	r6, [r4, #4]
 8003194:	60a6      	str	r6, [r4, #8]
 8003196:	2e00      	cmp	r6, #0
 8003198:	bfa2      	ittt	ge
 800319a:	6821      	ldrge	r1, [r4, #0]
 800319c:	f021 0104 	bicge.w	r1, r1, #4
 80031a0:	6021      	strge	r1, [r4, #0]
 80031a2:	b90d      	cbnz	r5, 80031a8 <_printf_i+0x110>
 80031a4:	2e00      	cmp	r6, #0
 80031a6:	d04b      	beq.n	8003240 <_printf_i+0x1a8>
 80031a8:	4616      	mov	r6, r2
 80031aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80031ae:	fb03 5711 	mls	r7, r3, r1, r5
 80031b2:	5dc7      	ldrb	r7, [r0, r7]
 80031b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031b8:	462f      	mov	r7, r5
 80031ba:	42bb      	cmp	r3, r7
 80031bc:	460d      	mov	r5, r1
 80031be:	d9f4      	bls.n	80031aa <_printf_i+0x112>
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d10b      	bne.n	80031dc <_printf_i+0x144>
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	07df      	lsls	r7, r3, #31
 80031c8:	d508      	bpl.n	80031dc <_printf_i+0x144>
 80031ca:	6923      	ldr	r3, [r4, #16]
 80031cc:	6861      	ldr	r1, [r4, #4]
 80031ce:	4299      	cmp	r1, r3
 80031d0:	bfde      	ittt	le
 80031d2:	2330      	movle	r3, #48	@ 0x30
 80031d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031dc:	1b92      	subs	r2, r2, r6
 80031de:	6122      	str	r2, [r4, #16]
 80031e0:	f8cd a000 	str.w	sl, [sp]
 80031e4:	464b      	mov	r3, r9
 80031e6:	aa03      	add	r2, sp, #12
 80031e8:	4621      	mov	r1, r4
 80031ea:	4640      	mov	r0, r8
 80031ec:	f7ff fee6 	bl	8002fbc <_printf_common>
 80031f0:	3001      	adds	r0, #1
 80031f2:	d14a      	bne.n	800328a <_printf_i+0x1f2>
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	b004      	add	sp, #16
 80031fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	f043 0320 	orr.w	r3, r3, #32
 8003204:	6023      	str	r3, [r4, #0]
 8003206:	4833      	ldr	r0, [pc, #204]	@ (80032d4 <_printf_i+0x23c>)
 8003208:	2778      	movs	r7, #120	@ 0x78
 800320a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	6831      	ldr	r1, [r6, #0]
 8003212:	061f      	lsls	r7, r3, #24
 8003214:	f851 5b04 	ldr.w	r5, [r1], #4
 8003218:	d402      	bmi.n	8003220 <_printf_i+0x188>
 800321a:	065f      	lsls	r7, r3, #25
 800321c:	bf48      	it	mi
 800321e:	b2ad      	uxthmi	r5, r5
 8003220:	6031      	str	r1, [r6, #0]
 8003222:	07d9      	lsls	r1, r3, #31
 8003224:	bf44      	itt	mi
 8003226:	f043 0320 	orrmi.w	r3, r3, #32
 800322a:	6023      	strmi	r3, [r4, #0]
 800322c:	b11d      	cbz	r5, 8003236 <_printf_i+0x19e>
 800322e:	2310      	movs	r3, #16
 8003230:	e7ac      	b.n	800318c <_printf_i+0xf4>
 8003232:	4827      	ldr	r0, [pc, #156]	@ (80032d0 <_printf_i+0x238>)
 8003234:	e7e9      	b.n	800320a <_printf_i+0x172>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	f023 0320 	bic.w	r3, r3, #32
 800323c:	6023      	str	r3, [r4, #0]
 800323e:	e7f6      	b.n	800322e <_printf_i+0x196>
 8003240:	4616      	mov	r6, r2
 8003242:	e7bd      	b.n	80031c0 <_printf_i+0x128>
 8003244:	6833      	ldr	r3, [r6, #0]
 8003246:	6825      	ldr	r5, [r4, #0]
 8003248:	6961      	ldr	r1, [r4, #20]
 800324a:	1d18      	adds	r0, r3, #4
 800324c:	6030      	str	r0, [r6, #0]
 800324e:	062e      	lsls	r6, r5, #24
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	d501      	bpl.n	8003258 <_printf_i+0x1c0>
 8003254:	6019      	str	r1, [r3, #0]
 8003256:	e002      	b.n	800325e <_printf_i+0x1c6>
 8003258:	0668      	lsls	r0, r5, #25
 800325a:	d5fb      	bpl.n	8003254 <_printf_i+0x1bc>
 800325c:	8019      	strh	r1, [r3, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	6123      	str	r3, [r4, #16]
 8003262:	4616      	mov	r6, r2
 8003264:	e7bc      	b.n	80031e0 <_printf_i+0x148>
 8003266:	6833      	ldr	r3, [r6, #0]
 8003268:	1d1a      	adds	r2, r3, #4
 800326a:	6032      	str	r2, [r6, #0]
 800326c:	681e      	ldr	r6, [r3, #0]
 800326e:	6862      	ldr	r2, [r4, #4]
 8003270:	2100      	movs	r1, #0
 8003272:	4630      	mov	r0, r6
 8003274:	f7fc ffb4 	bl	80001e0 <memchr>
 8003278:	b108      	cbz	r0, 800327e <_printf_i+0x1e6>
 800327a:	1b80      	subs	r0, r0, r6
 800327c:	6060      	str	r0, [r4, #4]
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	6123      	str	r3, [r4, #16]
 8003282:	2300      	movs	r3, #0
 8003284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003288:	e7aa      	b.n	80031e0 <_printf_i+0x148>
 800328a:	6923      	ldr	r3, [r4, #16]
 800328c:	4632      	mov	r2, r6
 800328e:	4649      	mov	r1, r9
 8003290:	4640      	mov	r0, r8
 8003292:	47d0      	blx	sl
 8003294:	3001      	adds	r0, #1
 8003296:	d0ad      	beq.n	80031f4 <_printf_i+0x15c>
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	079b      	lsls	r3, r3, #30
 800329c:	d413      	bmi.n	80032c6 <_printf_i+0x22e>
 800329e:	68e0      	ldr	r0, [r4, #12]
 80032a0:	9b03      	ldr	r3, [sp, #12]
 80032a2:	4298      	cmp	r0, r3
 80032a4:	bfb8      	it	lt
 80032a6:	4618      	movlt	r0, r3
 80032a8:	e7a6      	b.n	80031f8 <_printf_i+0x160>
 80032aa:	2301      	movs	r3, #1
 80032ac:	4632      	mov	r2, r6
 80032ae:	4649      	mov	r1, r9
 80032b0:	4640      	mov	r0, r8
 80032b2:	47d0      	blx	sl
 80032b4:	3001      	adds	r0, #1
 80032b6:	d09d      	beq.n	80031f4 <_printf_i+0x15c>
 80032b8:	3501      	adds	r5, #1
 80032ba:	68e3      	ldr	r3, [r4, #12]
 80032bc:	9903      	ldr	r1, [sp, #12]
 80032be:	1a5b      	subs	r3, r3, r1
 80032c0:	42ab      	cmp	r3, r5
 80032c2:	dcf2      	bgt.n	80032aa <_printf_i+0x212>
 80032c4:	e7eb      	b.n	800329e <_printf_i+0x206>
 80032c6:	2500      	movs	r5, #0
 80032c8:	f104 0619 	add.w	r6, r4, #25
 80032cc:	e7f5      	b.n	80032ba <_printf_i+0x222>
 80032ce:	bf00      	nop
 80032d0:	08005702 	.word	0x08005702
 80032d4:	08005713 	.word	0x08005713

080032d8 <std>:
 80032d8:	2300      	movs	r3, #0
 80032da:	b510      	push	{r4, lr}
 80032dc:	4604      	mov	r4, r0
 80032de:	e9c0 3300 	strd	r3, r3, [r0]
 80032e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032e6:	6083      	str	r3, [r0, #8]
 80032e8:	8181      	strh	r1, [r0, #12]
 80032ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80032ec:	81c2      	strh	r2, [r0, #14]
 80032ee:	6183      	str	r3, [r0, #24]
 80032f0:	4619      	mov	r1, r3
 80032f2:	2208      	movs	r2, #8
 80032f4:	305c      	adds	r0, #92	@ 0x5c
 80032f6:	f000 f914 	bl	8003522 <memset>
 80032fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <std+0x58>)
 80032fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80032fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003334 <std+0x5c>)
 8003300:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003302:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <std+0x60>)
 8003304:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003306:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <std+0x64>)
 8003308:	6323      	str	r3, [r4, #48]	@ 0x30
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <std+0x68>)
 800330c:	6224      	str	r4, [r4, #32]
 800330e:	429c      	cmp	r4, r3
 8003310:	d006      	beq.n	8003320 <std+0x48>
 8003312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003316:	4294      	cmp	r4, r2
 8003318:	d002      	beq.n	8003320 <std+0x48>
 800331a:	33d0      	adds	r3, #208	@ 0xd0
 800331c:	429c      	cmp	r4, r3
 800331e:	d105      	bne.n	800332c <std+0x54>
 8003320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003328:	f000 b978 	b.w	800361c <__retarget_lock_init_recursive>
 800332c:	bd10      	pop	{r4, pc}
 800332e:	bf00      	nop
 8003330:	0800349d 	.word	0x0800349d
 8003334:	080034bf 	.word	0x080034bf
 8003338:	080034f7 	.word	0x080034f7
 800333c:	0800351b 	.word	0x0800351b
 8003340:	200006b8 	.word	0x200006b8

08003344 <stdio_exit_handler>:
 8003344:	4a02      	ldr	r2, [pc, #8]	@ (8003350 <stdio_exit_handler+0xc>)
 8003346:	4903      	ldr	r1, [pc, #12]	@ (8003354 <stdio_exit_handler+0x10>)
 8003348:	4803      	ldr	r0, [pc, #12]	@ (8003358 <stdio_exit_handler+0x14>)
 800334a:	f000 b869 	b.w	8003420 <_fwalk_sglue>
 800334e:	bf00      	nop
 8003350:	2000000c 	.word	0x2000000c
 8003354:	08004f7d 	.word	0x08004f7d
 8003358:	2000001c 	.word	0x2000001c

0800335c <cleanup_stdio>:
 800335c:	6841      	ldr	r1, [r0, #4]
 800335e:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <cleanup_stdio+0x34>)
 8003360:	4299      	cmp	r1, r3
 8003362:	b510      	push	{r4, lr}
 8003364:	4604      	mov	r4, r0
 8003366:	d001      	beq.n	800336c <cleanup_stdio+0x10>
 8003368:	f001 fe08 	bl	8004f7c <_fflush_r>
 800336c:	68a1      	ldr	r1, [r4, #8]
 800336e:	4b09      	ldr	r3, [pc, #36]	@ (8003394 <cleanup_stdio+0x38>)
 8003370:	4299      	cmp	r1, r3
 8003372:	d002      	beq.n	800337a <cleanup_stdio+0x1e>
 8003374:	4620      	mov	r0, r4
 8003376:	f001 fe01 	bl	8004f7c <_fflush_r>
 800337a:	68e1      	ldr	r1, [r4, #12]
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <cleanup_stdio+0x3c>)
 800337e:	4299      	cmp	r1, r3
 8003380:	d004      	beq.n	800338c <cleanup_stdio+0x30>
 8003382:	4620      	mov	r0, r4
 8003384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003388:	f001 bdf8 	b.w	8004f7c <_fflush_r>
 800338c:	bd10      	pop	{r4, pc}
 800338e:	bf00      	nop
 8003390:	200006b8 	.word	0x200006b8
 8003394:	20000720 	.word	0x20000720
 8003398:	20000788 	.word	0x20000788

0800339c <global_stdio_init.part.0>:
 800339c:	b510      	push	{r4, lr}
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <global_stdio_init.part.0+0x30>)
 80033a0:	4c0b      	ldr	r4, [pc, #44]	@ (80033d0 <global_stdio_init.part.0+0x34>)
 80033a2:	4a0c      	ldr	r2, [pc, #48]	@ (80033d4 <global_stdio_init.part.0+0x38>)
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	4620      	mov	r0, r4
 80033a8:	2200      	movs	r2, #0
 80033aa:	2104      	movs	r1, #4
 80033ac:	f7ff ff94 	bl	80032d8 <std>
 80033b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80033b4:	2201      	movs	r2, #1
 80033b6:	2109      	movs	r1, #9
 80033b8:	f7ff ff8e 	bl	80032d8 <std>
 80033bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033c0:	2202      	movs	r2, #2
 80033c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c6:	2112      	movs	r1, #18
 80033c8:	f7ff bf86 	b.w	80032d8 <std>
 80033cc:	200007f0 	.word	0x200007f0
 80033d0:	200006b8 	.word	0x200006b8
 80033d4:	08003345 	.word	0x08003345

080033d8 <__sfp_lock_acquire>:
 80033d8:	4801      	ldr	r0, [pc, #4]	@ (80033e0 <__sfp_lock_acquire+0x8>)
 80033da:	f000 b920 	b.w	800361e <__retarget_lock_acquire_recursive>
 80033de:	bf00      	nop
 80033e0:	200007f9 	.word	0x200007f9

080033e4 <__sfp_lock_release>:
 80033e4:	4801      	ldr	r0, [pc, #4]	@ (80033ec <__sfp_lock_release+0x8>)
 80033e6:	f000 b91b 	b.w	8003620 <__retarget_lock_release_recursive>
 80033ea:	bf00      	nop
 80033ec:	200007f9 	.word	0x200007f9

080033f0 <__sinit>:
 80033f0:	b510      	push	{r4, lr}
 80033f2:	4604      	mov	r4, r0
 80033f4:	f7ff fff0 	bl	80033d8 <__sfp_lock_acquire>
 80033f8:	6a23      	ldr	r3, [r4, #32]
 80033fa:	b11b      	cbz	r3, 8003404 <__sinit+0x14>
 80033fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003400:	f7ff bff0 	b.w	80033e4 <__sfp_lock_release>
 8003404:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <__sinit+0x28>)
 8003406:	6223      	str	r3, [r4, #32]
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <__sinit+0x2c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f5      	bne.n	80033fc <__sinit+0xc>
 8003410:	f7ff ffc4 	bl	800339c <global_stdio_init.part.0>
 8003414:	e7f2      	b.n	80033fc <__sinit+0xc>
 8003416:	bf00      	nop
 8003418:	0800335d 	.word	0x0800335d
 800341c:	200007f0 	.word	0x200007f0

08003420 <_fwalk_sglue>:
 8003420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003424:	4607      	mov	r7, r0
 8003426:	4688      	mov	r8, r1
 8003428:	4614      	mov	r4, r2
 800342a:	2600      	movs	r6, #0
 800342c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003430:	f1b9 0901 	subs.w	r9, r9, #1
 8003434:	d505      	bpl.n	8003442 <_fwalk_sglue+0x22>
 8003436:	6824      	ldr	r4, [r4, #0]
 8003438:	2c00      	cmp	r4, #0
 800343a:	d1f7      	bne.n	800342c <_fwalk_sglue+0xc>
 800343c:	4630      	mov	r0, r6
 800343e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003442:	89ab      	ldrh	r3, [r5, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d907      	bls.n	8003458 <_fwalk_sglue+0x38>
 8003448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800344c:	3301      	adds	r3, #1
 800344e:	d003      	beq.n	8003458 <_fwalk_sglue+0x38>
 8003450:	4629      	mov	r1, r5
 8003452:	4638      	mov	r0, r7
 8003454:	47c0      	blx	r8
 8003456:	4306      	orrs	r6, r0
 8003458:	3568      	adds	r5, #104	@ 0x68
 800345a:	e7e9      	b.n	8003430 <_fwalk_sglue+0x10>

0800345c <siprintf>:
 800345c:	b40e      	push	{r1, r2, r3}
 800345e:	b500      	push	{lr}
 8003460:	b09c      	sub	sp, #112	@ 0x70
 8003462:	ab1d      	add	r3, sp, #116	@ 0x74
 8003464:	9002      	str	r0, [sp, #8]
 8003466:	9006      	str	r0, [sp, #24]
 8003468:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800346c:	4809      	ldr	r0, [pc, #36]	@ (8003494 <siprintf+0x38>)
 800346e:	9107      	str	r1, [sp, #28]
 8003470:	9104      	str	r1, [sp, #16]
 8003472:	4909      	ldr	r1, [pc, #36]	@ (8003498 <siprintf+0x3c>)
 8003474:	f853 2b04 	ldr.w	r2, [r3], #4
 8003478:	9105      	str	r1, [sp, #20]
 800347a:	6800      	ldr	r0, [r0, #0]
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	a902      	add	r1, sp, #8
 8003480:	f001 fbfc 	bl	8004c7c <_svfiprintf_r>
 8003484:	9b02      	ldr	r3, [sp, #8]
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	b01c      	add	sp, #112	@ 0x70
 800348c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003490:	b003      	add	sp, #12
 8003492:	4770      	bx	lr
 8003494:	20000018 	.word	0x20000018
 8003498:	ffff0208 	.word	0xffff0208

0800349c <__sread>:
 800349c:	b510      	push	{r4, lr}
 800349e:	460c      	mov	r4, r1
 80034a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a4:	f000 f86c 	bl	8003580 <_read_r>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	bfab      	itete	ge
 80034ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80034ae:	89a3      	ldrhlt	r3, [r4, #12]
 80034b0:	181b      	addge	r3, r3, r0
 80034b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80034b6:	bfac      	ite	ge
 80034b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80034ba:	81a3      	strhlt	r3, [r4, #12]
 80034bc:	bd10      	pop	{r4, pc}

080034be <__swrite>:
 80034be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c2:	461f      	mov	r7, r3
 80034c4:	898b      	ldrh	r3, [r1, #12]
 80034c6:	05db      	lsls	r3, r3, #23
 80034c8:	4605      	mov	r5, r0
 80034ca:	460c      	mov	r4, r1
 80034cc:	4616      	mov	r6, r2
 80034ce:	d505      	bpl.n	80034dc <__swrite+0x1e>
 80034d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d4:	2302      	movs	r3, #2
 80034d6:	2200      	movs	r2, #0
 80034d8:	f000 f840 	bl	800355c <_lseek_r>
 80034dc:	89a3      	ldrh	r3, [r4, #12]
 80034de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034e6:	81a3      	strh	r3, [r4, #12]
 80034e8:	4632      	mov	r2, r6
 80034ea:	463b      	mov	r3, r7
 80034ec:	4628      	mov	r0, r5
 80034ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034f2:	f000 b857 	b.w	80035a4 <_write_r>

080034f6 <__sseek>:
 80034f6:	b510      	push	{r4, lr}
 80034f8:	460c      	mov	r4, r1
 80034fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034fe:	f000 f82d 	bl	800355c <_lseek_r>
 8003502:	1c43      	adds	r3, r0, #1
 8003504:	89a3      	ldrh	r3, [r4, #12]
 8003506:	bf15      	itete	ne
 8003508:	6560      	strne	r0, [r4, #84]	@ 0x54
 800350a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800350e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003512:	81a3      	strheq	r3, [r4, #12]
 8003514:	bf18      	it	ne
 8003516:	81a3      	strhne	r3, [r4, #12]
 8003518:	bd10      	pop	{r4, pc}

0800351a <__sclose>:
 800351a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800351e:	f000 b80d 	b.w	800353c <_close_r>

08003522 <memset>:
 8003522:	4402      	add	r2, r0
 8003524:	4603      	mov	r3, r0
 8003526:	4293      	cmp	r3, r2
 8003528:	d100      	bne.n	800352c <memset+0xa>
 800352a:	4770      	bx	lr
 800352c:	f803 1b01 	strb.w	r1, [r3], #1
 8003530:	e7f9      	b.n	8003526 <memset+0x4>
	...

08003534 <_localeconv_r>:
 8003534:	4800      	ldr	r0, [pc, #0]	@ (8003538 <_localeconv_r+0x4>)
 8003536:	4770      	bx	lr
 8003538:	20000158 	.word	0x20000158

0800353c <_close_r>:
 800353c:	b538      	push	{r3, r4, r5, lr}
 800353e:	4d06      	ldr	r5, [pc, #24]	@ (8003558 <_close_r+0x1c>)
 8003540:	2300      	movs	r3, #0
 8003542:	4604      	mov	r4, r0
 8003544:	4608      	mov	r0, r1
 8003546:	602b      	str	r3, [r5, #0]
 8003548:	f7fd ffea 	bl	8001520 <_close>
 800354c:	1c43      	adds	r3, r0, #1
 800354e:	d102      	bne.n	8003556 <_close_r+0x1a>
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	b103      	cbz	r3, 8003556 <_close_r+0x1a>
 8003554:	6023      	str	r3, [r4, #0]
 8003556:	bd38      	pop	{r3, r4, r5, pc}
 8003558:	200007f4 	.word	0x200007f4

0800355c <_lseek_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4d07      	ldr	r5, [pc, #28]	@ (800357c <_lseek_r+0x20>)
 8003560:	4604      	mov	r4, r0
 8003562:	4608      	mov	r0, r1
 8003564:	4611      	mov	r1, r2
 8003566:	2200      	movs	r2, #0
 8003568:	602a      	str	r2, [r5, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	f7fd ffe4 	bl	8001538 <_lseek>
 8003570:	1c43      	adds	r3, r0, #1
 8003572:	d102      	bne.n	800357a <_lseek_r+0x1e>
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	b103      	cbz	r3, 800357a <_lseek_r+0x1e>
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	bd38      	pop	{r3, r4, r5, pc}
 800357c:	200007f4 	.word	0x200007f4

08003580 <_read_r>:
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	4d07      	ldr	r5, [pc, #28]	@ (80035a0 <_read_r+0x20>)
 8003584:	4604      	mov	r4, r0
 8003586:	4608      	mov	r0, r1
 8003588:	4611      	mov	r1, r2
 800358a:	2200      	movs	r2, #0
 800358c:	602a      	str	r2, [r5, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	f7fd ffaa 	bl	80014e8 <_read>
 8003594:	1c43      	adds	r3, r0, #1
 8003596:	d102      	bne.n	800359e <_read_r+0x1e>
 8003598:	682b      	ldr	r3, [r5, #0]
 800359a:	b103      	cbz	r3, 800359e <_read_r+0x1e>
 800359c:	6023      	str	r3, [r4, #0]
 800359e:	bd38      	pop	{r3, r4, r5, pc}
 80035a0:	200007f4 	.word	0x200007f4

080035a4 <_write_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4d07      	ldr	r5, [pc, #28]	@ (80035c4 <_write_r+0x20>)
 80035a8:	4604      	mov	r4, r0
 80035aa:	4608      	mov	r0, r1
 80035ac:	4611      	mov	r1, r2
 80035ae:	2200      	movs	r2, #0
 80035b0:	602a      	str	r2, [r5, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f7fd ffa6 	bl	8001504 <_write>
 80035b8:	1c43      	adds	r3, r0, #1
 80035ba:	d102      	bne.n	80035c2 <_write_r+0x1e>
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	b103      	cbz	r3, 80035c2 <_write_r+0x1e>
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
 80035c4:	200007f4 	.word	0x200007f4

080035c8 <__errno>:
 80035c8:	4b01      	ldr	r3, [pc, #4]	@ (80035d0 <__errno+0x8>)
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000018 	.word	0x20000018

080035d4 <__libc_init_array>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	4d0d      	ldr	r5, [pc, #52]	@ (800360c <__libc_init_array+0x38>)
 80035d8:	4c0d      	ldr	r4, [pc, #52]	@ (8003610 <__libc_init_array+0x3c>)
 80035da:	1b64      	subs	r4, r4, r5
 80035dc:	10a4      	asrs	r4, r4, #2
 80035de:	2600      	movs	r6, #0
 80035e0:	42a6      	cmp	r6, r4
 80035e2:	d109      	bne.n	80035f8 <__libc_init_array+0x24>
 80035e4:	4d0b      	ldr	r5, [pc, #44]	@ (8003614 <__libc_init_array+0x40>)
 80035e6:	4c0c      	ldr	r4, [pc, #48]	@ (8003618 <__libc_init_array+0x44>)
 80035e8:	f002 f866 	bl	80056b8 <_init>
 80035ec:	1b64      	subs	r4, r4, r5
 80035ee:	10a4      	asrs	r4, r4, #2
 80035f0:	2600      	movs	r6, #0
 80035f2:	42a6      	cmp	r6, r4
 80035f4:	d105      	bne.n	8003602 <__libc_init_array+0x2e>
 80035f6:	bd70      	pop	{r4, r5, r6, pc}
 80035f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fc:	4798      	blx	r3
 80035fe:	3601      	adds	r6, #1
 8003600:	e7ee      	b.n	80035e0 <__libc_init_array+0xc>
 8003602:	f855 3b04 	ldr.w	r3, [r5], #4
 8003606:	4798      	blx	r3
 8003608:	3601      	adds	r6, #1
 800360a:	e7f2      	b.n	80035f2 <__libc_init_array+0x1e>
 800360c:	08005a68 	.word	0x08005a68
 8003610:	08005a68 	.word	0x08005a68
 8003614:	08005a68 	.word	0x08005a68
 8003618:	08005a6c 	.word	0x08005a6c

0800361c <__retarget_lock_init_recursive>:
 800361c:	4770      	bx	lr

0800361e <__retarget_lock_acquire_recursive>:
 800361e:	4770      	bx	lr

08003620 <__retarget_lock_release_recursive>:
 8003620:	4770      	bx	lr

08003622 <quorem>:
 8003622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003626:	6903      	ldr	r3, [r0, #16]
 8003628:	690c      	ldr	r4, [r1, #16]
 800362a:	42a3      	cmp	r3, r4
 800362c:	4607      	mov	r7, r0
 800362e:	db7e      	blt.n	800372e <quorem+0x10c>
 8003630:	3c01      	subs	r4, #1
 8003632:	f101 0814 	add.w	r8, r1, #20
 8003636:	00a3      	lsls	r3, r4, #2
 8003638:	f100 0514 	add.w	r5, r0, #20
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800364c:	3301      	adds	r3, #1
 800364e:	429a      	cmp	r2, r3
 8003650:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003654:	fbb2 f6f3 	udiv	r6, r2, r3
 8003658:	d32e      	bcc.n	80036b8 <quorem+0x96>
 800365a:	f04f 0a00 	mov.w	sl, #0
 800365e:	46c4      	mov	ip, r8
 8003660:	46ae      	mov	lr, r5
 8003662:	46d3      	mov	fp, sl
 8003664:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003668:	b298      	uxth	r0, r3
 800366a:	fb06 a000 	mla	r0, r6, r0, sl
 800366e:	0c02      	lsrs	r2, r0, #16
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	fb06 2303 	mla	r3, r6, r3, r2
 8003676:	f8de 2000 	ldr.w	r2, [lr]
 800367a:	b280      	uxth	r0, r0
 800367c:	b292      	uxth	r2, r2
 800367e:	1a12      	subs	r2, r2, r0
 8003680:	445a      	add	r2, fp
 8003682:	f8de 0000 	ldr.w	r0, [lr]
 8003686:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800368a:	b29b      	uxth	r3, r3
 800368c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003690:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003694:	b292      	uxth	r2, r2
 8003696:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800369a:	45e1      	cmp	r9, ip
 800369c:	f84e 2b04 	str.w	r2, [lr], #4
 80036a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80036a4:	d2de      	bcs.n	8003664 <quorem+0x42>
 80036a6:	9b00      	ldr	r3, [sp, #0]
 80036a8:	58eb      	ldr	r3, [r5, r3]
 80036aa:	b92b      	cbnz	r3, 80036b8 <quorem+0x96>
 80036ac:	9b01      	ldr	r3, [sp, #4]
 80036ae:	3b04      	subs	r3, #4
 80036b0:	429d      	cmp	r5, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	d32f      	bcc.n	8003716 <quorem+0xf4>
 80036b6:	613c      	str	r4, [r7, #16]
 80036b8:	4638      	mov	r0, r7
 80036ba:	f001 f97b 	bl	80049b4 <__mcmp>
 80036be:	2800      	cmp	r0, #0
 80036c0:	db25      	blt.n	800370e <quorem+0xec>
 80036c2:	4629      	mov	r1, r5
 80036c4:	2000      	movs	r0, #0
 80036c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80036ca:	f8d1 c000 	ldr.w	ip, [r1]
 80036ce:	fa1f fe82 	uxth.w	lr, r2
 80036d2:	fa1f f38c 	uxth.w	r3, ip
 80036d6:	eba3 030e 	sub.w	r3, r3, lr
 80036da:	4403      	add	r3, r0
 80036dc:	0c12      	lsrs	r2, r2, #16
 80036de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80036e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036ec:	45c1      	cmp	r9, r8
 80036ee:	f841 3b04 	str.w	r3, [r1], #4
 80036f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80036f6:	d2e6      	bcs.n	80036c6 <quorem+0xa4>
 80036f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80036fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003700:	b922      	cbnz	r2, 800370c <quorem+0xea>
 8003702:	3b04      	subs	r3, #4
 8003704:	429d      	cmp	r5, r3
 8003706:	461a      	mov	r2, r3
 8003708:	d30b      	bcc.n	8003722 <quorem+0x100>
 800370a:	613c      	str	r4, [r7, #16]
 800370c:	3601      	adds	r6, #1
 800370e:	4630      	mov	r0, r6
 8003710:	b003      	add	sp, #12
 8003712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	3b04      	subs	r3, #4
 800371a:	2a00      	cmp	r2, #0
 800371c:	d1cb      	bne.n	80036b6 <quorem+0x94>
 800371e:	3c01      	subs	r4, #1
 8003720:	e7c6      	b.n	80036b0 <quorem+0x8e>
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	3b04      	subs	r3, #4
 8003726:	2a00      	cmp	r2, #0
 8003728:	d1ef      	bne.n	800370a <quorem+0xe8>
 800372a:	3c01      	subs	r4, #1
 800372c:	e7ea      	b.n	8003704 <quorem+0xe2>
 800372e:	2000      	movs	r0, #0
 8003730:	e7ee      	b.n	8003710 <quorem+0xee>
 8003732:	0000      	movs	r0, r0
 8003734:	0000      	movs	r0, r0
	...

08003738 <_dtoa_r>:
 8003738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373c:	69c7      	ldr	r7, [r0, #28]
 800373e:	b099      	sub	sp, #100	@ 0x64
 8003740:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003744:	ec55 4b10 	vmov	r4, r5, d0
 8003748:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800374a:	9109      	str	r1, [sp, #36]	@ 0x24
 800374c:	4683      	mov	fp, r0
 800374e:	920e      	str	r2, [sp, #56]	@ 0x38
 8003750:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003752:	b97f      	cbnz	r7, 8003774 <_dtoa_r+0x3c>
 8003754:	2010      	movs	r0, #16
 8003756:	f000 fdfd 	bl	8004354 <malloc>
 800375a:	4602      	mov	r2, r0
 800375c:	f8cb 001c 	str.w	r0, [fp, #28]
 8003760:	b920      	cbnz	r0, 800376c <_dtoa_r+0x34>
 8003762:	4ba7      	ldr	r3, [pc, #668]	@ (8003a00 <_dtoa_r+0x2c8>)
 8003764:	21ef      	movs	r1, #239	@ 0xef
 8003766:	48a7      	ldr	r0, [pc, #668]	@ (8003a04 <_dtoa_r+0x2cc>)
 8003768:	f001 fc68 	bl	800503c <__assert_func>
 800376c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003770:	6007      	str	r7, [r0, #0]
 8003772:	60c7      	str	r7, [r0, #12]
 8003774:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	b159      	cbz	r1, 8003794 <_dtoa_r+0x5c>
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	604a      	str	r2, [r1, #4]
 8003780:	2301      	movs	r3, #1
 8003782:	4093      	lsls	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
 8003786:	4658      	mov	r0, fp
 8003788:	f000 feda 	bl	8004540 <_Bfree>
 800378c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	1e2b      	subs	r3, r5, #0
 8003796:	bfb9      	ittee	lt
 8003798:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800379c:	9303      	strlt	r3, [sp, #12]
 800379e:	2300      	movge	r3, #0
 80037a0:	6033      	strge	r3, [r6, #0]
 80037a2:	9f03      	ldr	r7, [sp, #12]
 80037a4:	4b98      	ldr	r3, [pc, #608]	@ (8003a08 <_dtoa_r+0x2d0>)
 80037a6:	bfbc      	itt	lt
 80037a8:	2201      	movlt	r2, #1
 80037aa:	6032      	strlt	r2, [r6, #0]
 80037ac:	43bb      	bics	r3, r7
 80037ae:	d112      	bne.n	80037d6 <_dtoa_r+0x9e>
 80037b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80037b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80037bc:	4323      	orrs	r3, r4
 80037be:	f000 854d 	beq.w	800425c <_dtoa_r+0xb24>
 80037c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80037c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003a1c <_dtoa_r+0x2e4>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 854f 	beq.w	800426c <_dtoa_r+0xb34>
 80037ce:	f10a 0303 	add.w	r3, sl, #3
 80037d2:	f000 bd49 	b.w	8004268 <_dtoa_r+0xb30>
 80037d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80037da:	2200      	movs	r2, #0
 80037dc:	ec51 0b17 	vmov	r0, r1, d7
 80037e0:	2300      	movs	r3, #0
 80037e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80037e6:	f7fd f977 	bl	8000ad8 <__aeabi_dcmpeq>
 80037ea:	4680      	mov	r8, r0
 80037ec:	b158      	cbz	r0, 8003806 <_dtoa_r+0xce>
 80037ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80037f0:	2301      	movs	r3, #1
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80037f6:	b113      	cbz	r3, 80037fe <_dtoa_r+0xc6>
 80037f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80037fa:	4b84      	ldr	r3, [pc, #528]	@ (8003a0c <_dtoa_r+0x2d4>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003a20 <_dtoa_r+0x2e8>
 8003802:	f000 bd33 	b.w	800426c <_dtoa_r+0xb34>
 8003806:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800380a:	aa16      	add	r2, sp, #88	@ 0x58
 800380c:	a917      	add	r1, sp, #92	@ 0x5c
 800380e:	4658      	mov	r0, fp
 8003810:	f001 f980 	bl	8004b14 <__d2b>
 8003814:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003818:	4681      	mov	r9, r0
 800381a:	2e00      	cmp	r6, #0
 800381c:	d077      	beq.n	800390e <_dtoa_r+0x1d6>
 800381e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003820:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800382c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003830:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003834:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003838:	4619      	mov	r1, r3
 800383a:	2200      	movs	r2, #0
 800383c:	4b74      	ldr	r3, [pc, #464]	@ (8003a10 <_dtoa_r+0x2d8>)
 800383e:	f7fc fd2b 	bl	8000298 <__aeabi_dsub>
 8003842:	a369      	add	r3, pc, #420	@ (adr r3, 80039e8 <_dtoa_r+0x2b0>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f7fc fede 	bl	8000608 <__aeabi_dmul>
 800384c:	a368      	add	r3, pc, #416	@ (adr r3, 80039f0 <_dtoa_r+0x2b8>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f7fc fd23 	bl	800029c <__adddf3>
 8003856:	4604      	mov	r4, r0
 8003858:	4630      	mov	r0, r6
 800385a:	460d      	mov	r5, r1
 800385c:	f7fc fe6a 	bl	8000534 <__aeabi_i2d>
 8003860:	a365      	add	r3, pc, #404	@ (adr r3, 80039f8 <_dtoa_r+0x2c0>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f7fc fecf 	bl	8000608 <__aeabi_dmul>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4620      	mov	r0, r4
 8003870:	4629      	mov	r1, r5
 8003872:	f7fc fd13 	bl	800029c <__adddf3>
 8003876:	4604      	mov	r4, r0
 8003878:	460d      	mov	r5, r1
 800387a:	f7fd f975 	bl	8000b68 <__aeabi_d2iz>
 800387e:	2200      	movs	r2, #0
 8003880:	4607      	mov	r7, r0
 8003882:	2300      	movs	r3, #0
 8003884:	4620      	mov	r0, r4
 8003886:	4629      	mov	r1, r5
 8003888:	f7fd f930 	bl	8000aec <__aeabi_dcmplt>
 800388c:	b140      	cbz	r0, 80038a0 <_dtoa_r+0x168>
 800388e:	4638      	mov	r0, r7
 8003890:	f7fc fe50 	bl	8000534 <__aeabi_i2d>
 8003894:	4622      	mov	r2, r4
 8003896:	462b      	mov	r3, r5
 8003898:	f7fd f91e 	bl	8000ad8 <__aeabi_dcmpeq>
 800389c:	b900      	cbnz	r0, 80038a0 <_dtoa_r+0x168>
 800389e:	3f01      	subs	r7, #1
 80038a0:	2f16      	cmp	r7, #22
 80038a2:	d851      	bhi.n	8003948 <_dtoa_r+0x210>
 80038a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003a14 <_dtoa_r+0x2dc>)
 80038a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80038b2:	f7fd f91b 	bl	8000aec <__aeabi_dcmplt>
 80038b6:	2800      	cmp	r0, #0
 80038b8:	d048      	beq.n	800394c <_dtoa_r+0x214>
 80038ba:	3f01      	subs	r7, #1
 80038bc:	2300      	movs	r3, #0
 80038be:	9312      	str	r3, [sp, #72]	@ 0x48
 80038c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80038c2:	1b9b      	subs	r3, r3, r6
 80038c4:	1e5a      	subs	r2, r3, #1
 80038c6:	bf44      	itt	mi
 80038c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80038cc:	2300      	movmi	r3, #0
 80038ce:	9208      	str	r2, [sp, #32]
 80038d0:	bf54      	ite	pl
 80038d2:	f04f 0800 	movpl.w	r8, #0
 80038d6:	9308      	strmi	r3, [sp, #32]
 80038d8:	2f00      	cmp	r7, #0
 80038da:	db39      	blt.n	8003950 <_dtoa_r+0x218>
 80038dc:	9b08      	ldr	r3, [sp, #32]
 80038de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80038e0:	443b      	add	r3, r7
 80038e2:	9308      	str	r3, [sp, #32]
 80038e4:	2300      	movs	r3, #0
 80038e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80038e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038ea:	2b09      	cmp	r3, #9
 80038ec:	d864      	bhi.n	80039b8 <_dtoa_r+0x280>
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	bfc4      	itt	gt
 80038f2:	3b04      	subgt	r3, #4
 80038f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80038f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038f8:	f1a3 0302 	sub.w	r3, r3, #2
 80038fc:	bfcc      	ite	gt
 80038fe:	2400      	movgt	r4, #0
 8003900:	2401      	movle	r4, #1
 8003902:	2b03      	cmp	r3, #3
 8003904:	d863      	bhi.n	80039ce <_dtoa_r+0x296>
 8003906:	e8df f003 	tbb	[pc, r3]
 800390a:	372a      	.short	0x372a
 800390c:	5535      	.short	0x5535
 800390e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003912:	441e      	add	r6, r3
 8003914:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003918:	2b20      	cmp	r3, #32
 800391a:	bfc1      	itttt	gt
 800391c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003920:	409f      	lslgt	r7, r3
 8003922:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003926:	fa24 f303 	lsrgt.w	r3, r4, r3
 800392a:	bfd6      	itet	le
 800392c:	f1c3 0320 	rsble	r3, r3, #32
 8003930:	ea47 0003 	orrgt.w	r0, r7, r3
 8003934:	fa04 f003 	lslle.w	r0, r4, r3
 8003938:	f7fc fdec 	bl	8000514 <__aeabi_ui2d>
 800393c:	2201      	movs	r2, #1
 800393e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003942:	3e01      	subs	r6, #1
 8003944:	9214      	str	r2, [sp, #80]	@ 0x50
 8003946:	e777      	b.n	8003838 <_dtoa_r+0x100>
 8003948:	2301      	movs	r3, #1
 800394a:	e7b8      	b.n	80038be <_dtoa_r+0x186>
 800394c:	9012      	str	r0, [sp, #72]	@ 0x48
 800394e:	e7b7      	b.n	80038c0 <_dtoa_r+0x188>
 8003950:	427b      	negs	r3, r7
 8003952:	930a      	str	r3, [sp, #40]	@ 0x28
 8003954:	2300      	movs	r3, #0
 8003956:	eba8 0807 	sub.w	r8, r8, r7
 800395a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800395c:	e7c4      	b.n	80038e8 <_dtoa_r+0x1b0>
 800395e:	2300      	movs	r3, #0
 8003960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003964:	2b00      	cmp	r3, #0
 8003966:	dc35      	bgt.n	80039d4 <_dtoa_r+0x29c>
 8003968:	2301      	movs	r3, #1
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	9307      	str	r3, [sp, #28]
 800396e:	461a      	mov	r2, r3
 8003970:	920e      	str	r2, [sp, #56]	@ 0x38
 8003972:	e00b      	b.n	800398c <_dtoa_r+0x254>
 8003974:	2301      	movs	r3, #1
 8003976:	e7f3      	b.n	8003960 <_dtoa_r+0x228>
 8003978:	2300      	movs	r3, #0
 800397a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800397c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	9307      	str	r3, [sp, #28]
 8003988:	bfb8      	it	lt
 800398a:	2301      	movlt	r3, #1
 800398c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003990:	2100      	movs	r1, #0
 8003992:	2204      	movs	r2, #4
 8003994:	f102 0514 	add.w	r5, r2, #20
 8003998:	429d      	cmp	r5, r3
 800399a:	d91f      	bls.n	80039dc <_dtoa_r+0x2a4>
 800399c:	6041      	str	r1, [r0, #4]
 800399e:	4658      	mov	r0, fp
 80039a0:	f000 fd8e 	bl	80044c0 <_Balloc>
 80039a4:	4682      	mov	sl, r0
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d13c      	bne.n	8003a24 <_dtoa_r+0x2ec>
 80039aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <_dtoa_r+0x2e0>)
 80039ac:	4602      	mov	r2, r0
 80039ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80039b2:	e6d8      	b.n	8003766 <_dtoa_r+0x2e>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e7e0      	b.n	800397a <_dtoa_r+0x242>
 80039b8:	2401      	movs	r4, #1
 80039ba:	2300      	movs	r3, #0
 80039bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80039be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80039c0:	f04f 33ff 	mov.w	r3, #4294967295
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	9307      	str	r3, [sp, #28]
 80039c8:	2200      	movs	r2, #0
 80039ca:	2312      	movs	r3, #18
 80039cc:	e7d0      	b.n	8003970 <_dtoa_r+0x238>
 80039ce:	2301      	movs	r3, #1
 80039d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039d2:	e7f5      	b.n	80039c0 <_dtoa_r+0x288>
 80039d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	9307      	str	r3, [sp, #28]
 80039da:	e7d7      	b.n	800398c <_dtoa_r+0x254>
 80039dc:	3101      	adds	r1, #1
 80039de:	0052      	lsls	r2, r2, #1
 80039e0:	e7d8      	b.n	8003994 <_dtoa_r+0x25c>
 80039e2:	bf00      	nop
 80039e4:	f3af 8000 	nop.w
 80039e8:	636f4361 	.word	0x636f4361
 80039ec:	3fd287a7 	.word	0x3fd287a7
 80039f0:	8b60c8b3 	.word	0x8b60c8b3
 80039f4:	3fc68a28 	.word	0x3fc68a28
 80039f8:	509f79fb 	.word	0x509f79fb
 80039fc:	3fd34413 	.word	0x3fd34413
 8003a00:	08005731 	.word	0x08005731
 8003a04:	08005748 	.word	0x08005748
 8003a08:	7ff00000 	.word	0x7ff00000
 8003a0c:	08005701 	.word	0x08005701
 8003a10:	3ff80000 	.word	0x3ff80000
 8003a14:	08005840 	.word	0x08005840
 8003a18:	080057a0 	.word	0x080057a0
 8003a1c:	0800572d 	.word	0x0800572d
 8003a20:	08005700 	.word	0x08005700
 8003a24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003a28:	6018      	str	r0, [r3, #0]
 8003a2a:	9b07      	ldr	r3, [sp, #28]
 8003a2c:	2b0e      	cmp	r3, #14
 8003a2e:	f200 80a4 	bhi.w	8003b7a <_dtoa_r+0x442>
 8003a32:	2c00      	cmp	r4, #0
 8003a34:	f000 80a1 	beq.w	8003b7a <_dtoa_r+0x442>
 8003a38:	2f00      	cmp	r7, #0
 8003a3a:	dd33      	ble.n	8003aa4 <_dtoa_r+0x36c>
 8003a3c:	4bad      	ldr	r3, [pc, #692]	@ (8003cf4 <_dtoa_r+0x5bc>)
 8003a3e:	f007 020f 	and.w	r2, r7, #15
 8003a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a46:	ed93 7b00 	vldr	d7, [r3]
 8003a4a:	05f8      	lsls	r0, r7, #23
 8003a4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003a50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003a54:	d516      	bpl.n	8003a84 <_dtoa_r+0x34c>
 8003a56:	4ba8      	ldr	r3, [pc, #672]	@ (8003cf8 <_dtoa_r+0x5c0>)
 8003a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003a5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a60:	f7fc fefc 	bl	800085c <__aeabi_ddiv>
 8003a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a68:	f004 040f 	and.w	r4, r4, #15
 8003a6c:	2603      	movs	r6, #3
 8003a6e:	4da2      	ldr	r5, [pc, #648]	@ (8003cf8 <_dtoa_r+0x5c0>)
 8003a70:	b954      	cbnz	r4, 8003a88 <_dtoa_r+0x350>
 8003a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a7a:	f7fc feef 	bl	800085c <__aeabi_ddiv>
 8003a7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a82:	e028      	b.n	8003ad6 <_dtoa_r+0x39e>
 8003a84:	2602      	movs	r6, #2
 8003a86:	e7f2      	b.n	8003a6e <_dtoa_r+0x336>
 8003a88:	07e1      	lsls	r1, r4, #31
 8003a8a:	d508      	bpl.n	8003a9e <_dtoa_r+0x366>
 8003a8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003a94:	f7fc fdb8 	bl	8000608 <__aeabi_dmul>
 8003a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a9c:	3601      	adds	r6, #1
 8003a9e:	1064      	asrs	r4, r4, #1
 8003aa0:	3508      	adds	r5, #8
 8003aa2:	e7e5      	b.n	8003a70 <_dtoa_r+0x338>
 8003aa4:	f000 80d2 	beq.w	8003c4c <_dtoa_r+0x514>
 8003aa8:	427c      	negs	r4, r7
 8003aaa:	4b92      	ldr	r3, [pc, #584]	@ (8003cf4 <_dtoa_r+0x5bc>)
 8003aac:	4d92      	ldr	r5, [pc, #584]	@ (8003cf8 <_dtoa_r+0x5c0>)
 8003aae:	f004 020f 	and.w	r2, r4, #15
 8003ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003abe:	f7fc fda3 	bl	8000608 <__aeabi_dmul>
 8003ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ac6:	1124      	asrs	r4, r4, #4
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2602      	movs	r6, #2
 8003acc:	2c00      	cmp	r4, #0
 8003ace:	f040 80b2 	bne.w	8003c36 <_dtoa_r+0x4fe>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1d3      	bne.n	8003a7e <_dtoa_r+0x346>
 8003ad6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003ad8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80b7 	beq.w	8003c50 <_dtoa_r+0x518>
 8003ae2:	4b86      	ldr	r3, [pc, #536]	@ (8003cfc <_dtoa_r+0x5c4>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	4629      	mov	r1, r5
 8003aea:	f7fc ffff 	bl	8000aec <__aeabi_dcmplt>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	f000 80ae 	beq.w	8003c50 <_dtoa_r+0x518>
 8003af4:	9b07      	ldr	r3, [sp, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80aa 	beq.w	8003c50 <_dtoa_r+0x518>
 8003afc:	9b00      	ldr	r3, [sp, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	dd37      	ble.n	8003b72 <_dtoa_r+0x43a>
 8003b02:	1e7b      	subs	r3, r7, #1
 8003b04:	9304      	str	r3, [sp, #16]
 8003b06:	4620      	mov	r0, r4
 8003b08:	4b7d      	ldr	r3, [pc, #500]	@ (8003d00 <_dtoa_r+0x5c8>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	f7fc fd7b 	bl	8000608 <__aeabi_dmul>
 8003b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b16:	9c00      	ldr	r4, [sp, #0]
 8003b18:	3601      	adds	r6, #1
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	f7fc fd0a 	bl	8000534 <__aeabi_i2d>
 8003b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b24:	f7fc fd70 	bl	8000608 <__aeabi_dmul>
 8003b28:	4b76      	ldr	r3, [pc, #472]	@ (8003d04 <_dtoa_r+0x5cc>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f7fc fbb6 	bl	800029c <__adddf3>
 8003b30:	4605      	mov	r5, r0
 8003b32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003b36:	2c00      	cmp	r4, #0
 8003b38:	f040 808d 	bne.w	8003c56 <_dtoa_r+0x51e>
 8003b3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b40:	4b71      	ldr	r3, [pc, #452]	@ (8003d08 <_dtoa_r+0x5d0>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	f7fc fba8 	bl	8000298 <__aeabi_dsub>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b50:	462a      	mov	r2, r5
 8003b52:	4633      	mov	r3, r6
 8003b54:	f7fc ffe8 	bl	8000b28 <__aeabi_dcmpgt>
 8003b58:	2800      	cmp	r0, #0
 8003b5a:	f040 828b 	bne.w	8004074 <_dtoa_r+0x93c>
 8003b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b62:	462a      	mov	r2, r5
 8003b64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003b68:	f7fc ffc0 	bl	8000aec <__aeabi_dcmplt>
 8003b6c:	2800      	cmp	r0, #0
 8003b6e:	f040 8128 	bne.w	8003dc2 <_dtoa_r+0x68a>
 8003b72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003b76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003b7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f2c0 815a 	blt.w	8003e36 <_dtoa_r+0x6fe>
 8003b82:	2f0e      	cmp	r7, #14
 8003b84:	f300 8157 	bgt.w	8003e36 <_dtoa_r+0x6fe>
 8003b88:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf4 <_dtoa_r+0x5bc>)
 8003b8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003b8e:	ed93 7b00 	vldr	d7, [r3]
 8003b92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	ed8d 7b00 	vstr	d7, [sp]
 8003b9a:	da03      	bge.n	8003ba4 <_dtoa_r+0x46c>
 8003b9c:	9b07      	ldr	r3, [sp, #28]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f340 8101 	ble.w	8003da6 <_dtoa_r+0x66e>
 8003ba4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003ba8:	4656      	mov	r6, sl
 8003baa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	f7fc fe53 	bl	800085c <__aeabi_ddiv>
 8003bb6:	f7fc ffd7 	bl	8000b68 <__aeabi_d2iz>
 8003bba:	4680      	mov	r8, r0
 8003bbc:	f7fc fcba 	bl	8000534 <__aeabi_i2d>
 8003bc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bc4:	f7fc fd20 	bl	8000608 <__aeabi_dmul>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4620      	mov	r0, r4
 8003bce:	4629      	mov	r1, r5
 8003bd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003bd4:	f7fc fb60 	bl	8000298 <__aeabi_dsub>
 8003bd8:	f806 4b01 	strb.w	r4, [r6], #1
 8003bdc:	9d07      	ldr	r5, [sp, #28]
 8003bde:	eba6 040a 	sub.w	r4, r6, sl
 8003be2:	42a5      	cmp	r5, r4
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	f040 8117 	bne.w	8003e1a <_dtoa_r+0x6e2>
 8003bec:	f7fc fb56 	bl	800029c <__adddf3>
 8003bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	460d      	mov	r5, r1
 8003bf8:	f7fc ff96 	bl	8000b28 <__aeabi_dcmpgt>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	f040 80f9 	bne.w	8003df4 <_dtoa_r+0x6bc>
 8003c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c06:	4620      	mov	r0, r4
 8003c08:	4629      	mov	r1, r5
 8003c0a:	f7fc ff65 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c0e:	b118      	cbz	r0, 8003c18 <_dtoa_r+0x4e0>
 8003c10:	f018 0f01 	tst.w	r8, #1
 8003c14:	f040 80ee 	bne.w	8003df4 <_dtoa_r+0x6bc>
 8003c18:	4649      	mov	r1, r9
 8003c1a:	4658      	mov	r0, fp
 8003c1c:	f000 fc90 	bl	8004540 <_Bfree>
 8003c20:	2300      	movs	r3, #0
 8003c22:	7033      	strb	r3, [r6, #0]
 8003c24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003c26:	3701      	adds	r7, #1
 8003c28:	601f      	str	r7, [r3, #0]
 8003c2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 831d 	beq.w	800426c <_dtoa_r+0xb34>
 8003c32:	601e      	str	r6, [r3, #0]
 8003c34:	e31a      	b.n	800426c <_dtoa_r+0xb34>
 8003c36:	07e2      	lsls	r2, r4, #31
 8003c38:	d505      	bpl.n	8003c46 <_dtoa_r+0x50e>
 8003c3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c3e:	f7fc fce3 	bl	8000608 <__aeabi_dmul>
 8003c42:	3601      	adds	r6, #1
 8003c44:	2301      	movs	r3, #1
 8003c46:	1064      	asrs	r4, r4, #1
 8003c48:	3508      	adds	r5, #8
 8003c4a:	e73f      	b.n	8003acc <_dtoa_r+0x394>
 8003c4c:	2602      	movs	r6, #2
 8003c4e:	e742      	b.n	8003ad6 <_dtoa_r+0x39e>
 8003c50:	9c07      	ldr	r4, [sp, #28]
 8003c52:	9704      	str	r7, [sp, #16]
 8003c54:	e761      	b.n	8003b1a <_dtoa_r+0x3e2>
 8003c56:	4b27      	ldr	r3, [pc, #156]	@ (8003cf4 <_dtoa_r+0x5bc>)
 8003c58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003c5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003c5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003c62:	4454      	add	r4, sl
 8003c64:	2900      	cmp	r1, #0
 8003c66:	d053      	beq.n	8003d10 <_dtoa_r+0x5d8>
 8003c68:	4928      	ldr	r1, [pc, #160]	@ (8003d0c <_dtoa_r+0x5d4>)
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f7fc fdf6 	bl	800085c <__aeabi_ddiv>
 8003c70:	4633      	mov	r3, r6
 8003c72:	462a      	mov	r2, r5
 8003c74:	f7fc fb10 	bl	8000298 <__aeabi_dsub>
 8003c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003c7c:	4656      	mov	r6, sl
 8003c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c82:	f7fc ff71 	bl	8000b68 <__aeabi_d2iz>
 8003c86:	4605      	mov	r5, r0
 8003c88:	f7fc fc54 	bl	8000534 <__aeabi_i2d>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c94:	f7fc fb00 	bl	8000298 <__aeabi_dsub>
 8003c98:	3530      	adds	r5, #48	@ 0x30
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ca2:	f806 5b01 	strb.w	r5, [r6], #1
 8003ca6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003caa:	f7fc ff1f 	bl	8000aec <__aeabi_dcmplt>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d171      	bne.n	8003d96 <_dtoa_r+0x65e>
 8003cb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cb6:	4911      	ldr	r1, [pc, #68]	@ (8003cfc <_dtoa_r+0x5c4>)
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f7fc faed 	bl	8000298 <__aeabi_dsub>
 8003cbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003cc2:	f7fc ff13 	bl	8000aec <__aeabi_dcmplt>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	f040 8095 	bne.w	8003df6 <_dtoa_r+0x6be>
 8003ccc:	42a6      	cmp	r6, r4
 8003cce:	f43f af50 	beq.w	8003b72 <_dtoa_r+0x43a>
 8003cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d00 <_dtoa_r+0x5c8>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f7fc fc95 	bl	8000608 <__aeabi_dmul>
 8003cde:	4b08      	ldr	r3, [pc, #32]	@ (8003d00 <_dtoa_r+0x5c8>)
 8003ce0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cea:	f7fc fc8d 	bl	8000608 <__aeabi_dmul>
 8003cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cf2:	e7c4      	b.n	8003c7e <_dtoa_r+0x546>
 8003cf4:	08005840 	.word	0x08005840
 8003cf8:	08005818 	.word	0x08005818
 8003cfc:	3ff00000 	.word	0x3ff00000
 8003d00:	40240000 	.word	0x40240000
 8003d04:	401c0000 	.word	0x401c0000
 8003d08:	40140000 	.word	0x40140000
 8003d0c:	3fe00000 	.word	0x3fe00000
 8003d10:	4631      	mov	r1, r6
 8003d12:	4628      	mov	r0, r5
 8003d14:	f7fc fc78 	bl	8000608 <__aeabi_dmul>
 8003d18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003d1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8003d1e:	4656      	mov	r6, sl
 8003d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d24:	f7fc ff20 	bl	8000b68 <__aeabi_d2iz>
 8003d28:	4605      	mov	r5, r0
 8003d2a:	f7fc fc03 	bl	8000534 <__aeabi_i2d>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d36:	f7fc faaf 	bl	8000298 <__aeabi_dsub>
 8003d3a:	3530      	adds	r5, #48	@ 0x30
 8003d3c:	f806 5b01 	strb.w	r5, [r6], #1
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	42a6      	cmp	r6, r4
 8003d46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	d124      	bne.n	8003d9a <_dtoa_r+0x662>
 8003d50:	4bac      	ldr	r3, [pc, #688]	@ (8004004 <_dtoa_r+0x8cc>)
 8003d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003d56:	f7fc faa1 	bl	800029c <__adddf3>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d62:	f7fc fee1 	bl	8000b28 <__aeabi_dcmpgt>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d145      	bne.n	8003df6 <_dtoa_r+0x6be>
 8003d6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003d6e:	49a5      	ldr	r1, [pc, #660]	@ (8004004 <_dtoa_r+0x8cc>)
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fc fa91 	bl	8000298 <__aeabi_dsub>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d7e:	f7fc feb5 	bl	8000aec <__aeabi_dcmplt>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	f43f aef5 	beq.w	8003b72 <_dtoa_r+0x43a>
 8003d88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8003d8a:	1e73      	subs	r3, r6, #1
 8003d8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8003d8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003d92:	2b30      	cmp	r3, #48	@ 0x30
 8003d94:	d0f8      	beq.n	8003d88 <_dtoa_r+0x650>
 8003d96:	9f04      	ldr	r7, [sp, #16]
 8003d98:	e73e      	b.n	8003c18 <_dtoa_r+0x4e0>
 8003d9a:	4b9b      	ldr	r3, [pc, #620]	@ (8004008 <_dtoa_r+0x8d0>)
 8003d9c:	f7fc fc34 	bl	8000608 <__aeabi_dmul>
 8003da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003da4:	e7bc      	b.n	8003d20 <_dtoa_r+0x5e8>
 8003da6:	d10c      	bne.n	8003dc2 <_dtoa_r+0x68a>
 8003da8:	4b98      	ldr	r3, [pc, #608]	@ (800400c <_dtoa_r+0x8d4>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003db0:	f7fc fc2a 	bl	8000608 <__aeabi_dmul>
 8003db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003db8:	f7fc feac 	bl	8000b14 <__aeabi_dcmpge>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	f000 8157 	beq.w	8004070 <_dtoa_r+0x938>
 8003dc2:	2400      	movs	r4, #0
 8003dc4:	4625      	mov	r5, r4
 8003dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	9304      	str	r3, [sp, #16]
 8003dcc:	4656      	mov	r6, sl
 8003dce:	2700      	movs	r7, #0
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	4658      	mov	r0, fp
 8003dd4:	f000 fbb4 	bl	8004540 <_Bfree>
 8003dd8:	2d00      	cmp	r5, #0
 8003dda:	d0dc      	beq.n	8003d96 <_dtoa_r+0x65e>
 8003ddc:	b12f      	cbz	r7, 8003dea <_dtoa_r+0x6b2>
 8003dde:	42af      	cmp	r7, r5
 8003de0:	d003      	beq.n	8003dea <_dtoa_r+0x6b2>
 8003de2:	4639      	mov	r1, r7
 8003de4:	4658      	mov	r0, fp
 8003de6:	f000 fbab 	bl	8004540 <_Bfree>
 8003dea:	4629      	mov	r1, r5
 8003dec:	4658      	mov	r0, fp
 8003dee:	f000 fba7 	bl	8004540 <_Bfree>
 8003df2:	e7d0      	b.n	8003d96 <_dtoa_r+0x65e>
 8003df4:	9704      	str	r7, [sp, #16]
 8003df6:	4633      	mov	r3, r6
 8003df8:	461e      	mov	r6, r3
 8003dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003dfe:	2a39      	cmp	r2, #57	@ 0x39
 8003e00:	d107      	bne.n	8003e12 <_dtoa_r+0x6da>
 8003e02:	459a      	cmp	sl, r3
 8003e04:	d1f8      	bne.n	8003df8 <_dtoa_r+0x6c0>
 8003e06:	9a04      	ldr	r2, [sp, #16]
 8003e08:	3201      	adds	r2, #1
 8003e0a:	9204      	str	r2, [sp, #16]
 8003e0c:	2230      	movs	r2, #48	@ 0x30
 8003e0e:	f88a 2000 	strb.w	r2, [sl]
 8003e12:	781a      	ldrb	r2, [r3, #0]
 8003e14:	3201      	adds	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	e7bd      	b.n	8003d96 <_dtoa_r+0x65e>
 8003e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8004008 <_dtoa_r+0x8d0>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f7fc fbf3 	bl	8000608 <__aeabi_dmul>
 8003e22:	2200      	movs	r2, #0
 8003e24:	2300      	movs	r3, #0
 8003e26:	4604      	mov	r4, r0
 8003e28:	460d      	mov	r5, r1
 8003e2a:	f7fc fe55 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	f43f aebb 	beq.w	8003baa <_dtoa_r+0x472>
 8003e34:	e6f0      	b.n	8003c18 <_dtoa_r+0x4e0>
 8003e36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003e38:	2a00      	cmp	r2, #0
 8003e3a:	f000 80db 	beq.w	8003ff4 <_dtoa_r+0x8bc>
 8003e3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e40:	2a01      	cmp	r2, #1
 8003e42:	f300 80bf 	bgt.w	8003fc4 <_dtoa_r+0x88c>
 8003e46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003e48:	2a00      	cmp	r2, #0
 8003e4a:	f000 80b7 	beq.w	8003fbc <_dtoa_r+0x884>
 8003e4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003e52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003e54:	4646      	mov	r6, r8
 8003e56:	9a08      	ldr	r2, [sp, #32]
 8003e58:	2101      	movs	r1, #1
 8003e5a:	441a      	add	r2, r3
 8003e5c:	4658      	mov	r0, fp
 8003e5e:	4498      	add	r8, r3
 8003e60:	9208      	str	r2, [sp, #32]
 8003e62:	f000 fc21 	bl	80046a8 <__i2b>
 8003e66:	4605      	mov	r5, r0
 8003e68:	b15e      	cbz	r6, 8003e82 <_dtoa_r+0x74a>
 8003e6a:	9b08      	ldr	r3, [sp, #32]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	dd08      	ble.n	8003e82 <_dtoa_r+0x74a>
 8003e70:	42b3      	cmp	r3, r6
 8003e72:	9a08      	ldr	r2, [sp, #32]
 8003e74:	bfa8      	it	ge
 8003e76:	4633      	movge	r3, r6
 8003e78:	eba8 0803 	sub.w	r8, r8, r3
 8003e7c:	1af6      	subs	r6, r6, r3
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	9308      	str	r3, [sp, #32]
 8003e82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003e84:	b1f3      	cbz	r3, 8003ec4 <_dtoa_r+0x78c>
 8003e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80b7 	beq.w	8003ffc <_dtoa_r+0x8c4>
 8003e8e:	b18c      	cbz	r4, 8003eb4 <_dtoa_r+0x77c>
 8003e90:	4629      	mov	r1, r5
 8003e92:	4622      	mov	r2, r4
 8003e94:	4658      	mov	r0, fp
 8003e96:	f000 fcc7 	bl	8004828 <__pow5mult>
 8003e9a:	464a      	mov	r2, r9
 8003e9c:	4601      	mov	r1, r0
 8003e9e:	4605      	mov	r5, r0
 8003ea0:	4658      	mov	r0, fp
 8003ea2:	f000 fc17 	bl	80046d4 <__multiply>
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	9004      	str	r0, [sp, #16]
 8003eaa:	4658      	mov	r0, fp
 8003eac:	f000 fb48 	bl	8004540 <_Bfree>
 8003eb0:	9b04      	ldr	r3, [sp, #16]
 8003eb2:	4699      	mov	r9, r3
 8003eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003eb6:	1b1a      	subs	r2, r3, r4
 8003eb8:	d004      	beq.n	8003ec4 <_dtoa_r+0x78c>
 8003eba:	4649      	mov	r1, r9
 8003ebc:	4658      	mov	r0, fp
 8003ebe:	f000 fcb3 	bl	8004828 <__pow5mult>
 8003ec2:	4681      	mov	r9, r0
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	4658      	mov	r0, fp
 8003ec8:	f000 fbee 	bl	80046a8 <__i2b>
 8003ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003ece:	4604      	mov	r4, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 81cf 	beq.w	8004274 <_dtoa_r+0xb3c>
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4601      	mov	r1, r0
 8003eda:	4658      	mov	r0, fp
 8003edc:	f000 fca4 	bl	8004828 <__pow5mult>
 8003ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	f300 8095 	bgt.w	8004014 <_dtoa_r+0x8dc>
 8003eea:	9b02      	ldr	r3, [sp, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f040 8087 	bne.w	8004000 <_dtoa_r+0x8c8>
 8003ef2:	9b03      	ldr	r3, [sp, #12]
 8003ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f040 8089 	bne.w	8004010 <_dtoa_r+0x8d8>
 8003efe:	9b03      	ldr	r3, [sp, #12]
 8003f00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f04:	0d1b      	lsrs	r3, r3, #20
 8003f06:	051b      	lsls	r3, r3, #20
 8003f08:	b12b      	cbz	r3, 8003f16 <_dtoa_r+0x7de>
 8003f0a:	9b08      	ldr	r3, [sp, #32]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	9308      	str	r3, [sp, #32]
 8003f10:	f108 0801 	add.w	r8, r8, #1
 8003f14:	2301      	movs	r3, #1
 8003f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 81b0 	beq.w	8004280 <_dtoa_r+0xb48>
 8003f20:	6923      	ldr	r3, [r4, #16]
 8003f22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003f26:	6918      	ldr	r0, [r3, #16]
 8003f28:	f000 fb72 	bl	8004610 <__hi0bits>
 8003f2c:	f1c0 0020 	rsb	r0, r0, #32
 8003f30:	9b08      	ldr	r3, [sp, #32]
 8003f32:	4418      	add	r0, r3
 8003f34:	f010 001f 	ands.w	r0, r0, #31
 8003f38:	d077      	beq.n	800402a <_dtoa_r+0x8f2>
 8003f3a:	f1c0 0320 	rsb	r3, r0, #32
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	dd6b      	ble.n	800401a <_dtoa_r+0x8e2>
 8003f42:	9b08      	ldr	r3, [sp, #32]
 8003f44:	f1c0 001c 	rsb	r0, r0, #28
 8003f48:	4403      	add	r3, r0
 8003f4a:	4480      	add	r8, r0
 8003f4c:	4406      	add	r6, r0
 8003f4e:	9308      	str	r3, [sp, #32]
 8003f50:	f1b8 0f00 	cmp.w	r8, #0
 8003f54:	dd05      	ble.n	8003f62 <_dtoa_r+0x82a>
 8003f56:	4649      	mov	r1, r9
 8003f58:	4642      	mov	r2, r8
 8003f5a:	4658      	mov	r0, fp
 8003f5c:	f000 fcbe 	bl	80048dc <__lshift>
 8003f60:	4681      	mov	r9, r0
 8003f62:	9b08      	ldr	r3, [sp, #32]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	dd05      	ble.n	8003f74 <_dtoa_r+0x83c>
 8003f68:	4621      	mov	r1, r4
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4658      	mov	r0, fp
 8003f6e:	f000 fcb5 	bl	80048dc <__lshift>
 8003f72:	4604      	mov	r4, r0
 8003f74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d059      	beq.n	800402e <_dtoa_r+0x8f6>
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	4648      	mov	r0, r9
 8003f7e:	f000 fd19 	bl	80049b4 <__mcmp>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	da53      	bge.n	800402e <_dtoa_r+0x8f6>
 8003f86:	1e7b      	subs	r3, r7, #1
 8003f88:	9304      	str	r3, [sp, #16]
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	220a      	movs	r2, #10
 8003f90:	4658      	mov	r0, fp
 8003f92:	f000 faf7 	bl	8004584 <__multadd>
 8003f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003f98:	4681      	mov	r9, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8172 	beq.w	8004284 <_dtoa_r+0xb4c>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	220a      	movs	r2, #10
 8003fa6:	4658      	mov	r0, fp
 8003fa8:	f000 faec 	bl	8004584 <__multadd>
 8003fac:	9b00      	ldr	r3, [sp, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	dc67      	bgt.n	8004084 <_dtoa_r+0x94c>
 8003fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	dc41      	bgt.n	800403e <_dtoa_r+0x906>
 8003fba:	e063      	b.n	8004084 <_dtoa_r+0x94c>
 8003fbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003fbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003fc2:	e746      	b.n	8003e52 <_dtoa_r+0x71a>
 8003fc4:	9b07      	ldr	r3, [sp, #28]
 8003fc6:	1e5c      	subs	r4, r3, #1
 8003fc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fca:	42a3      	cmp	r3, r4
 8003fcc:	bfbf      	itttt	lt
 8003fce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8003fd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8003fd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8003fd4:	1ae3      	sublt	r3, r4, r3
 8003fd6:	bfb4      	ite	lt
 8003fd8:	18d2      	addlt	r2, r2, r3
 8003fda:	1b1c      	subge	r4, r3, r4
 8003fdc:	9b07      	ldr	r3, [sp, #28]
 8003fde:	bfbc      	itt	lt
 8003fe0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8003fe2:	2400      	movlt	r4, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bfb5      	itete	lt
 8003fe8:	eba8 0603 	sublt.w	r6, r8, r3
 8003fec:	9b07      	ldrge	r3, [sp, #28]
 8003fee:	2300      	movlt	r3, #0
 8003ff0:	4646      	movge	r6, r8
 8003ff2:	e730      	b.n	8003e56 <_dtoa_r+0x71e>
 8003ff4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003ff6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003ff8:	4646      	mov	r6, r8
 8003ffa:	e735      	b.n	8003e68 <_dtoa_r+0x730>
 8003ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ffe:	e75c      	b.n	8003eba <_dtoa_r+0x782>
 8004000:	2300      	movs	r3, #0
 8004002:	e788      	b.n	8003f16 <_dtoa_r+0x7de>
 8004004:	3fe00000 	.word	0x3fe00000
 8004008:	40240000 	.word	0x40240000
 800400c:	40140000 	.word	0x40140000
 8004010:	9b02      	ldr	r3, [sp, #8]
 8004012:	e780      	b.n	8003f16 <_dtoa_r+0x7de>
 8004014:	2300      	movs	r3, #0
 8004016:	930a      	str	r3, [sp, #40]	@ 0x28
 8004018:	e782      	b.n	8003f20 <_dtoa_r+0x7e8>
 800401a:	d099      	beq.n	8003f50 <_dtoa_r+0x818>
 800401c:	9a08      	ldr	r2, [sp, #32]
 800401e:	331c      	adds	r3, #28
 8004020:	441a      	add	r2, r3
 8004022:	4498      	add	r8, r3
 8004024:	441e      	add	r6, r3
 8004026:	9208      	str	r2, [sp, #32]
 8004028:	e792      	b.n	8003f50 <_dtoa_r+0x818>
 800402a:	4603      	mov	r3, r0
 800402c:	e7f6      	b.n	800401c <_dtoa_r+0x8e4>
 800402e:	9b07      	ldr	r3, [sp, #28]
 8004030:	9704      	str	r7, [sp, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	dc20      	bgt.n	8004078 <_dtoa_r+0x940>
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800403a:	2b02      	cmp	r3, #2
 800403c:	dd1e      	ble.n	800407c <_dtoa_r+0x944>
 800403e:	9b00      	ldr	r3, [sp, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f47f aec0 	bne.w	8003dc6 <_dtoa_r+0x68e>
 8004046:	4621      	mov	r1, r4
 8004048:	2205      	movs	r2, #5
 800404a:	4658      	mov	r0, fp
 800404c:	f000 fa9a 	bl	8004584 <__multadd>
 8004050:	4601      	mov	r1, r0
 8004052:	4604      	mov	r4, r0
 8004054:	4648      	mov	r0, r9
 8004056:	f000 fcad 	bl	80049b4 <__mcmp>
 800405a:	2800      	cmp	r0, #0
 800405c:	f77f aeb3 	ble.w	8003dc6 <_dtoa_r+0x68e>
 8004060:	4656      	mov	r6, sl
 8004062:	2331      	movs	r3, #49	@ 0x31
 8004064:	f806 3b01 	strb.w	r3, [r6], #1
 8004068:	9b04      	ldr	r3, [sp, #16]
 800406a:	3301      	adds	r3, #1
 800406c:	9304      	str	r3, [sp, #16]
 800406e:	e6ae      	b.n	8003dce <_dtoa_r+0x696>
 8004070:	9c07      	ldr	r4, [sp, #28]
 8004072:	9704      	str	r7, [sp, #16]
 8004074:	4625      	mov	r5, r4
 8004076:	e7f3      	b.n	8004060 <_dtoa_r+0x928>
 8004078:	9b07      	ldr	r3, [sp, #28]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 8104 	beq.w	800428c <_dtoa_r+0xb54>
 8004084:	2e00      	cmp	r6, #0
 8004086:	dd05      	ble.n	8004094 <_dtoa_r+0x95c>
 8004088:	4629      	mov	r1, r5
 800408a:	4632      	mov	r2, r6
 800408c:	4658      	mov	r0, fp
 800408e:	f000 fc25 	bl	80048dc <__lshift>
 8004092:	4605      	mov	r5, r0
 8004094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d05a      	beq.n	8004150 <_dtoa_r+0xa18>
 800409a:	6869      	ldr	r1, [r5, #4]
 800409c:	4658      	mov	r0, fp
 800409e:	f000 fa0f 	bl	80044c0 <_Balloc>
 80040a2:	4606      	mov	r6, r0
 80040a4:	b928      	cbnz	r0, 80040b2 <_dtoa_r+0x97a>
 80040a6:	4b84      	ldr	r3, [pc, #528]	@ (80042b8 <_dtoa_r+0xb80>)
 80040a8:	4602      	mov	r2, r0
 80040aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80040ae:	f7ff bb5a 	b.w	8003766 <_dtoa_r+0x2e>
 80040b2:	692a      	ldr	r2, [r5, #16]
 80040b4:	3202      	adds	r2, #2
 80040b6:	0092      	lsls	r2, r2, #2
 80040b8:	f105 010c 	add.w	r1, r5, #12
 80040bc:	300c      	adds	r0, #12
 80040be:	f000 ffaf 	bl	8005020 <memcpy>
 80040c2:	2201      	movs	r2, #1
 80040c4:	4631      	mov	r1, r6
 80040c6:	4658      	mov	r0, fp
 80040c8:	f000 fc08 	bl	80048dc <__lshift>
 80040cc:	f10a 0301 	add.w	r3, sl, #1
 80040d0:	9307      	str	r3, [sp, #28]
 80040d2:	9b00      	ldr	r3, [sp, #0]
 80040d4:	4453      	add	r3, sl
 80040d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80040d8:	9b02      	ldr	r3, [sp, #8]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	462f      	mov	r7, r5
 80040e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80040e2:	4605      	mov	r5, r0
 80040e4:	9b07      	ldr	r3, [sp, #28]
 80040e6:	4621      	mov	r1, r4
 80040e8:	3b01      	subs	r3, #1
 80040ea:	4648      	mov	r0, r9
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	f7ff fa98 	bl	8003622 <quorem>
 80040f2:	4639      	mov	r1, r7
 80040f4:	9002      	str	r0, [sp, #8]
 80040f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80040fa:	4648      	mov	r0, r9
 80040fc:	f000 fc5a 	bl	80049b4 <__mcmp>
 8004100:	462a      	mov	r2, r5
 8004102:	9008      	str	r0, [sp, #32]
 8004104:	4621      	mov	r1, r4
 8004106:	4658      	mov	r0, fp
 8004108:	f000 fc70 	bl	80049ec <__mdiff>
 800410c:	68c2      	ldr	r2, [r0, #12]
 800410e:	4606      	mov	r6, r0
 8004110:	bb02      	cbnz	r2, 8004154 <_dtoa_r+0xa1c>
 8004112:	4601      	mov	r1, r0
 8004114:	4648      	mov	r0, r9
 8004116:	f000 fc4d 	bl	80049b4 <__mcmp>
 800411a:	4602      	mov	r2, r0
 800411c:	4631      	mov	r1, r6
 800411e:	4658      	mov	r0, fp
 8004120:	920e      	str	r2, [sp, #56]	@ 0x38
 8004122:	f000 fa0d 	bl	8004540 <_Bfree>
 8004126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004128:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800412a:	9e07      	ldr	r6, [sp, #28]
 800412c:	ea43 0102 	orr.w	r1, r3, r2
 8004130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004132:	4319      	orrs	r1, r3
 8004134:	d110      	bne.n	8004158 <_dtoa_r+0xa20>
 8004136:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800413a:	d029      	beq.n	8004190 <_dtoa_r+0xa58>
 800413c:	9b08      	ldr	r3, [sp, #32]
 800413e:	2b00      	cmp	r3, #0
 8004140:	dd02      	ble.n	8004148 <_dtoa_r+0xa10>
 8004142:	9b02      	ldr	r3, [sp, #8]
 8004144:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004148:	9b00      	ldr	r3, [sp, #0]
 800414a:	f883 8000 	strb.w	r8, [r3]
 800414e:	e63f      	b.n	8003dd0 <_dtoa_r+0x698>
 8004150:	4628      	mov	r0, r5
 8004152:	e7bb      	b.n	80040cc <_dtoa_r+0x994>
 8004154:	2201      	movs	r2, #1
 8004156:	e7e1      	b.n	800411c <_dtoa_r+0x9e4>
 8004158:	9b08      	ldr	r3, [sp, #32]
 800415a:	2b00      	cmp	r3, #0
 800415c:	db04      	blt.n	8004168 <_dtoa_r+0xa30>
 800415e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004160:	430b      	orrs	r3, r1
 8004162:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004164:	430b      	orrs	r3, r1
 8004166:	d120      	bne.n	80041aa <_dtoa_r+0xa72>
 8004168:	2a00      	cmp	r2, #0
 800416a:	dded      	ble.n	8004148 <_dtoa_r+0xa10>
 800416c:	4649      	mov	r1, r9
 800416e:	2201      	movs	r2, #1
 8004170:	4658      	mov	r0, fp
 8004172:	f000 fbb3 	bl	80048dc <__lshift>
 8004176:	4621      	mov	r1, r4
 8004178:	4681      	mov	r9, r0
 800417a:	f000 fc1b 	bl	80049b4 <__mcmp>
 800417e:	2800      	cmp	r0, #0
 8004180:	dc03      	bgt.n	800418a <_dtoa_r+0xa52>
 8004182:	d1e1      	bne.n	8004148 <_dtoa_r+0xa10>
 8004184:	f018 0f01 	tst.w	r8, #1
 8004188:	d0de      	beq.n	8004148 <_dtoa_r+0xa10>
 800418a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800418e:	d1d8      	bne.n	8004142 <_dtoa_r+0xa0a>
 8004190:	9a00      	ldr	r2, [sp, #0]
 8004192:	2339      	movs	r3, #57	@ 0x39
 8004194:	7013      	strb	r3, [r2, #0]
 8004196:	4633      	mov	r3, r6
 8004198:	461e      	mov	r6, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80041a0:	2a39      	cmp	r2, #57	@ 0x39
 80041a2:	d052      	beq.n	800424a <_dtoa_r+0xb12>
 80041a4:	3201      	adds	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	e612      	b.n	8003dd0 <_dtoa_r+0x698>
 80041aa:	2a00      	cmp	r2, #0
 80041ac:	dd07      	ble.n	80041be <_dtoa_r+0xa86>
 80041ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80041b2:	d0ed      	beq.n	8004190 <_dtoa_r+0xa58>
 80041b4:	9a00      	ldr	r2, [sp, #0]
 80041b6:	f108 0301 	add.w	r3, r8, #1
 80041ba:	7013      	strb	r3, [r2, #0]
 80041bc:	e608      	b.n	8003dd0 <_dtoa_r+0x698>
 80041be:	9b07      	ldr	r3, [sp, #28]
 80041c0:	9a07      	ldr	r2, [sp, #28]
 80041c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80041c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d028      	beq.n	800421e <_dtoa_r+0xae6>
 80041cc:	4649      	mov	r1, r9
 80041ce:	2300      	movs	r3, #0
 80041d0:	220a      	movs	r2, #10
 80041d2:	4658      	mov	r0, fp
 80041d4:	f000 f9d6 	bl	8004584 <__multadd>
 80041d8:	42af      	cmp	r7, r5
 80041da:	4681      	mov	r9, r0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	f04f 020a 	mov.w	r2, #10
 80041e4:	4639      	mov	r1, r7
 80041e6:	4658      	mov	r0, fp
 80041e8:	d107      	bne.n	80041fa <_dtoa_r+0xac2>
 80041ea:	f000 f9cb 	bl	8004584 <__multadd>
 80041ee:	4607      	mov	r7, r0
 80041f0:	4605      	mov	r5, r0
 80041f2:	9b07      	ldr	r3, [sp, #28]
 80041f4:	3301      	adds	r3, #1
 80041f6:	9307      	str	r3, [sp, #28]
 80041f8:	e774      	b.n	80040e4 <_dtoa_r+0x9ac>
 80041fa:	f000 f9c3 	bl	8004584 <__multadd>
 80041fe:	4629      	mov	r1, r5
 8004200:	4607      	mov	r7, r0
 8004202:	2300      	movs	r3, #0
 8004204:	220a      	movs	r2, #10
 8004206:	4658      	mov	r0, fp
 8004208:	f000 f9bc 	bl	8004584 <__multadd>
 800420c:	4605      	mov	r5, r0
 800420e:	e7f0      	b.n	80041f2 <_dtoa_r+0xaba>
 8004210:	9b00      	ldr	r3, [sp, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	bfcc      	ite	gt
 8004216:	461e      	movgt	r6, r3
 8004218:	2601      	movle	r6, #1
 800421a:	4456      	add	r6, sl
 800421c:	2700      	movs	r7, #0
 800421e:	4649      	mov	r1, r9
 8004220:	2201      	movs	r2, #1
 8004222:	4658      	mov	r0, fp
 8004224:	f000 fb5a 	bl	80048dc <__lshift>
 8004228:	4621      	mov	r1, r4
 800422a:	4681      	mov	r9, r0
 800422c:	f000 fbc2 	bl	80049b4 <__mcmp>
 8004230:	2800      	cmp	r0, #0
 8004232:	dcb0      	bgt.n	8004196 <_dtoa_r+0xa5e>
 8004234:	d102      	bne.n	800423c <_dtoa_r+0xb04>
 8004236:	f018 0f01 	tst.w	r8, #1
 800423a:	d1ac      	bne.n	8004196 <_dtoa_r+0xa5e>
 800423c:	4633      	mov	r3, r6
 800423e:	461e      	mov	r6, r3
 8004240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004244:	2a30      	cmp	r2, #48	@ 0x30
 8004246:	d0fa      	beq.n	800423e <_dtoa_r+0xb06>
 8004248:	e5c2      	b.n	8003dd0 <_dtoa_r+0x698>
 800424a:	459a      	cmp	sl, r3
 800424c:	d1a4      	bne.n	8004198 <_dtoa_r+0xa60>
 800424e:	9b04      	ldr	r3, [sp, #16]
 8004250:	3301      	adds	r3, #1
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	2331      	movs	r3, #49	@ 0x31
 8004256:	f88a 3000 	strb.w	r3, [sl]
 800425a:	e5b9      	b.n	8003dd0 <_dtoa_r+0x698>
 800425c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800425e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80042bc <_dtoa_r+0xb84>
 8004262:	b11b      	cbz	r3, 800426c <_dtoa_r+0xb34>
 8004264:	f10a 0308 	add.w	r3, sl, #8
 8004268:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	4650      	mov	r0, sl
 800426e:	b019      	add	sp, #100	@ 0x64
 8004270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004276:	2b01      	cmp	r3, #1
 8004278:	f77f ae37 	ble.w	8003eea <_dtoa_r+0x7b2>
 800427c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800427e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004280:	2001      	movs	r0, #1
 8004282:	e655      	b.n	8003f30 <_dtoa_r+0x7f8>
 8004284:	9b00      	ldr	r3, [sp, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f77f aed6 	ble.w	8004038 <_dtoa_r+0x900>
 800428c:	4656      	mov	r6, sl
 800428e:	4621      	mov	r1, r4
 8004290:	4648      	mov	r0, r9
 8004292:	f7ff f9c6 	bl	8003622 <quorem>
 8004296:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800429a:	f806 8b01 	strb.w	r8, [r6], #1
 800429e:	9b00      	ldr	r3, [sp, #0]
 80042a0:	eba6 020a 	sub.w	r2, r6, sl
 80042a4:	4293      	cmp	r3, r2
 80042a6:	ddb3      	ble.n	8004210 <_dtoa_r+0xad8>
 80042a8:	4649      	mov	r1, r9
 80042aa:	2300      	movs	r3, #0
 80042ac:	220a      	movs	r2, #10
 80042ae:	4658      	mov	r0, fp
 80042b0:	f000 f968 	bl	8004584 <__multadd>
 80042b4:	4681      	mov	r9, r0
 80042b6:	e7ea      	b.n	800428e <_dtoa_r+0xb56>
 80042b8:	080057a0 	.word	0x080057a0
 80042bc:	08005724 	.word	0x08005724

080042c0 <_free_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4605      	mov	r5, r0
 80042c4:	2900      	cmp	r1, #0
 80042c6:	d041      	beq.n	800434c <_free_r+0x8c>
 80042c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042cc:	1f0c      	subs	r4, r1, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	bfb8      	it	lt
 80042d2:	18e4      	addlt	r4, r4, r3
 80042d4:	f000 f8e8 	bl	80044a8 <__malloc_lock>
 80042d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004350 <_free_r+0x90>)
 80042da:	6813      	ldr	r3, [r2, #0]
 80042dc:	b933      	cbnz	r3, 80042ec <_free_r+0x2c>
 80042de:	6063      	str	r3, [r4, #4]
 80042e0:	6014      	str	r4, [r2, #0]
 80042e2:	4628      	mov	r0, r5
 80042e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042e8:	f000 b8e4 	b.w	80044b4 <__malloc_unlock>
 80042ec:	42a3      	cmp	r3, r4
 80042ee:	d908      	bls.n	8004302 <_free_r+0x42>
 80042f0:	6820      	ldr	r0, [r4, #0]
 80042f2:	1821      	adds	r1, r4, r0
 80042f4:	428b      	cmp	r3, r1
 80042f6:	bf01      	itttt	eq
 80042f8:	6819      	ldreq	r1, [r3, #0]
 80042fa:	685b      	ldreq	r3, [r3, #4]
 80042fc:	1809      	addeq	r1, r1, r0
 80042fe:	6021      	streq	r1, [r4, #0]
 8004300:	e7ed      	b.n	80042de <_free_r+0x1e>
 8004302:	461a      	mov	r2, r3
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	b10b      	cbz	r3, 800430c <_free_r+0x4c>
 8004308:	42a3      	cmp	r3, r4
 800430a:	d9fa      	bls.n	8004302 <_free_r+0x42>
 800430c:	6811      	ldr	r1, [r2, #0]
 800430e:	1850      	adds	r0, r2, r1
 8004310:	42a0      	cmp	r0, r4
 8004312:	d10b      	bne.n	800432c <_free_r+0x6c>
 8004314:	6820      	ldr	r0, [r4, #0]
 8004316:	4401      	add	r1, r0
 8004318:	1850      	adds	r0, r2, r1
 800431a:	4283      	cmp	r3, r0
 800431c:	6011      	str	r1, [r2, #0]
 800431e:	d1e0      	bne.n	80042e2 <_free_r+0x22>
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	6053      	str	r3, [r2, #4]
 8004326:	4408      	add	r0, r1
 8004328:	6010      	str	r0, [r2, #0]
 800432a:	e7da      	b.n	80042e2 <_free_r+0x22>
 800432c:	d902      	bls.n	8004334 <_free_r+0x74>
 800432e:	230c      	movs	r3, #12
 8004330:	602b      	str	r3, [r5, #0]
 8004332:	e7d6      	b.n	80042e2 <_free_r+0x22>
 8004334:	6820      	ldr	r0, [r4, #0]
 8004336:	1821      	adds	r1, r4, r0
 8004338:	428b      	cmp	r3, r1
 800433a:	bf04      	itt	eq
 800433c:	6819      	ldreq	r1, [r3, #0]
 800433e:	685b      	ldreq	r3, [r3, #4]
 8004340:	6063      	str	r3, [r4, #4]
 8004342:	bf04      	itt	eq
 8004344:	1809      	addeq	r1, r1, r0
 8004346:	6021      	streq	r1, [r4, #0]
 8004348:	6054      	str	r4, [r2, #4]
 800434a:	e7ca      	b.n	80042e2 <_free_r+0x22>
 800434c:	bd38      	pop	{r3, r4, r5, pc}
 800434e:	bf00      	nop
 8004350:	20000800 	.word	0x20000800

08004354 <malloc>:
 8004354:	4b02      	ldr	r3, [pc, #8]	@ (8004360 <malloc+0xc>)
 8004356:	4601      	mov	r1, r0
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	f000 b825 	b.w	80043a8 <_malloc_r>
 800435e:	bf00      	nop
 8004360:	20000018 	.word	0x20000018

08004364 <sbrk_aligned>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4e0f      	ldr	r6, [pc, #60]	@ (80043a4 <sbrk_aligned+0x40>)
 8004368:	460c      	mov	r4, r1
 800436a:	6831      	ldr	r1, [r6, #0]
 800436c:	4605      	mov	r5, r0
 800436e:	b911      	cbnz	r1, 8004376 <sbrk_aligned+0x12>
 8004370:	f000 fe46 	bl	8005000 <_sbrk_r>
 8004374:	6030      	str	r0, [r6, #0]
 8004376:	4621      	mov	r1, r4
 8004378:	4628      	mov	r0, r5
 800437a:	f000 fe41 	bl	8005000 <_sbrk_r>
 800437e:	1c43      	adds	r3, r0, #1
 8004380:	d103      	bne.n	800438a <sbrk_aligned+0x26>
 8004382:	f04f 34ff 	mov.w	r4, #4294967295
 8004386:	4620      	mov	r0, r4
 8004388:	bd70      	pop	{r4, r5, r6, pc}
 800438a:	1cc4      	adds	r4, r0, #3
 800438c:	f024 0403 	bic.w	r4, r4, #3
 8004390:	42a0      	cmp	r0, r4
 8004392:	d0f8      	beq.n	8004386 <sbrk_aligned+0x22>
 8004394:	1a21      	subs	r1, r4, r0
 8004396:	4628      	mov	r0, r5
 8004398:	f000 fe32 	bl	8005000 <_sbrk_r>
 800439c:	3001      	adds	r0, #1
 800439e:	d1f2      	bne.n	8004386 <sbrk_aligned+0x22>
 80043a0:	e7ef      	b.n	8004382 <sbrk_aligned+0x1e>
 80043a2:	bf00      	nop
 80043a4:	200007fc 	.word	0x200007fc

080043a8 <_malloc_r>:
 80043a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043ac:	1ccd      	adds	r5, r1, #3
 80043ae:	f025 0503 	bic.w	r5, r5, #3
 80043b2:	3508      	adds	r5, #8
 80043b4:	2d0c      	cmp	r5, #12
 80043b6:	bf38      	it	cc
 80043b8:	250c      	movcc	r5, #12
 80043ba:	2d00      	cmp	r5, #0
 80043bc:	4606      	mov	r6, r0
 80043be:	db01      	blt.n	80043c4 <_malloc_r+0x1c>
 80043c0:	42a9      	cmp	r1, r5
 80043c2:	d904      	bls.n	80043ce <_malloc_r+0x26>
 80043c4:	230c      	movs	r3, #12
 80043c6:	6033      	str	r3, [r6, #0]
 80043c8:	2000      	movs	r0, #0
 80043ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044a4 <_malloc_r+0xfc>
 80043d2:	f000 f869 	bl	80044a8 <__malloc_lock>
 80043d6:	f8d8 3000 	ldr.w	r3, [r8]
 80043da:	461c      	mov	r4, r3
 80043dc:	bb44      	cbnz	r4, 8004430 <_malloc_r+0x88>
 80043de:	4629      	mov	r1, r5
 80043e0:	4630      	mov	r0, r6
 80043e2:	f7ff ffbf 	bl	8004364 <sbrk_aligned>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	4604      	mov	r4, r0
 80043ea:	d158      	bne.n	800449e <_malloc_r+0xf6>
 80043ec:	f8d8 4000 	ldr.w	r4, [r8]
 80043f0:	4627      	mov	r7, r4
 80043f2:	2f00      	cmp	r7, #0
 80043f4:	d143      	bne.n	800447e <_malloc_r+0xd6>
 80043f6:	2c00      	cmp	r4, #0
 80043f8:	d04b      	beq.n	8004492 <_malloc_r+0xea>
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	4639      	mov	r1, r7
 80043fe:	4630      	mov	r0, r6
 8004400:	eb04 0903 	add.w	r9, r4, r3
 8004404:	f000 fdfc 	bl	8005000 <_sbrk_r>
 8004408:	4581      	cmp	r9, r0
 800440a:	d142      	bne.n	8004492 <_malloc_r+0xea>
 800440c:	6821      	ldr	r1, [r4, #0]
 800440e:	1a6d      	subs	r5, r5, r1
 8004410:	4629      	mov	r1, r5
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff ffa6 	bl	8004364 <sbrk_aligned>
 8004418:	3001      	adds	r0, #1
 800441a:	d03a      	beq.n	8004492 <_malloc_r+0xea>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	442b      	add	r3, r5
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	f8d8 3000 	ldr.w	r3, [r8]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	bb62      	cbnz	r2, 8004484 <_malloc_r+0xdc>
 800442a:	f8c8 7000 	str.w	r7, [r8]
 800442e:	e00f      	b.n	8004450 <_malloc_r+0xa8>
 8004430:	6822      	ldr	r2, [r4, #0]
 8004432:	1b52      	subs	r2, r2, r5
 8004434:	d420      	bmi.n	8004478 <_malloc_r+0xd0>
 8004436:	2a0b      	cmp	r2, #11
 8004438:	d917      	bls.n	800446a <_malloc_r+0xc2>
 800443a:	1961      	adds	r1, r4, r5
 800443c:	42a3      	cmp	r3, r4
 800443e:	6025      	str	r5, [r4, #0]
 8004440:	bf18      	it	ne
 8004442:	6059      	strne	r1, [r3, #4]
 8004444:	6863      	ldr	r3, [r4, #4]
 8004446:	bf08      	it	eq
 8004448:	f8c8 1000 	streq.w	r1, [r8]
 800444c:	5162      	str	r2, [r4, r5]
 800444e:	604b      	str	r3, [r1, #4]
 8004450:	4630      	mov	r0, r6
 8004452:	f000 f82f 	bl	80044b4 <__malloc_unlock>
 8004456:	f104 000b 	add.w	r0, r4, #11
 800445a:	1d23      	adds	r3, r4, #4
 800445c:	f020 0007 	bic.w	r0, r0, #7
 8004460:	1ac2      	subs	r2, r0, r3
 8004462:	bf1c      	itt	ne
 8004464:	1a1b      	subne	r3, r3, r0
 8004466:	50a3      	strne	r3, [r4, r2]
 8004468:	e7af      	b.n	80043ca <_malloc_r+0x22>
 800446a:	6862      	ldr	r2, [r4, #4]
 800446c:	42a3      	cmp	r3, r4
 800446e:	bf0c      	ite	eq
 8004470:	f8c8 2000 	streq.w	r2, [r8]
 8004474:	605a      	strne	r2, [r3, #4]
 8004476:	e7eb      	b.n	8004450 <_malloc_r+0xa8>
 8004478:	4623      	mov	r3, r4
 800447a:	6864      	ldr	r4, [r4, #4]
 800447c:	e7ae      	b.n	80043dc <_malloc_r+0x34>
 800447e:	463c      	mov	r4, r7
 8004480:	687f      	ldr	r7, [r7, #4]
 8004482:	e7b6      	b.n	80043f2 <_malloc_r+0x4a>
 8004484:	461a      	mov	r2, r3
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	42a3      	cmp	r3, r4
 800448a:	d1fb      	bne.n	8004484 <_malloc_r+0xdc>
 800448c:	2300      	movs	r3, #0
 800448e:	6053      	str	r3, [r2, #4]
 8004490:	e7de      	b.n	8004450 <_malloc_r+0xa8>
 8004492:	230c      	movs	r3, #12
 8004494:	6033      	str	r3, [r6, #0]
 8004496:	4630      	mov	r0, r6
 8004498:	f000 f80c 	bl	80044b4 <__malloc_unlock>
 800449c:	e794      	b.n	80043c8 <_malloc_r+0x20>
 800449e:	6005      	str	r5, [r0, #0]
 80044a0:	e7d6      	b.n	8004450 <_malloc_r+0xa8>
 80044a2:	bf00      	nop
 80044a4:	20000800 	.word	0x20000800

080044a8 <__malloc_lock>:
 80044a8:	4801      	ldr	r0, [pc, #4]	@ (80044b0 <__malloc_lock+0x8>)
 80044aa:	f7ff b8b8 	b.w	800361e <__retarget_lock_acquire_recursive>
 80044ae:	bf00      	nop
 80044b0:	200007f8 	.word	0x200007f8

080044b4 <__malloc_unlock>:
 80044b4:	4801      	ldr	r0, [pc, #4]	@ (80044bc <__malloc_unlock+0x8>)
 80044b6:	f7ff b8b3 	b.w	8003620 <__retarget_lock_release_recursive>
 80044ba:	bf00      	nop
 80044bc:	200007f8 	.word	0x200007f8

080044c0 <_Balloc>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	69c6      	ldr	r6, [r0, #28]
 80044c4:	4604      	mov	r4, r0
 80044c6:	460d      	mov	r5, r1
 80044c8:	b976      	cbnz	r6, 80044e8 <_Balloc+0x28>
 80044ca:	2010      	movs	r0, #16
 80044cc:	f7ff ff42 	bl	8004354 <malloc>
 80044d0:	4602      	mov	r2, r0
 80044d2:	61e0      	str	r0, [r4, #28]
 80044d4:	b920      	cbnz	r0, 80044e0 <_Balloc+0x20>
 80044d6:	4b18      	ldr	r3, [pc, #96]	@ (8004538 <_Balloc+0x78>)
 80044d8:	4818      	ldr	r0, [pc, #96]	@ (800453c <_Balloc+0x7c>)
 80044da:	216b      	movs	r1, #107	@ 0x6b
 80044dc:	f000 fdae 	bl	800503c <__assert_func>
 80044e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80044e4:	6006      	str	r6, [r0, #0]
 80044e6:	60c6      	str	r6, [r0, #12]
 80044e8:	69e6      	ldr	r6, [r4, #28]
 80044ea:	68f3      	ldr	r3, [r6, #12]
 80044ec:	b183      	cbz	r3, 8004510 <_Balloc+0x50>
 80044ee:	69e3      	ldr	r3, [r4, #28]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80044f6:	b9b8      	cbnz	r0, 8004528 <_Balloc+0x68>
 80044f8:	2101      	movs	r1, #1
 80044fa:	fa01 f605 	lsl.w	r6, r1, r5
 80044fe:	1d72      	adds	r2, r6, #5
 8004500:	0092      	lsls	r2, r2, #2
 8004502:	4620      	mov	r0, r4
 8004504:	f000 fdb8 	bl	8005078 <_calloc_r>
 8004508:	b160      	cbz	r0, 8004524 <_Balloc+0x64>
 800450a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800450e:	e00e      	b.n	800452e <_Balloc+0x6e>
 8004510:	2221      	movs	r2, #33	@ 0x21
 8004512:	2104      	movs	r1, #4
 8004514:	4620      	mov	r0, r4
 8004516:	f000 fdaf 	bl	8005078 <_calloc_r>
 800451a:	69e3      	ldr	r3, [r4, #28]
 800451c:	60f0      	str	r0, [r6, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e4      	bne.n	80044ee <_Balloc+0x2e>
 8004524:	2000      	movs	r0, #0
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	6802      	ldr	r2, [r0, #0]
 800452a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800452e:	2300      	movs	r3, #0
 8004530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004534:	e7f7      	b.n	8004526 <_Balloc+0x66>
 8004536:	bf00      	nop
 8004538:	08005731 	.word	0x08005731
 800453c:	080057b1 	.word	0x080057b1

08004540 <_Bfree>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	69c6      	ldr	r6, [r0, #28]
 8004544:	4605      	mov	r5, r0
 8004546:	460c      	mov	r4, r1
 8004548:	b976      	cbnz	r6, 8004568 <_Bfree+0x28>
 800454a:	2010      	movs	r0, #16
 800454c:	f7ff ff02 	bl	8004354 <malloc>
 8004550:	4602      	mov	r2, r0
 8004552:	61e8      	str	r0, [r5, #28]
 8004554:	b920      	cbnz	r0, 8004560 <_Bfree+0x20>
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <_Bfree+0x3c>)
 8004558:	4809      	ldr	r0, [pc, #36]	@ (8004580 <_Bfree+0x40>)
 800455a:	218f      	movs	r1, #143	@ 0x8f
 800455c:	f000 fd6e 	bl	800503c <__assert_func>
 8004560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004564:	6006      	str	r6, [r0, #0]
 8004566:	60c6      	str	r6, [r0, #12]
 8004568:	b13c      	cbz	r4, 800457a <_Bfree+0x3a>
 800456a:	69eb      	ldr	r3, [r5, #28]
 800456c:	6862      	ldr	r2, [r4, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004574:	6021      	str	r1, [r4, #0]
 8004576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	08005731 	.word	0x08005731
 8004580:	080057b1 	.word	0x080057b1

08004584 <__multadd>:
 8004584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004588:	690d      	ldr	r5, [r1, #16]
 800458a:	4607      	mov	r7, r0
 800458c:	460c      	mov	r4, r1
 800458e:	461e      	mov	r6, r3
 8004590:	f101 0c14 	add.w	ip, r1, #20
 8004594:	2000      	movs	r0, #0
 8004596:	f8dc 3000 	ldr.w	r3, [ip]
 800459a:	b299      	uxth	r1, r3
 800459c:	fb02 6101 	mla	r1, r2, r1, r6
 80045a0:	0c1e      	lsrs	r6, r3, #16
 80045a2:	0c0b      	lsrs	r3, r1, #16
 80045a4:	fb02 3306 	mla	r3, r2, r6, r3
 80045a8:	b289      	uxth	r1, r1
 80045aa:	3001      	adds	r0, #1
 80045ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80045b0:	4285      	cmp	r5, r0
 80045b2:	f84c 1b04 	str.w	r1, [ip], #4
 80045b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80045ba:	dcec      	bgt.n	8004596 <__multadd+0x12>
 80045bc:	b30e      	cbz	r6, 8004602 <__multadd+0x7e>
 80045be:	68a3      	ldr	r3, [r4, #8]
 80045c0:	42ab      	cmp	r3, r5
 80045c2:	dc19      	bgt.n	80045f8 <__multadd+0x74>
 80045c4:	6861      	ldr	r1, [r4, #4]
 80045c6:	4638      	mov	r0, r7
 80045c8:	3101      	adds	r1, #1
 80045ca:	f7ff ff79 	bl	80044c0 <_Balloc>
 80045ce:	4680      	mov	r8, r0
 80045d0:	b928      	cbnz	r0, 80045de <__multadd+0x5a>
 80045d2:	4602      	mov	r2, r0
 80045d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004608 <__multadd+0x84>)
 80045d6:	480d      	ldr	r0, [pc, #52]	@ (800460c <__multadd+0x88>)
 80045d8:	21ba      	movs	r1, #186	@ 0xba
 80045da:	f000 fd2f 	bl	800503c <__assert_func>
 80045de:	6922      	ldr	r2, [r4, #16]
 80045e0:	3202      	adds	r2, #2
 80045e2:	f104 010c 	add.w	r1, r4, #12
 80045e6:	0092      	lsls	r2, r2, #2
 80045e8:	300c      	adds	r0, #12
 80045ea:	f000 fd19 	bl	8005020 <memcpy>
 80045ee:	4621      	mov	r1, r4
 80045f0:	4638      	mov	r0, r7
 80045f2:	f7ff ffa5 	bl	8004540 <_Bfree>
 80045f6:	4644      	mov	r4, r8
 80045f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80045fc:	3501      	adds	r5, #1
 80045fe:	615e      	str	r6, [r3, #20]
 8004600:	6125      	str	r5, [r4, #16]
 8004602:	4620      	mov	r0, r4
 8004604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004608:	080057a0 	.word	0x080057a0
 800460c:	080057b1 	.word	0x080057b1

08004610 <__hi0bits>:
 8004610:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004614:	4603      	mov	r3, r0
 8004616:	bf36      	itet	cc
 8004618:	0403      	lslcc	r3, r0, #16
 800461a:	2000      	movcs	r0, #0
 800461c:	2010      	movcc	r0, #16
 800461e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004622:	bf3c      	itt	cc
 8004624:	021b      	lslcc	r3, r3, #8
 8004626:	3008      	addcc	r0, #8
 8004628:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800462c:	bf3c      	itt	cc
 800462e:	011b      	lslcc	r3, r3, #4
 8004630:	3004      	addcc	r0, #4
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004636:	bf3c      	itt	cc
 8004638:	009b      	lslcc	r3, r3, #2
 800463a:	3002      	addcc	r0, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	db05      	blt.n	800464c <__hi0bits+0x3c>
 8004640:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004644:	f100 0001 	add.w	r0, r0, #1
 8004648:	bf08      	it	eq
 800464a:	2020      	moveq	r0, #32
 800464c:	4770      	bx	lr

0800464e <__lo0bits>:
 800464e:	6803      	ldr	r3, [r0, #0]
 8004650:	4602      	mov	r2, r0
 8004652:	f013 0007 	ands.w	r0, r3, #7
 8004656:	d00b      	beq.n	8004670 <__lo0bits+0x22>
 8004658:	07d9      	lsls	r1, r3, #31
 800465a:	d421      	bmi.n	80046a0 <__lo0bits+0x52>
 800465c:	0798      	lsls	r0, r3, #30
 800465e:	bf49      	itett	mi
 8004660:	085b      	lsrmi	r3, r3, #1
 8004662:	089b      	lsrpl	r3, r3, #2
 8004664:	2001      	movmi	r0, #1
 8004666:	6013      	strmi	r3, [r2, #0]
 8004668:	bf5c      	itt	pl
 800466a:	6013      	strpl	r3, [r2, #0]
 800466c:	2002      	movpl	r0, #2
 800466e:	4770      	bx	lr
 8004670:	b299      	uxth	r1, r3
 8004672:	b909      	cbnz	r1, 8004678 <__lo0bits+0x2a>
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	2010      	movs	r0, #16
 8004678:	b2d9      	uxtb	r1, r3
 800467a:	b909      	cbnz	r1, 8004680 <__lo0bits+0x32>
 800467c:	3008      	adds	r0, #8
 800467e:	0a1b      	lsrs	r3, r3, #8
 8004680:	0719      	lsls	r1, r3, #28
 8004682:	bf04      	itt	eq
 8004684:	091b      	lsreq	r3, r3, #4
 8004686:	3004      	addeq	r0, #4
 8004688:	0799      	lsls	r1, r3, #30
 800468a:	bf04      	itt	eq
 800468c:	089b      	lsreq	r3, r3, #2
 800468e:	3002      	addeq	r0, #2
 8004690:	07d9      	lsls	r1, r3, #31
 8004692:	d403      	bmi.n	800469c <__lo0bits+0x4e>
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	f100 0001 	add.w	r0, r0, #1
 800469a:	d003      	beq.n	80046a4 <__lo0bits+0x56>
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	4770      	bx	lr
 80046a0:	2000      	movs	r0, #0
 80046a2:	4770      	bx	lr
 80046a4:	2020      	movs	r0, #32
 80046a6:	4770      	bx	lr

080046a8 <__i2b>:
 80046a8:	b510      	push	{r4, lr}
 80046aa:	460c      	mov	r4, r1
 80046ac:	2101      	movs	r1, #1
 80046ae:	f7ff ff07 	bl	80044c0 <_Balloc>
 80046b2:	4602      	mov	r2, r0
 80046b4:	b928      	cbnz	r0, 80046c2 <__i2b+0x1a>
 80046b6:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <__i2b+0x24>)
 80046b8:	4805      	ldr	r0, [pc, #20]	@ (80046d0 <__i2b+0x28>)
 80046ba:	f240 1145 	movw	r1, #325	@ 0x145
 80046be:	f000 fcbd 	bl	800503c <__assert_func>
 80046c2:	2301      	movs	r3, #1
 80046c4:	6144      	str	r4, [r0, #20]
 80046c6:	6103      	str	r3, [r0, #16]
 80046c8:	bd10      	pop	{r4, pc}
 80046ca:	bf00      	nop
 80046cc:	080057a0 	.word	0x080057a0
 80046d0:	080057b1 	.word	0x080057b1

080046d4 <__multiply>:
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d8:	4614      	mov	r4, r2
 80046da:	690a      	ldr	r2, [r1, #16]
 80046dc:	6923      	ldr	r3, [r4, #16]
 80046de:	429a      	cmp	r2, r3
 80046e0:	bfa8      	it	ge
 80046e2:	4623      	movge	r3, r4
 80046e4:	460f      	mov	r7, r1
 80046e6:	bfa4      	itt	ge
 80046e8:	460c      	movge	r4, r1
 80046ea:	461f      	movge	r7, r3
 80046ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80046f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80046f4:	68a3      	ldr	r3, [r4, #8]
 80046f6:	6861      	ldr	r1, [r4, #4]
 80046f8:	eb0a 0609 	add.w	r6, sl, r9
 80046fc:	42b3      	cmp	r3, r6
 80046fe:	b085      	sub	sp, #20
 8004700:	bfb8      	it	lt
 8004702:	3101      	addlt	r1, #1
 8004704:	f7ff fedc 	bl	80044c0 <_Balloc>
 8004708:	b930      	cbnz	r0, 8004718 <__multiply+0x44>
 800470a:	4602      	mov	r2, r0
 800470c:	4b44      	ldr	r3, [pc, #272]	@ (8004820 <__multiply+0x14c>)
 800470e:	4845      	ldr	r0, [pc, #276]	@ (8004824 <__multiply+0x150>)
 8004710:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004714:	f000 fc92 	bl	800503c <__assert_func>
 8004718:	f100 0514 	add.w	r5, r0, #20
 800471c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004720:	462b      	mov	r3, r5
 8004722:	2200      	movs	r2, #0
 8004724:	4543      	cmp	r3, r8
 8004726:	d321      	bcc.n	800476c <__multiply+0x98>
 8004728:	f107 0114 	add.w	r1, r7, #20
 800472c:	f104 0214 	add.w	r2, r4, #20
 8004730:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004734:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004738:	9302      	str	r3, [sp, #8]
 800473a:	1b13      	subs	r3, r2, r4
 800473c:	3b15      	subs	r3, #21
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	3304      	adds	r3, #4
 8004744:	f104 0715 	add.w	r7, r4, #21
 8004748:	42ba      	cmp	r2, r7
 800474a:	bf38      	it	cc
 800474c:	2304      	movcc	r3, #4
 800474e:	9301      	str	r3, [sp, #4]
 8004750:	9b02      	ldr	r3, [sp, #8]
 8004752:	9103      	str	r1, [sp, #12]
 8004754:	428b      	cmp	r3, r1
 8004756:	d80c      	bhi.n	8004772 <__multiply+0x9e>
 8004758:	2e00      	cmp	r6, #0
 800475a:	dd03      	ble.n	8004764 <__multiply+0x90>
 800475c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004760:	2b00      	cmp	r3, #0
 8004762:	d05b      	beq.n	800481c <__multiply+0x148>
 8004764:	6106      	str	r6, [r0, #16]
 8004766:	b005      	add	sp, #20
 8004768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476c:	f843 2b04 	str.w	r2, [r3], #4
 8004770:	e7d8      	b.n	8004724 <__multiply+0x50>
 8004772:	f8b1 a000 	ldrh.w	sl, [r1]
 8004776:	f1ba 0f00 	cmp.w	sl, #0
 800477a:	d024      	beq.n	80047c6 <__multiply+0xf2>
 800477c:	f104 0e14 	add.w	lr, r4, #20
 8004780:	46a9      	mov	r9, r5
 8004782:	f04f 0c00 	mov.w	ip, #0
 8004786:	f85e 7b04 	ldr.w	r7, [lr], #4
 800478a:	f8d9 3000 	ldr.w	r3, [r9]
 800478e:	fa1f fb87 	uxth.w	fp, r7
 8004792:	b29b      	uxth	r3, r3
 8004794:	fb0a 330b 	mla	r3, sl, fp, r3
 8004798:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800479c:	f8d9 7000 	ldr.w	r7, [r9]
 80047a0:	4463      	add	r3, ip
 80047a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80047a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80047aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80047b4:	4572      	cmp	r2, lr
 80047b6:	f849 3b04 	str.w	r3, [r9], #4
 80047ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80047be:	d8e2      	bhi.n	8004786 <__multiply+0xb2>
 80047c0:	9b01      	ldr	r3, [sp, #4]
 80047c2:	f845 c003 	str.w	ip, [r5, r3]
 80047c6:	9b03      	ldr	r3, [sp, #12]
 80047c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80047cc:	3104      	adds	r1, #4
 80047ce:	f1b9 0f00 	cmp.w	r9, #0
 80047d2:	d021      	beq.n	8004818 <__multiply+0x144>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	f104 0c14 	add.w	ip, r4, #20
 80047da:	46ae      	mov	lr, r5
 80047dc:	f04f 0a00 	mov.w	sl, #0
 80047e0:	f8bc b000 	ldrh.w	fp, [ip]
 80047e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80047e8:	fb09 770b 	mla	r7, r9, fp, r7
 80047ec:	4457      	add	r7, sl
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80047f4:	f84e 3b04 	str.w	r3, [lr], #4
 80047f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80047fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004800:	f8be 3000 	ldrh.w	r3, [lr]
 8004804:	fb09 330a 	mla	r3, r9, sl, r3
 8004808:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800480c:	4562      	cmp	r2, ip
 800480e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004812:	d8e5      	bhi.n	80047e0 <__multiply+0x10c>
 8004814:	9f01      	ldr	r7, [sp, #4]
 8004816:	51eb      	str	r3, [r5, r7]
 8004818:	3504      	adds	r5, #4
 800481a:	e799      	b.n	8004750 <__multiply+0x7c>
 800481c:	3e01      	subs	r6, #1
 800481e:	e79b      	b.n	8004758 <__multiply+0x84>
 8004820:	080057a0 	.word	0x080057a0
 8004824:	080057b1 	.word	0x080057b1

08004828 <__pow5mult>:
 8004828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800482c:	4615      	mov	r5, r2
 800482e:	f012 0203 	ands.w	r2, r2, #3
 8004832:	4607      	mov	r7, r0
 8004834:	460e      	mov	r6, r1
 8004836:	d007      	beq.n	8004848 <__pow5mult+0x20>
 8004838:	4c25      	ldr	r4, [pc, #148]	@ (80048d0 <__pow5mult+0xa8>)
 800483a:	3a01      	subs	r2, #1
 800483c:	2300      	movs	r3, #0
 800483e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004842:	f7ff fe9f 	bl	8004584 <__multadd>
 8004846:	4606      	mov	r6, r0
 8004848:	10ad      	asrs	r5, r5, #2
 800484a:	d03d      	beq.n	80048c8 <__pow5mult+0xa0>
 800484c:	69fc      	ldr	r4, [r7, #28]
 800484e:	b97c      	cbnz	r4, 8004870 <__pow5mult+0x48>
 8004850:	2010      	movs	r0, #16
 8004852:	f7ff fd7f 	bl	8004354 <malloc>
 8004856:	4602      	mov	r2, r0
 8004858:	61f8      	str	r0, [r7, #28]
 800485a:	b928      	cbnz	r0, 8004868 <__pow5mult+0x40>
 800485c:	4b1d      	ldr	r3, [pc, #116]	@ (80048d4 <__pow5mult+0xac>)
 800485e:	481e      	ldr	r0, [pc, #120]	@ (80048d8 <__pow5mult+0xb0>)
 8004860:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004864:	f000 fbea 	bl	800503c <__assert_func>
 8004868:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800486c:	6004      	str	r4, [r0, #0]
 800486e:	60c4      	str	r4, [r0, #12]
 8004870:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004874:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004878:	b94c      	cbnz	r4, 800488e <__pow5mult+0x66>
 800487a:	f240 2171 	movw	r1, #625	@ 0x271
 800487e:	4638      	mov	r0, r7
 8004880:	f7ff ff12 	bl	80046a8 <__i2b>
 8004884:	2300      	movs	r3, #0
 8004886:	f8c8 0008 	str.w	r0, [r8, #8]
 800488a:	4604      	mov	r4, r0
 800488c:	6003      	str	r3, [r0, #0]
 800488e:	f04f 0900 	mov.w	r9, #0
 8004892:	07eb      	lsls	r3, r5, #31
 8004894:	d50a      	bpl.n	80048ac <__pow5mult+0x84>
 8004896:	4631      	mov	r1, r6
 8004898:	4622      	mov	r2, r4
 800489a:	4638      	mov	r0, r7
 800489c:	f7ff ff1a 	bl	80046d4 <__multiply>
 80048a0:	4631      	mov	r1, r6
 80048a2:	4680      	mov	r8, r0
 80048a4:	4638      	mov	r0, r7
 80048a6:	f7ff fe4b 	bl	8004540 <_Bfree>
 80048aa:	4646      	mov	r6, r8
 80048ac:	106d      	asrs	r5, r5, #1
 80048ae:	d00b      	beq.n	80048c8 <__pow5mult+0xa0>
 80048b0:	6820      	ldr	r0, [r4, #0]
 80048b2:	b938      	cbnz	r0, 80048c4 <__pow5mult+0x9c>
 80048b4:	4622      	mov	r2, r4
 80048b6:	4621      	mov	r1, r4
 80048b8:	4638      	mov	r0, r7
 80048ba:	f7ff ff0b 	bl	80046d4 <__multiply>
 80048be:	6020      	str	r0, [r4, #0]
 80048c0:	f8c0 9000 	str.w	r9, [r0]
 80048c4:	4604      	mov	r4, r0
 80048c6:	e7e4      	b.n	8004892 <__pow5mult+0x6a>
 80048c8:	4630      	mov	r0, r6
 80048ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ce:	bf00      	nop
 80048d0:	0800580c 	.word	0x0800580c
 80048d4:	08005731 	.word	0x08005731
 80048d8:	080057b1 	.word	0x080057b1

080048dc <__lshift>:
 80048dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	460c      	mov	r4, r1
 80048e2:	6849      	ldr	r1, [r1, #4]
 80048e4:	6923      	ldr	r3, [r4, #16]
 80048e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80048ea:	68a3      	ldr	r3, [r4, #8]
 80048ec:	4607      	mov	r7, r0
 80048ee:	4691      	mov	r9, r2
 80048f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80048f4:	f108 0601 	add.w	r6, r8, #1
 80048f8:	42b3      	cmp	r3, r6
 80048fa:	db0b      	blt.n	8004914 <__lshift+0x38>
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff fddf 	bl	80044c0 <_Balloc>
 8004902:	4605      	mov	r5, r0
 8004904:	b948      	cbnz	r0, 800491a <__lshift+0x3e>
 8004906:	4602      	mov	r2, r0
 8004908:	4b28      	ldr	r3, [pc, #160]	@ (80049ac <__lshift+0xd0>)
 800490a:	4829      	ldr	r0, [pc, #164]	@ (80049b0 <__lshift+0xd4>)
 800490c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004910:	f000 fb94 	bl	800503c <__assert_func>
 8004914:	3101      	adds	r1, #1
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	e7ee      	b.n	80048f8 <__lshift+0x1c>
 800491a:	2300      	movs	r3, #0
 800491c:	f100 0114 	add.w	r1, r0, #20
 8004920:	f100 0210 	add.w	r2, r0, #16
 8004924:	4618      	mov	r0, r3
 8004926:	4553      	cmp	r3, sl
 8004928:	db33      	blt.n	8004992 <__lshift+0xb6>
 800492a:	6920      	ldr	r0, [r4, #16]
 800492c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004930:	f104 0314 	add.w	r3, r4, #20
 8004934:	f019 091f 	ands.w	r9, r9, #31
 8004938:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800493c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004940:	d02b      	beq.n	800499a <__lshift+0xbe>
 8004942:	f1c9 0e20 	rsb	lr, r9, #32
 8004946:	468a      	mov	sl, r1
 8004948:	2200      	movs	r2, #0
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	fa00 f009 	lsl.w	r0, r0, r9
 8004950:	4310      	orrs	r0, r2
 8004952:	f84a 0b04 	str.w	r0, [sl], #4
 8004956:	f853 2b04 	ldr.w	r2, [r3], #4
 800495a:	459c      	cmp	ip, r3
 800495c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004960:	d8f3      	bhi.n	800494a <__lshift+0x6e>
 8004962:	ebac 0304 	sub.w	r3, ip, r4
 8004966:	3b15      	subs	r3, #21
 8004968:	f023 0303 	bic.w	r3, r3, #3
 800496c:	3304      	adds	r3, #4
 800496e:	f104 0015 	add.w	r0, r4, #21
 8004972:	4584      	cmp	ip, r0
 8004974:	bf38      	it	cc
 8004976:	2304      	movcc	r3, #4
 8004978:	50ca      	str	r2, [r1, r3]
 800497a:	b10a      	cbz	r2, 8004980 <__lshift+0xa4>
 800497c:	f108 0602 	add.w	r6, r8, #2
 8004980:	3e01      	subs	r6, #1
 8004982:	4638      	mov	r0, r7
 8004984:	612e      	str	r6, [r5, #16]
 8004986:	4621      	mov	r1, r4
 8004988:	f7ff fdda 	bl	8004540 <_Bfree>
 800498c:	4628      	mov	r0, r5
 800498e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004992:	f842 0f04 	str.w	r0, [r2, #4]!
 8004996:	3301      	adds	r3, #1
 8004998:	e7c5      	b.n	8004926 <__lshift+0x4a>
 800499a:	3904      	subs	r1, #4
 800499c:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80049a4:	459c      	cmp	ip, r3
 80049a6:	d8f9      	bhi.n	800499c <__lshift+0xc0>
 80049a8:	e7ea      	b.n	8004980 <__lshift+0xa4>
 80049aa:	bf00      	nop
 80049ac:	080057a0 	.word	0x080057a0
 80049b0:	080057b1 	.word	0x080057b1

080049b4 <__mcmp>:
 80049b4:	690a      	ldr	r2, [r1, #16]
 80049b6:	4603      	mov	r3, r0
 80049b8:	6900      	ldr	r0, [r0, #16]
 80049ba:	1a80      	subs	r0, r0, r2
 80049bc:	b530      	push	{r4, r5, lr}
 80049be:	d10e      	bne.n	80049de <__mcmp+0x2a>
 80049c0:	3314      	adds	r3, #20
 80049c2:	3114      	adds	r1, #20
 80049c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80049c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80049cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80049d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80049d4:	4295      	cmp	r5, r2
 80049d6:	d003      	beq.n	80049e0 <__mcmp+0x2c>
 80049d8:	d205      	bcs.n	80049e6 <__mcmp+0x32>
 80049da:	f04f 30ff 	mov.w	r0, #4294967295
 80049de:	bd30      	pop	{r4, r5, pc}
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	d3f3      	bcc.n	80049cc <__mcmp+0x18>
 80049e4:	e7fb      	b.n	80049de <__mcmp+0x2a>
 80049e6:	2001      	movs	r0, #1
 80049e8:	e7f9      	b.n	80049de <__mcmp+0x2a>
	...

080049ec <__mdiff>:
 80049ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f0:	4689      	mov	r9, r1
 80049f2:	4606      	mov	r6, r0
 80049f4:	4611      	mov	r1, r2
 80049f6:	4648      	mov	r0, r9
 80049f8:	4614      	mov	r4, r2
 80049fa:	f7ff ffdb 	bl	80049b4 <__mcmp>
 80049fe:	1e05      	subs	r5, r0, #0
 8004a00:	d112      	bne.n	8004a28 <__mdiff+0x3c>
 8004a02:	4629      	mov	r1, r5
 8004a04:	4630      	mov	r0, r6
 8004a06:	f7ff fd5b 	bl	80044c0 <_Balloc>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	b928      	cbnz	r0, 8004a1a <__mdiff+0x2e>
 8004a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b0c <__mdiff+0x120>)
 8004a10:	f240 2137 	movw	r1, #567	@ 0x237
 8004a14:	483e      	ldr	r0, [pc, #248]	@ (8004b10 <__mdiff+0x124>)
 8004a16:	f000 fb11 	bl	800503c <__assert_func>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a20:	4610      	mov	r0, r2
 8004a22:	b003      	add	sp, #12
 8004a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a28:	bfbc      	itt	lt
 8004a2a:	464b      	movlt	r3, r9
 8004a2c:	46a1      	movlt	r9, r4
 8004a2e:	4630      	mov	r0, r6
 8004a30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004a34:	bfba      	itte	lt
 8004a36:	461c      	movlt	r4, r3
 8004a38:	2501      	movlt	r5, #1
 8004a3a:	2500      	movge	r5, #0
 8004a3c:	f7ff fd40 	bl	80044c0 <_Balloc>
 8004a40:	4602      	mov	r2, r0
 8004a42:	b918      	cbnz	r0, 8004a4c <__mdiff+0x60>
 8004a44:	4b31      	ldr	r3, [pc, #196]	@ (8004b0c <__mdiff+0x120>)
 8004a46:	f240 2145 	movw	r1, #581	@ 0x245
 8004a4a:	e7e3      	b.n	8004a14 <__mdiff+0x28>
 8004a4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004a50:	6926      	ldr	r6, [r4, #16]
 8004a52:	60c5      	str	r5, [r0, #12]
 8004a54:	f109 0310 	add.w	r3, r9, #16
 8004a58:	f109 0514 	add.w	r5, r9, #20
 8004a5c:	f104 0e14 	add.w	lr, r4, #20
 8004a60:	f100 0b14 	add.w	fp, r0, #20
 8004a64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004a68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	46d9      	mov	r9, fp
 8004a70:	f04f 0c00 	mov.w	ip, #0
 8004a74:	9b01      	ldr	r3, [sp, #4]
 8004a76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004a7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004a7e:	9301      	str	r3, [sp, #4]
 8004a80:	fa1f f38a 	uxth.w	r3, sl
 8004a84:	4619      	mov	r1, r3
 8004a86:	b283      	uxth	r3, r0
 8004a88:	1acb      	subs	r3, r1, r3
 8004a8a:	0c00      	lsrs	r0, r0, #16
 8004a8c:	4463      	add	r3, ip
 8004a8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004a92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004a9c:	4576      	cmp	r6, lr
 8004a9e:	f849 3b04 	str.w	r3, [r9], #4
 8004aa2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004aa6:	d8e5      	bhi.n	8004a74 <__mdiff+0x88>
 8004aa8:	1b33      	subs	r3, r6, r4
 8004aaa:	3b15      	subs	r3, #21
 8004aac:	f023 0303 	bic.w	r3, r3, #3
 8004ab0:	3415      	adds	r4, #21
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	42a6      	cmp	r6, r4
 8004ab6:	bf38      	it	cc
 8004ab8:	2304      	movcc	r3, #4
 8004aba:	441d      	add	r5, r3
 8004abc:	445b      	add	r3, fp
 8004abe:	461e      	mov	r6, r3
 8004ac0:	462c      	mov	r4, r5
 8004ac2:	4544      	cmp	r4, r8
 8004ac4:	d30e      	bcc.n	8004ae4 <__mdiff+0xf8>
 8004ac6:	f108 0103 	add.w	r1, r8, #3
 8004aca:	1b49      	subs	r1, r1, r5
 8004acc:	f021 0103 	bic.w	r1, r1, #3
 8004ad0:	3d03      	subs	r5, #3
 8004ad2:	45a8      	cmp	r8, r5
 8004ad4:	bf38      	it	cc
 8004ad6:	2100      	movcc	r1, #0
 8004ad8:	440b      	add	r3, r1
 8004ada:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ade:	b191      	cbz	r1, 8004b06 <__mdiff+0x11a>
 8004ae0:	6117      	str	r7, [r2, #16]
 8004ae2:	e79d      	b.n	8004a20 <__mdiff+0x34>
 8004ae4:	f854 1b04 	ldr.w	r1, [r4], #4
 8004ae8:	46e6      	mov	lr, ip
 8004aea:	0c08      	lsrs	r0, r1, #16
 8004aec:	fa1c fc81 	uxtah	ip, ip, r1
 8004af0:	4471      	add	r1, lr
 8004af2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004af6:	b289      	uxth	r1, r1
 8004af8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004afc:	f846 1b04 	str.w	r1, [r6], #4
 8004b00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b04:	e7dd      	b.n	8004ac2 <__mdiff+0xd6>
 8004b06:	3f01      	subs	r7, #1
 8004b08:	e7e7      	b.n	8004ada <__mdiff+0xee>
 8004b0a:	bf00      	nop
 8004b0c:	080057a0 	.word	0x080057a0
 8004b10:	080057b1 	.word	0x080057b1

08004b14 <__d2b>:
 8004b14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b18:	460f      	mov	r7, r1
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	ec59 8b10 	vmov	r8, r9, d0
 8004b20:	4616      	mov	r6, r2
 8004b22:	f7ff fccd 	bl	80044c0 <_Balloc>
 8004b26:	4604      	mov	r4, r0
 8004b28:	b930      	cbnz	r0, 8004b38 <__d2b+0x24>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	4b23      	ldr	r3, [pc, #140]	@ (8004bbc <__d2b+0xa8>)
 8004b2e:	4824      	ldr	r0, [pc, #144]	@ (8004bc0 <__d2b+0xac>)
 8004b30:	f240 310f 	movw	r1, #783	@ 0x30f
 8004b34:	f000 fa82 	bl	800503c <__assert_func>
 8004b38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004b3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b40:	b10d      	cbz	r5, 8004b46 <__d2b+0x32>
 8004b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	f1b8 0300 	subs.w	r3, r8, #0
 8004b4c:	d023      	beq.n	8004b96 <__d2b+0x82>
 8004b4e:	4668      	mov	r0, sp
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	f7ff fd7c 	bl	800464e <__lo0bits>
 8004b56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004b5a:	b1d0      	cbz	r0, 8004b92 <__d2b+0x7e>
 8004b5c:	f1c0 0320 	rsb	r3, r0, #32
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	430b      	orrs	r3, r1
 8004b66:	40c2      	lsrs	r2, r0
 8004b68:	6163      	str	r3, [r4, #20]
 8004b6a:	9201      	str	r2, [sp, #4]
 8004b6c:	9b01      	ldr	r3, [sp, #4]
 8004b6e:	61a3      	str	r3, [r4, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf0c      	ite	eq
 8004b74:	2201      	moveq	r2, #1
 8004b76:	2202      	movne	r2, #2
 8004b78:	6122      	str	r2, [r4, #16]
 8004b7a:	b1a5      	cbz	r5, 8004ba6 <__d2b+0x92>
 8004b7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004b80:	4405      	add	r5, r0
 8004b82:	603d      	str	r5, [r7, #0]
 8004b84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004b88:	6030      	str	r0, [r6, #0]
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	b003      	add	sp, #12
 8004b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b92:	6161      	str	r1, [r4, #20]
 8004b94:	e7ea      	b.n	8004b6c <__d2b+0x58>
 8004b96:	a801      	add	r0, sp, #4
 8004b98:	f7ff fd59 	bl	800464e <__lo0bits>
 8004b9c:	9b01      	ldr	r3, [sp, #4]
 8004b9e:	6163      	str	r3, [r4, #20]
 8004ba0:	3020      	adds	r0, #32
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	e7e8      	b.n	8004b78 <__d2b+0x64>
 8004ba6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004baa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004bae:	6038      	str	r0, [r7, #0]
 8004bb0:	6918      	ldr	r0, [r3, #16]
 8004bb2:	f7ff fd2d 	bl	8004610 <__hi0bits>
 8004bb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004bba:	e7e5      	b.n	8004b88 <__d2b+0x74>
 8004bbc:	080057a0 	.word	0x080057a0
 8004bc0:	080057b1 	.word	0x080057b1

08004bc4 <__ssputs_r>:
 8004bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc8:	688e      	ldr	r6, [r1, #8]
 8004bca:	461f      	mov	r7, r3
 8004bcc:	42be      	cmp	r6, r7
 8004bce:	680b      	ldr	r3, [r1, #0]
 8004bd0:	4682      	mov	sl, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4690      	mov	r8, r2
 8004bd6:	d82d      	bhi.n	8004c34 <__ssputs_r+0x70>
 8004bd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004be0:	d026      	beq.n	8004c30 <__ssputs_r+0x6c>
 8004be2:	6965      	ldr	r5, [r4, #20]
 8004be4:	6909      	ldr	r1, [r1, #16]
 8004be6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bea:	eba3 0901 	sub.w	r9, r3, r1
 8004bee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bf2:	1c7b      	adds	r3, r7, #1
 8004bf4:	444b      	add	r3, r9
 8004bf6:	106d      	asrs	r5, r5, #1
 8004bf8:	429d      	cmp	r5, r3
 8004bfa:	bf38      	it	cc
 8004bfc:	461d      	movcc	r5, r3
 8004bfe:	0553      	lsls	r3, r2, #21
 8004c00:	d527      	bpl.n	8004c52 <__ssputs_r+0x8e>
 8004c02:	4629      	mov	r1, r5
 8004c04:	f7ff fbd0 	bl	80043a8 <_malloc_r>
 8004c08:	4606      	mov	r6, r0
 8004c0a:	b360      	cbz	r0, 8004c66 <__ssputs_r+0xa2>
 8004c0c:	6921      	ldr	r1, [r4, #16]
 8004c0e:	464a      	mov	r2, r9
 8004c10:	f000 fa06 	bl	8005020 <memcpy>
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	6126      	str	r6, [r4, #16]
 8004c22:	6165      	str	r5, [r4, #20]
 8004c24:	444e      	add	r6, r9
 8004c26:	eba5 0509 	sub.w	r5, r5, r9
 8004c2a:	6026      	str	r6, [r4, #0]
 8004c2c:	60a5      	str	r5, [r4, #8]
 8004c2e:	463e      	mov	r6, r7
 8004c30:	42be      	cmp	r6, r7
 8004c32:	d900      	bls.n	8004c36 <__ssputs_r+0x72>
 8004c34:	463e      	mov	r6, r7
 8004c36:	6820      	ldr	r0, [r4, #0]
 8004c38:	4632      	mov	r2, r6
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	f000 f9c6 	bl	8004fcc <memmove>
 8004c40:	68a3      	ldr	r3, [r4, #8]
 8004c42:	1b9b      	subs	r3, r3, r6
 8004c44:	60a3      	str	r3, [r4, #8]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	4433      	add	r3, r6
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c52:	462a      	mov	r2, r5
 8004c54:	f000 fa36 	bl	80050c4 <_realloc_r>
 8004c58:	4606      	mov	r6, r0
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d1e0      	bne.n	8004c20 <__ssputs_r+0x5c>
 8004c5e:	6921      	ldr	r1, [r4, #16]
 8004c60:	4650      	mov	r0, sl
 8004c62:	f7ff fb2d 	bl	80042c0 <_free_r>
 8004c66:	230c      	movs	r3, #12
 8004c68:	f8ca 3000 	str.w	r3, [sl]
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c72:	81a3      	strh	r3, [r4, #12]
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	e7e9      	b.n	8004c4e <__ssputs_r+0x8a>
	...

08004c7c <_svfiprintf_r>:
 8004c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c80:	4698      	mov	r8, r3
 8004c82:	898b      	ldrh	r3, [r1, #12]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	b09d      	sub	sp, #116	@ 0x74
 8004c88:	4607      	mov	r7, r0
 8004c8a:	460d      	mov	r5, r1
 8004c8c:	4614      	mov	r4, r2
 8004c8e:	d510      	bpl.n	8004cb2 <_svfiprintf_r+0x36>
 8004c90:	690b      	ldr	r3, [r1, #16]
 8004c92:	b973      	cbnz	r3, 8004cb2 <_svfiprintf_r+0x36>
 8004c94:	2140      	movs	r1, #64	@ 0x40
 8004c96:	f7ff fb87 	bl	80043a8 <_malloc_r>
 8004c9a:	6028      	str	r0, [r5, #0]
 8004c9c:	6128      	str	r0, [r5, #16]
 8004c9e:	b930      	cbnz	r0, 8004cae <_svfiprintf_r+0x32>
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	b01d      	add	sp, #116	@ 0x74
 8004caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cae:	2340      	movs	r3, #64	@ 0x40
 8004cb0:	616b      	str	r3, [r5, #20]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cc0:	2330      	movs	r3, #48	@ 0x30
 8004cc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e60 <_svfiprintf_r+0x1e4>
 8004cc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cca:	f04f 0901 	mov.w	r9, #1
 8004cce:	4623      	mov	r3, r4
 8004cd0:	469a      	mov	sl, r3
 8004cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd6:	b10a      	cbz	r2, 8004cdc <_svfiprintf_r+0x60>
 8004cd8:	2a25      	cmp	r2, #37	@ 0x25
 8004cda:	d1f9      	bne.n	8004cd0 <_svfiprintf_r+0x54>
 8004cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8004ce0:	d00b      	beq.n	8004cfa <_svfiprintf_r+0x7e>
 8004ce2:	465b      	mov	r3, fp
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4638      	mov	r0, r7
 8004cea:	f7ff ff6b 	bl	8004bc4 <__ssputs_r>
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f000 80a7 	beq.w	8004e42 <_svfiprintf_r+0x1c6>
 8004cf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cf6:	445a      	add	r2, fp
 8004cf8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 809f 	beq.w	8004e42 <_svfiprintf_r+0x1c6>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0e:	f10a 0a01 	add.w	sl, sl, #1
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	9307      	str	r3, [sp, #28]
 8004d16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d1c:	4654      	mov	r4, sl
 8004d1e:	2205      	movs	r2, #5
 8004d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d24:	484e      	ldr	r0, [pc, #312]	@ (8004e60 <_svfiprintf_r+0x1e4>)
 8004d26:	f7fb fa5b 	bl	80001e0 <memchr>
 8004d2a:	9a04      	ldr	r2, [sp, #16]
 8004d2c:	b9d8      	cbnz	r0, 8004d66 <_svfiprintf_r+0xea>
 8004d2e:	06d0      	lsls	r0, r2, #27
 8004d30:	bf44      	itt	mi
 8004d32:	2320      	movmi	r3, #32
 8004d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d38:	0711      	lsls	r1, r2, #28
 8004d3a:	bf44      	itt	mi
 8004d3c:	232b      	movmi	r3, #43	@ 0x2b
 8004d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d42:	f89a 3000 	ldrb.w	r3, [sl]
 8004d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d48:	d015      	beq.n	8004d76 <_svfiprintf_r+0xfa>
 8004d4a:	9a07      	ldr	r2, [sp, #28]
 8004d4c:	4654      	mov	r4, sl
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f04f 0c0a 	mov.w	ip, #10
 8004d54:	4621      	mov	r1, r4
 8004d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d5a:	3b30      	subs	r3, #48	@ 0x30
 8004d5c:	2b09      	cmp	r3, #9
 8004d5e:	d94b      	bls.n	8004df8 <_svfiprintf_r+0x17c>
 8004d60:	b1b0      	cbz	r0, 8004d90 <_svfiprintf_r+0x114>
 8004d62:	9207      	str	r2, [sp, #28]
 8004d64:	e014      	b.n	8004d90 <_svfiprintf_r+0x114>
 8004d66:	eba0 0308 	sub.w	r3, r0, r8
 8004d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	9304      	str	r3, [sp, #16]
 8004d72:	46a2      	mov	sl, r4
 8004d74:	e7d2      	b.n	8004d1c <_svfiprintf_r+0xa0>
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	1d19      	adds	r1, r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	9103      	str	r1, [sp, #12]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfbb      	ittet	lt
 8004d82:	425b      	neglt	r3, r3
 8004d84:	f042 0202 	orrlt.w	r2, r2, #2
 8004d88:	9307      	strge	r3, [sp, #28]
 8004d8a:	9307      	strlt	r3, [sp, #28]
 8004d8c:	bfb8      	it	lt
 8004d8e:	9204      	strlt	r2, [sp, #16]
 8004d90:	7823      	ldrb	r3, [r4, #0]
 8004d92:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d94:	d10a      	bne.n	8004dac <_svfiprintf_r+0x130>
 8004d96:	7863      	ldrb	r3, [r4, #1]
 8004d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d9a:	d132      	bne.n	8004e02 <_svfiprintf_r+0x186>
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	1d1a      	adds	r2, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	9203      	str	r2, [sp, #12]
 8004da4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004da8:	3402      	adds	r4, #2
 8004daa:	9305      	str	r3, [sp, #20]
 8004dac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e70 <_svfiprintf_r+0x1f4>
 8004db0:	7821      	ldrb	r1, [r4, #0]
 8004db2:	2203      	movs	r2, #3
 8004db4:	4650      	mov	r0, sl
 8004db6:	f7fb fa13 	bl	80001e0 <memchr>
 8004dba:	b138      	cbz	r0, 8004dcc <_svfiprintf_r+0x150>
 8004dbc:	9b04      	ldr	r3, [sp, #16]
 8004dbe:	eba0 000a 	sub.w	r0, r0, sl
 8004dc2:	2240      	movs	r2, #64	@ 0x40
 8004dc4:	4082      	lsls	r2, r0
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	3401      	adds	r4, #1
 8004dca:	9304      	str	r3, [sp, #16]
 8004dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd0:	4824      	ldr	r0, [pc, #144]	@ (8004e64 <_svfiprintf_r+0x1e8>)
 8004dd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004dd6:	2206      	movs	r2, #6
 8004dd8:	f7fb fa02 	bl	80001e0 <memchr>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	d036      	beq.n	8004e4e <_svfiprintf_r+0x1d2>
 8004de0:	4b21      	ldr	r3, [pc, #132]	@ (8004e68 <_svfiprintf_r+0x1ec>)
 8004de2:	bb1b      	cbnz	r3, 8004e2c <_svfiprintf_r+0x1b0>
 8004de4:	9b03      	ldr	r3, [sp, #12]
 8004de6:	3307      	adds	r3, #7
 8004de8:	f023 0307 	bic.w	r3, r3, #7
 8004dec:	3308      	adds	r3, #8
 8004dee:	9303      	str	r3, [sp, #12]
 8004df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df2:	4433      	add	r3, r6
 8004df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004df6:	e76a      	b.n	8004cce <_svfiprintf_r+0x52>
 8004df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	2001      	movs	r0, #1
 8004e00:	e7a8      	b.n	8004d54 <_svfiprintf_r+0xd8>
 8004e02:	2300      	movs	r3, #0
 8004e04:	3401      	adds	r4, #1
 8004e06:	9305      	str	r3, [sp, #20]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f04f 0c0a 	mov.w	ip, #10
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e14:	3a30      	subs	r2, #48	@ 0x30
 8004e16:	2a09      	cmp	r2, #9
 8004e18:	d903      	bls.n	8004e22 <_svfiprintf_r+0x1a6>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0c6      	beq.n	8004dac <_svfiprintf_r+0x130>
 8004e1e:	9105      	str	r1, [sp, #20]
 8004e20:	e7c4      	b.n	8004dac <_svfiprintf_r+0x130>
 8004e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e26:	4604      	mov	r4, r0
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e7f0      	b.n	8004e0e <_svfiprintf_r+0x192>
 8004e2c:	ab03      	add	r3, sp, #12
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	462a      	mov	r2, r5
 8004e32:	4b0e      	ldr	r3, [pc, #56]	@ (8004e6c <_svfiprintf_r+0x1f0>)
 8004e34:	a904      	add	r1, sp, #16
 8004e36:	4638      	mov	r0, r7
 8004e38:	f7fd fe96 	bl	8002b68 <_printf_float>
 8004e3c:	1c42      	adds	r2, r0, #1
 8004e3e:	4606      	mov	r6, r0
 8004e40:	d1d6      	bne.n	8004df0 <_svfiprintf_r+0x174>
 8004e42:	89ab      	ldrh	r3, [r5, #12]
 8004e44:	065b      	lsls	r3, r3, #25
 8004e46:	f53f af2d 	bmi.w	8004ca4 <_svfiprintf_r+0x28>
 8004e4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e4c:	e72c      	b.n	8004ca8 <_svfiprintf_r+0x2c>
 8004e4e:	ab03      	add	r3, sp, #12
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	462a      	mov	r2, r5
 8004e54:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <_svfiprintf_r+0x1f0>)
 8004e56:	a904      	add	r1, sp, #16
 8004e58:	4638      	mov	r0, r7
 8004e5a:	f7fe f91d 	bl	8003098 <_printf_i>
 8004e5e:	e7ed      	b.n	8004e3c <_svfiprintf_r+0x1c0>
 8004e60:	08005908 	.word	0x08005908
 8004e64:	08005912 	.word	0x08005912
 8004e68:	08002b69 	.word	0x08002b69
 8004e6c:	08004bc5 	.word	0x08004bc5
 8004e70:	0800590e 	.word	0x0800590e

08004e74 <__sflush_r>:
 8004e74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7c:	0716      	lsls	r6, r2, #28
 8004e7e:	4605      	mov	r5, r0
 8004e80:	460c      	mov	r4, r1
 8004e82:	d454      	bmi.n	8004f2e <__sflush_r+0xba>
 8004e84:	684b      	ldr	r3, [r1, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	dc02      	bgt.n	8004e90 <__sflush_r+0x1c>
 8004e8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	dd48      	ble.n	8004f22 <__sflush_r+0xae>
 8004e90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e92:	2e00      	cmp	r6, #0
 8004e94:	d045      	beq.n	8004f22 <__sflush_r+0xae>
 8004e96:	2300      	movs	r3, #0
 8004e98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e9c:	682f      	ldr	r7, [r5, #0]
 8004e9e:	6a21      	ldr	r1, [r4, #32]
 8004ea0:	602b      	str	r3, [r5, #0]
 8004ea2:	d030      	beq.n	8004f06 <__sflush_r+0x92>
 8004ea4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	0759      	lsls	r1, r3, #29
 8004eaa:	d505      	bpl.n	8004eb8 <__sflush_r+0x44>
 8004eac:	6863      	ldr	r3, [r4, #4]
 8004eae:	1ad2      	subs	r2, r2, r3
 8004eb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004eb2:	b10b      	cbz	r3, 8004eb8 <__sflush_r+0x44>
 8004eb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004eb6:	1ad2      	subs	r2, r2, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ebc:	6a21      	ldr	r1, [r4, #32]
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	47b0      	blx	r6
 8004ec2:	1c43      	adds	r3, r0, #1
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	d106      	bne.n	8004ed6 <__sflush_r+0x62>
 8004ec8:	6829      	ldr	r1, [r5, #0]
 8004eca:	291d      	cmp	r1, #29
 8004ecc:	d82b      	bhi.n	8004f26 <__sflush_r+0xb2>
 8004ece:	4a2a      	ldr	r2, [pc, #168]	@ (8004f78 <__sflush_r+0x104>)
 8004ed0:	410a      	asrs	r2, r1
 8004ed2:	07d6      	lsls	r6, r2, #31
 8004ed4:	d427      	bmi.n	8004f26 <__sflush_r+0xb2>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	6062      	str	r2, [r4, #4]
 8004eda:	04d9      	lsls	r1, r3, #19
 8004edc:	6922      	ldr	r2, [r4, #16]
 8004ede:	6022      	str	r2, [r4, #0]
 8004ee0:	d504      	bpl.n	8004eec <__sflush_r+0x78>
 8004ee2:	1c42      	adds	r2, r0, #1
 8004ee4:	d101      	bne.n	8004eea <__sflush_r+0x76>
 8004ee6:	682b      	ldr	r3, [r5, #0]
 8004ee8:	b903      	cbnz	r3, 8004eec <__sflush_r+0x78>
 8004eea:	6560      	str	r0, [r4, #84]	@ 0x54
 8004eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eee:	602f      	str	r7, [r5, #0]
 8004ef0:	b1b9      	cbz	r1, 8004f22 <__sflush_r+0xae>
 8004ef2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ef6:	4299      	cmp	r1, r3
 8004ef8:	d002      	beq.n	8004f00 <__sflush_r+0x8c>
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7ff f9e0 	bl	80042c0 <_free_r>
 8004f00:	2300      	movs	r3, #0
 8004f02:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f04:	e00d      	b.n	8004f22 <__sflush_r+0xae>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b0      	blx	r6
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	1c50      	adds	r0, r2, #1
 8004f10:	d1c9      	bne.n	8004ea6 <__sflush_r+0x32>
 8004f12:	682b      	ldr	r3, [r5, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0c6      	beq.n	8004ea6 <__sflush_r+0x32>
 8004f18:	2b1d      	cmp	r3, #29
 8004f1a:	d001      	beq.n	8004f20 <__sflush_r+0xac>
 8004f1c:	2b16      	cmp	r3, #22
 8004f1e:	d11e      	bne.n	8004f5e <__sflush_r+0xea>
 8004f20:	602f      	str	r7, [r5, #0]
 8004f22:	2000      	movs	r0, #0
 8004f24:	e022      	b.n	8004f6c <__sflush_r+0xf8>
 8004f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f2a:	b21b      	sxth	r3, r3
 8004f2c:	e01b      	b.n	8004f66 <__sflush_r+0xf2>
 8004f2e:	690f      	ldr	r7, [r1, #16]
 8004f30:	2f00      	cmp	r7, #0
 8004f32:	d0f6      	beq.n	8004f22 <__sflush_r+0xae>
 8004f34:	0793      	lsls	r3, r2, #30
 8004f36:	680e      	ldr	r6, [r1, #0]
 8004f38:	bf08      	it	eq
 8004f3a:	694b      	ldreq	r3, [r1, #20]
 8004f3c:	600f      	str	r7, [r1, #0]
 8004f3e:	bf18      	it	ne
 8004f40:	2300      	movne	r3, #0
 8004f42:	eba6 0807 	sub.w	r8, r6, r7
 8004f46:	608b      	str	r3, [r1, #8]
 8004f48:	f1b8 0f00 	cmp.w	r8, #0
 8004f4c:	dde9      	ble.n	8004f22 <__sflush_r+0xae>
 8004f4e:	6a21      	ldr	r1, [r4, #32]
 8004f50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f52:	4643      	mov	r3, r8
 8004f54:	463a      	mov	r2, r7
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b0      	blx	r6
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	dc08      	bgt.n	8004f70 <__sflush_r+0xfc>
 8004f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	f04f 30ff 	mov.w	r0, #4294967295
 8004f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f70:	4407      	add	r7, r0
 8004f72:	eba8 0800 	sub.w	r8, r8, r0
 8004f76:	e7e7      	b.n	8004f48 <__sflush_r+0xd4>
 8004f78:	dfbffffe 	.word	0xdfbffffe

08004f7c <_fflush_r>:
 8004f7c:	b538      	push	{r3, r4, r5, lr}
 8004f7e:	690b      	ldr	r3, [r1, #16]
 8004f80:	4605      	mov	r5, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	b913      	cbnz	r3, 8004f8c <_fflush_r+0x10>
 8004f86:	2500      	movs	r5, #0
 8004f88:	4628      	mov	r0, r5
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	b118      	cbz	r0, 8004f96 <_fflush_r+0x1a>
 8004f8e:	6a03      	ldr	r3, [r0, #32]
 8004f90:	b90b      	cbnz	r3, 8004f96 <_fflush_r+0x1a>
 8004f92:	f7fe fa2d 	bl	80033f0 <__sinit>
 8004f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f3      	beq.n	8004f86 <_fflush_r+0xa>
 8004f9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004fa0:	07d0      	lsls	r0, r2, #31
 8004fa2:	d404      	bmi.n	8004fae <_fflush_r+0x32>
 8004fa4:	0599      	lsls	r1, r3, #22
 8004fa6:	d402      	bmi.n	8004fae <_fflush_r+0x32>
 8004fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004faa:	f7fe fb38 	bl	800361e <__retarget_lock_acquire_recursive>
 8004fae:	4628      	mov	r0, r5
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	f7ff ff5f 	bl	8004e74 <__sflush_r>
 8004fb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fb8:	07da      	lsls	r2, r3, #31
 8004fba:	4605      	mov	r5, r0
 8004fbc:	d4e4      	bmi.n	8004f88 <_fflush_r+0xc>
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	059b      	lsls	r3, r3, #22
 8004fc2:	d4e1      	bmi.n	8004f88 <_fflush_r+0xc>
 8004fc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fc6:	f7fe fb2b 	bl	8003620 <__retarget_lock_release_recursive>
 8004fca:	e7dd      	b.n	8004f88 <_fflush_r+0xc>

08004fcc <memmove>:
 8004fcc:	4288      	cmp	r0, r1
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	eb01 0402 	add.w	r4, r1, r2
 8004fd4:	d902      	bls.n	8004fdc <memmove+0x10>
 8004fd6:	4284      	cmp	r4, r0
 8004fd8:	4623      	mov	r3, r4
 8004fda:	d807      	bhi.n	8004fec <memmove+0x20>
 8004fdc:	1e43      	subs	r3, r0, #1
 8004fde:	42a1      	cmp	r1, r4
 8004fe0:	d008      	beq.n	8004ff4 <memmove+0x28>
 8004fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fea:	e7f8      	b.n	8004fde <memmove+0x12>
 8004fec:	4402      	add	r2, r0
 8004fee:	4601      	mov	r1, r0
 8004ff0:	428a      	cmp	r2, r1
 8004ff2:	d100      	bne.n	8004ff6 <memmove+0x2a>
 8004ff4:	bd10      	pop	{r4, pc}
 8004ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ffe:	e7f7      	b.n	8004ff0 <memmove+0x24>

08005000 <_sbrk_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4d06      	ldr	r5, [pc, #24]	@ (800501c <_sbrk_r+0x1c>)
 8005004:	2300      	movs	r3, #0
 8005006:	4604      	mov	r4, r0
 8005008:	4608      	mov	r0, r1
 800500a:	602b      	str	r3, [r5, #0]
 800500c:	f7fc fa96 	bl	800153c <_sbrk>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_sbrk_r+0x1a>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	b103      	cbz	r3, 800501a <_sbrk_r+0x1a>
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	200007f4 	.word	0x200007f4

08005020 <memcpy>:
 8005020:	440a      	add	r2, r1
 8005022:	4291      	cmp	r1, r2
 8005024:	f100 33ff 	add.w	r3, r0, #4294967295
 8005028:	d100      	bne.n	800502c <memcpy+0xc>
 800502a:	4770      	bx	lr
 800502c:	b510      	push	{r4, lr}
 800502e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005036:	4291      	cmp	r1, r2
 8005038:	d1f9      	bne.n	800502e <memcpy+0xe>
 800503a:	bd10      	pop	{r4, pc}

0800503c <__assert_func>:
 800503c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800503e:	4614      	mov	r4, r2
 8005040:	461a      	mov	r2, r3
 8005042:	4b09      	ldr	r3, [pc, #36]	@ (8005068 <__assert_func+0x2c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4605      	mov	r5, r0
 8005048:	68d8      	ldr	r0, [r3, #12]
 800504a:	b954      	cbnz	r4, 8005062 <__assert_func+0x26>
 800504c:	4b07      	ldr	r3, [pc, #28]	@ (800506c <__assert_func+0x30>)
 800504e:	461c      	mov	r4, r3
 8005050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005054:	9100      	str	r1, [sp, #0]
 8005056:	462b      	mov	r3, r5
 8005058:	4905      	ldr	r1, [pc, #20]	@ (8005070 <__assert_func+0x34>)
 800505a:	f000 f86f 	bl	800513c <fiprintf>
 800505e:	f000 f87f 	bl	8005160 <abort>
 8005062:	4b04      	ldr	r3, [pc, #16]	@ (8005074 <__assert_func+0x38>)
 8005064:	e7f4      	b.n	8005050 <__assert_func+0x14>
 8005066:	bf00      	nop
 8005068:	20000018 	.word	0x20000018
 800506c:	0800595e 	.word	0x0800595e
 8005070:	08005930 	.word	0x08005930
 8005074:	08005923 	.word	0x08005923

08005078 <_calloc_r>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	fba1 5402 	umull	r5, r4, r1, r2
 800507e:	b93c      	cbnz	r4, 8005090 <_calloc_r+0x18>
 8005080:	4629      	mov	r1, r5
 8005082:	f7ff f991 	bl	80043a8 <_malloc_r>
 8005086:	4606      	mov	r6, r0
 8005088:	b928      	cbnz	r0, 8005096 <_calloc_r+0x1e>
 800508a:	2600      	movs	r6, #0
 800508c:	4630      	mov	r0, r6
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	220c      	movs	r2, #12
 8005092:	6002      	str	r2, [r0, #0]
 8005094:	e7f9      	b.n	800508a <_calloc_r+0x12>
 8005096:	462a      	mov	r2, r5
 8005098:	4621      	mov	r1, r4
 800509a:	f7fe fa42 	bl	8003522 <memset>
 800509e:	e7f5      	b.n	800508c <_calloc_r+0x14>

080050a0 <__ascii_mbtowc>:
 80050a0:	b082      	sub	sp, #8
 80050a2:	b901      	cbnz	r1, 80050a6 <__ascii_mbtowc+0x6>
 80050a4:	a901      	add	r1, sp, #4
 80050a6:	b142      	cbz	r2, 80050ba <__ascii_mbtowc+0x1a>
 80050a8:	b14b      	cbz	r3, 80050be <__ascii_mbtowc+0x1e>
 80050aa:	7813      	ldrb	r3, [r2, #0]
 80050ac:	600b      	str	r3, [r1, #0]
 80050ae:	7812      	ldrb	r2, [r2, #0]
 80050b0:	1e10      	subs	r0, r2, #0
 80050b2:	bf18      	it	ne
 80050b4:	2001      	movne	r0, #1
 80050b6:	b002      	add	sp, #8
 80050b8:	4770      	bx	lr
 80050ba:	4610      	mov	r0, r2
 80050bc:	e7fb      	b.n	80050b6 <__ascii_mbtowc+0x16>
 80050be:	f06f 0001 	mvn.w	r0, #1
 80050c2:	e7f8      	b.n	80050b6 <__ascii_mbtowc+0x16>

080050c4 <_realloc_r>:
 80050c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c8:	4680      	mov	r8, r0
 80050ca:	4615      	mov	r5, r2
 80050cc:	460c      	mov	r4, r1
 80050ce:	b921      	cbnz	r1, 80050da <_realloc_r+0x16>
 80050d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050d4:	4611      	mov	r1, r2
 80050d6:	f7ff b967 	b.w	80043a8 <_malloc_r>
 80050da:	b92a      	cbnz	r2, 80050e8 <_realloc_r+0x24>
 80050dc:	f7ff f8f0 	bl	80042c0 <_free_r>
 80050e0:	2400      	movs	r4, #0
 80050e2:	4620      	mov	r0, r4
 80050e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050e8:	f000 f841 	bl	800516e <_malloc_usable_size_r>
 80050ec:	4285      	cmp	r5, r0
 80050ee:	4606      	mov	r6, r0
 80050f0:	d802      	bhi.n	80050f8 <_realloc_r+0x34>
 80050f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80050f6:	d8f4      	bhi.n	80050e2 <_realloc_r+0x1e>
 80050f8:	4629      	mov	r1, r5
 80050fa:	4640      	mov	r0, r8
 80050fc:	f7ff f954 	bl	80043a8 <_malloc_r>
 8005100:	4607      	mov	r7, r0
 8005102:	2800      	cmp	r0, #0
 8005104:	d0ec      	beq.n	80050e0 <_realloc_r+0x1c>
 8005106:	42b5      	cmp	r5, r6
 8005108:	462a      	mov	r2, r5
 800510a:	4621      	mov	r1, r4
 800510c:	bf28      	it	cs
 800510e:	4632      	movcs	r2, r6
 8005110:	f7ff ff86 	bl	8005020 <memcpy>
 8005114:	4621      	mov	r1, r4
 8005116:	4640      	mov	r0, r8
 8005118:	f7ff f8d2 	bl	80042c0 <_free_r>
 800511c:	463c      	mov	r4, r7
 800511e:	e7e0      	b.n	80050e2 <_realloc_r+0x1e>

08005120 <__ascii_wctomb>:
 8005120:	4603      	mov	r3, r0
 8005122:	4608      	mov	r0, r1
 8005124:	b141      	cbz	r1, 8005138 <__ascii_wctomb+0x18>
 8005126:	2aff      	cmp	r2, #255	@ 0xff
 8005128:	d904      	bls.n	8005134 <__ascii_wctomb+0x14>
 800512a:	228a      	movs	r2, #138	@ 0x8a
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	f04f 30ff 	mov.w	r0, #4294967295
 8005132:	4770      	bx	lr
 8005134:	700a      	strb	r2, [r1, #0]
 8005136:	2001      	movs	r0, #1
 8005138:	4770      	bx	lr
	...

0800513c <fiprintf>:
 800513c:	b40e      	push	{r1, r2, r3}
 800513e:	b503      	push	{r0, r1, lr}
 8005140:	4601      	mov	r1, r0
 8005142:	ab03      	add	r3, sp, #12
 8005144:	4805      	ldr	r0, [pc, #20]	@ (800515c <fiprintf+0x20>)
 8005146:	f853 2b04 	ldr.w	r2, [r3], #4
 800514a:	6800      	ldr	r0, [r0, #0]
 800514c:	9301      	str	r3, [sp, #4]
 800514e:	f000 f83f 	bl	80051d0 <_vfiprintf_r>
 8005152:	b002      	add	sp, #8
 8005154:	f85d eb04 	ldr.w	lr, [sp], #4
 8005158:	b003      	add	sp, #12
 800515a:	4770      	bx	lr
 800515c:	20000018 	.word	0x20000018

08005160 <abort>:
 8005160:	b508      	push	{r3, lr}
 8005162:	2006      	movs	r0, #6
 8005164:	f000 fa08 	bl	8005578 <raise>
 8005168:	2001      	movs	r0, #1
 800516a:	f7fc f9b7 	bl	80014dc <_exit>

0800516e <_malloc_usable_size_r>:
 800516e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005172:	1f18      	subs	r0, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	bfbc      	itt	lt
 8005178:	580b      	ldrlt	r3, [r1, r0]
 800517a:	18c0      	addlt	r0, r0, r3
 800517c:	4770      	bx	lr

0800517e <__sfputc_r>:
 800517e:	6893      	ldr	r3, [r2, #8]
 8005180:	3b01      	subs	r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	b410      	push	{r4}
 8005186:	6093      	str	r3, [r2, #8]
 8005188:	da08      	bge.n	800519c <__sfputc_r+0x1e>
 800518a:	6994      	ldr	r4, [r2, #24]
 800518c:	42a3      	cmp	r3, r4
 800518e:	db01      	blt.n	8005194 <__sfputc_r+0x16>
 8005190:	290a      	cmp	r1, #10
 8005192:	d103      	bne.n	800519c <__sfputc_r+0x1e>
 8005194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005198:	f000 b932 	b.w	8005400 <__swbuf_r>
 800519c:	6813      	ldr	r3, [r2, #0]
 800519e:	1c58      	adds	r0, r3, #1
 80051a0:	6010      	str	r0, [r2, #0]
 80051a2:	7019      	strb	r1, [r3, #0]
 80051a4:	4608      	mov	r0, r1
 80051a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <__sfputs_r>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	4606      	mov	r6, r0
 80051b0:	460f      	mov	r7, r1
 80051b2:	4614      	mov	r4, r2
 80051b4:	18d5      	adds	r5, r2, r3
 80051b6:	42ac      	cmp	r4, r5
 80051b8:	d101      	bne.n	80051be <__sfputs_r+0x12>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e007      	b.n	80051ce <__sfputs_r+0x22>
 80051be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c2:	463a      	mov	r2, r7
 80051c4:	4630      	mov	r0, r6
 80051c6:	f7ff ffda 	bl	800517e <__sfputc_r>
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	d1f3      	bne.n	80051b6 <__sfputs_r+0xa>
 80051ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080051d0 <_vfiprintf_r>:
 80051d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	460d      	mov	r5, r1
 80051d6:	b09d      	sub	sp, #116	@ 0x74
 80051d8:	4614      	mov	r4, r2
 80051da:	4698      	mov	r8, r3
 80051dc:	4606      	mov	r6, r0
 80051de:	b118      	cbz	r0, 80051e8 <_vfiprintf_r+0x18>
 80051e0:	6a03      	ldr	r3, [r0, #32]
 80051e2:	b90b      	cbnz	r3, 80051e8 <_vfiprintf_r+0x18>
 80051e4:	f7fe f904 	bl	80033f0 <__sinit>
 80051e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051ea:	07d9      	lsls	r1, r3, #31
 80051ec:	d405      	bmi.n	80051fa <_vfiprintf_r+0x2a>
 80051ee:	89ab      	ldrh	r3, [r5, #12]
 80051f0:	059a      	lsls	r2, r3, #22
 80051f2:	d402      	bmi.n	80051fa <_vfiprintf_r+0x2a>
 80051f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051f6:	f7fe fa12 	bl	800361e <__retarget_lock_acquire_recursive>
 80051fa:	89ab      	ldrh	r3, [r5, #12]
 80051fc:	071b      	lsls	r3, r3, #28
 80051fe:	d501      	bpl.n	8005204 <_vfiprintf_r+0x34>
 8005200:	692b      	ldr	r3, [r5, #16]
 8005202:	b99b      	cbnz	r3, 800522c <_vfiprintf_r+0x5c>
 8005204:	4629      	mov	r1, r5
 8005206:	4630      	mov	r0, r6
 8005208:	f000 f938 	bl	800547c <__swsetup_r>
 800520c:	b170      	cbz	r0, 800522c <_vfiprintf_r+0x5c>
 800520e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005210:	07dc      	lsls	r4, r3, #31
 8005212:	d504      	bpl.n	800521e <_vfiprintf_r+0x4e>
 8005214:	f04f 30ff 	mov.w	r0, #4294967295
 8005218:	b01d      	add	sp, #116	@ 0x74
 800521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521e:	89ab      	ldrh	r3, [r5, #12]
 8005220:	0598      	lsls	r0, r3, #22
 8005222:	d4f7      	bmi.n	8005214 <_vfiprintf_r+0x44>
 8005224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005226:	f7fe f9fb 	bl	8003620 <__retarget_lock_release_recursive>
 800522a:	e7f3      	b.n	8005214 <_vfiprintf_r+0x44>
 800522c:	2300      	movs	r3, #0
 800522e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005230:	2320      	movs	r3, #32
 8005232:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005236:	f8cd 800c 	str.w	r8, [sp, #12]
 800523a:	2330      	movs	r3, #48	@ 0x30
 800523c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053ec <_vfiprintf_r+0x21c>
 8005240:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005244:	f04f 0901 	mov.w	r9, #1
 8005248:	4623      	mov	r3, r4
 800524a:	469a      	mov	sl, r3
 800524c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005250:	b10a      	cbz	r2, 8005256 <_vfiprintf_r+0x86>
 8005252:	2a25      	cmp	r2, #37	@ 0x25
 8005254:	d1f9      	bne.n	800524a <_vfiprintf_r+0x7a>
 8005256:	ebba 0b04 	subs.w	fp, sl, r4
 800525a:	d00b      	beq.n	8005274 <_vfiprintf_r+0xa4>
 800525c:	465b      	mov	r3, fp
 800525e:	4622      	mov	r2, r4
 8005260:	4629      	mov	r1, r5
 8005262:	4630      	mov	r0, r6
 8005264:	f7ff ffa2 	bl	80051ac <__sfputs_r>
 8005268:	3001      	adds	r0, #1
 800526a:	f000 80a7 	beq.w	80053bc <_vfiprintf_r+0x1ec>
 800526e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005270:	445a      	add	r2, fp
 8005272:	9209      	str	r2, [sp, #36]	@ 0x24
 8005274:	f89a 3000 	ldrb.w	r3, [sl]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 809f 	beq.w	80053bc <_vfiprintf_r+0x1ec>
 800527e:	2300      	movs	r3, #0
 8005280:	f04f 32ff 	mov.w	r2, #4294967295
 8005284:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005288:	f10a 0a01 	add.w	sl, sl, #1
 800528c:	9304      	str	r3, [sp, #16]
 800528e:	9307      	str	r3, [sp, #28]
 8005290:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005294:	931a      	str	r3, [sp, #104]	@ 0x68
 8005296:	4654      	mov	r4, sl
 8005298:	2205      	movs	r2, #5
 800529a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800529e:	4853      	ldr	r0, [pc, #332]	@ (80053ec <_vfiprintf_r+0x21c>)
 80052a0:	f7fa ff9e 	bl	80001e0 <memchr>
 80052a4:	9a04      	ldr	r2, [sp, #16]
 80052a6:	b9d8      	cbnz	r0, 80052e0 <_vfiprintf_r+0x110>
 80052a8:	06d1      	lsls	r1, r2, #27
 80052aa:	bf44      	itt	mi
 80052ac:	2320      	movmi	r3, #32
 80052ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052b2:	0713      	lsls	r3, r2, #28
 80052b4:	bf44      	itt	mi
 80052b6:	232b      	movmi	r3, #43	@ 0x2b
 80052b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052bc:	f89a 3000 	ldrb.w	r3, [sl]
 80052c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80052c2:	d015      	beq.n	80052f0 <_vfiprintf_r+0x120>
 80052c4:	9a07      	ldr	r2, [sp, #28]
 80052c6:	4654      	mov	r4, sl
 80052c8:	2000      	movs	r0, #0
 80052ca:	f04f 0c0a 	mov.w	ip, #10
 80052ce:	4621      	mov	r1, r4
 80052d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052d4:	3b30      	subs	r3, #48	@ 0x30
 80052d6:	2b09      	cmp	r3, #9
 80052d8:	d94b      	bls.n	8005372 <_vfiprintf_r+0x1a2>
 80052da:	b1b0      	cbz	r0, 800530a <_vfiprintf_r+0x13a>
 80052dc:	9207      	str	r2, [sp, #28]
 80052de:	e014      	b.n	800530a <_vfiprintf_r+0x13a>
 80052e0:	eba0 0308 	sub.w	r3, r0, r8
 80052e4:	fa09 f303 	lsl.w	r3, r9, r3
 80052e8:	4313      	orrs	r3, r2
 80052ea:	9304      	str	r3, [sp, #16]
 80052ec:	46a2      	mov	sl, r4
 80052ee:	e7d2      	b.n	8005296 <_vfiprintf_r+0xc6>
 80052f0:	9b03      	ldr	r3, [sp, #12]
 80052f2:	1d19      	adds	r1, r3, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	9103      	str	r1, [sp, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	bfbb      	ittet	lt
 80052fc:	425b      	neglt	r3, r3
 80052fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005302:	9307      	strge	r3, [sp, #28]
 8005304:	9307      	strlt	r3, [sp, #28]
 8005306:	bfb8      	it	lt
 8005308:	9204      	strlt	r2, [sp, #16]
 800530a:	7823      	ldrb	r3, [r4, #0]
 800530c:	2b2e      	cmp	r3, #46	@ 0x2e
 800530e:	d10a      	bne.n	8005326 <_vfiprintf_r+0x156>
 8005310:	7863      	ldrb	r3, [r4, #1]
 8005312:	2b2a      	cmp	r3, #42	@ 0x2a
 8005314:	d132      	bne.n	800537c <_vfiprintf_r+0x1ac>
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	1d1a      	adds	r2, r3, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	9203      	str	r2, [sp, #12]
 800531e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005322:	3402      	adds	r4, #2
 8005324:	9305      	str	r3, [sp, #20]
 8005326:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053fc <_vfiprintf_r+0x22c>
 800532a:	7821      	ldrb	r1, [r4, #0]
 800532c:	2203      	movs	r2, #3
 800532e:	4650      	mov	r0, sl
 8005330:	f7fa ff56 	bl	80001e0 <memchr>
 8005334:	b138      	cbz	r0, 8005346 <_vfiprintf_r+0x176>
 8005336:	9b04      	ldr	r3, [sp, #16]
 8005338:	eba0 000a 	sub.w	r0, r0, sl
 800533c:	2240      	movs	r2, #64	@ 0x40
 800533e:	4082      	lsls	r2, r0
 8005340:	4313      	orrs	r3, r2
 8005342:	3401      	adds	r4, #1
 8005344:	9304      	str	r3, [sp, #16]
 8005346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800534a:	4829      	ldr	r0, [pc, #164]	@ (80053f0 <_vfiprintf_r+0x220>)
 800534c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005350:	2206      	movs	r2, #6
 8005352:	f7fa ff45 	bl	80001e0 <memchr>
 8005356:	2800      	cmp	r0, #0
 8005358:	d03f      	beq.n	80053da <_vfiprintf_r+0x20a>
 800535a:	4b26      	ldr	r3, [pc, #152]	@ (80053f4 <_vfiprintf_r+0x224>)
 800535c:	bb1b      	cbnz	r3, 80053a6 <_vfiprintf_r+0x1d6>
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	3307      	adds	r3, #7
 8005362:	f023 0307 	bic.w	r3, r3, #7
 8005366:	3308      	adds	r3, #8
 8005368:	9303      	str	r3, [sp, #12]
 800536a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800536c:	443b      	add	r3, r7
 800536e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005370:	e76a      	b.n	8005248 <_vfiprintf_r+0x78>
 8005372:	fb0c 3202 	mla	r2, ip, r2, r3
 8005376:	460c      	mov	r4, r1
 8005378:	2001      	movs	r0, #1
 800537a:	e7a8      	b.n	80052ce <_vfiprintf_r+0xfe>
 800537c:	2300      	movs	r3, #0
 800537e:	3401      	adds	r4, #1
 8005380:	9305      	str	r3, [sp, #20]
 8005382:	4619      	mov	r1, r3
 8005384:	f04f 0c0a 	mov.w	ip, #10
 8005388:	4620      	mov	r0, r4
 800538a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800538e:	3a30      	subs	r2, #48	@ 0x30
 8005390:	2a09      	cmp	r2, #9
 8005392:	d903      	bls.n	800539c <_vfiprintf_r+0x1cc>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0c6      	beq.n	8005326 <_vfiprintf_r+0x156>
 8005398:	9105      	str	r1, [sp, #20]
 800539a:	e7c4      	b.n	8005326 <_vfiprintf_r+0x156>
 800539c:	fb0c 2101 	mla	r1, ip, r1, r2
 80053a0:	4604      	mov	r4, r0
 80053a2:	2301      	movs	r3, #1
 80053a4:	e7f0      	b.n	8005388 <_vfiprintf_r+0x1b8>
 80053a6:	ab03      	add	r3, sp, #12
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	462a      	mov	r2, r5
 80053ac:	4b12      	ldr	r3, [pc, #72]	@ (80053f8 <_vfiprintf_r+0x228>)
 80053ae:	a904      	add	r1, sp, #16
 80053b0:	4630      	mov	r0, r6
 80053b2:	f7fd fbd9 	bl	8002b68 <_printf_float>
 80053b6:	4607      	mov	r7, r0
 80053b8:	1c78      	adds	r0, r7, #1
 80053ba:	d1d6      	bne.n	800536a <_vfiprintf_r+0x19a>
 80053bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053be:	07d9      	lsls	r1, r3, #31
 80053c0:	d405      	bmi.n	80053ce <_vfiprintf_r+0x1fe>
 80053c2:	89ab      	ldrh	r3, [r5, #12]
 80053c4:	059a      	lsls	r2, r3, #22
 80053c6:	d402      	bmi.n	80053ce <_vfiprintf_r+0x1fe>
 80053c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053ca:	f7fe f929 	bl	8003620 <__retarget_lock_release_recursive>
 80053ce:	89ab      	ldrh	r3, [r5, #12]
 80053d0:	065b      	lsls	r3, r3, #25
 80053d2:	f53f af1f 	bmi.w	8005214 <_vfiprintf_r+0x44>
 80053d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053d8:	e71e      	b.n	8005218 <_vfiprintf_r+0x48>
 80053da:	ab03      	add	r3, sp, #12
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	462a      	mov	r2, r5
 80053e0:	4b05      	ldr	r3, [pc, #20]	@ (80053f8 <_vfiprintf_r+0x228>)
 80053e2:	a904      	add	r1, sp, #16
 80053e4:	4630      	mov	r0, r6
 80053e6:	f7fd fe57 	bl	8003098 <_printf_i>
 80053ea:	e7e4      	b.n	80053b6 <_vfiprintf_r+0x1e6>
 80053ec:	08005908 	.word	0x08005908
 80053f0:	08005912 	.word	0x08005912
 80053f4:	08002b69 	.word	0x08002b69
 80053f8:	080051ad 	.word	0x080051ad
 80053fc:	0800590e 	.word	0x0800590e

08005400 <__swbuf_r>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	460e      	mov	r6, r1
 8005404:	4614      	mov	r4, r2
 8005406:	4605      	mov	r5, r0
 8005408:	b118      	cbz	r0, 8005412 <__swbuf_r+0x12>
 800540a:	6a03      	ldr	r3, [r0, #32]
 800540c:	b90b      	cbnz	r3, 8005412 <__swbuf_r+0x12>
 800540e:	f7fd ffef 	bl	80033f0 <__sinit>
 8005412:	69a3      	ldr	r3, [r4, #24]
 8005414:	60a3      	str	r3, [r4, #8]
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	071a      	lsls	r2, r3, #28
 800541a:	d501      	bpl.n	8005420 <__swbuf_r+0x20>
 800541c:	6923      	ldr	r3, [r4, #16]
 800541e:	b943      	cbnz	r3, 8005432 <__swbuf_r+0x32>
 8005420:	4621      	mov	r1, r4
 8005422:	4628      	mov	r0, r5
 8005424:	f000 f82a 	bl	800547c <__swsetup_r>
 8005428:	b118      	cbz	r0, 8005432 <__swbuf_r+0x32>
 800542a:	f04f 37ff 	mov.w	r7, #4294967295
 800542e:	4638      	mov	r0, r7
 8005430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	6922      	ldr	r2, [r4, #16]
 8005436:	1a98      	subs	r0, r3, r2
 8005438:	6963      	ldr	r3, [r4, #20]
 800543a:	b2f6      	uxtb	r6, r6
 800543c:	4283      	cmp	r3, r0
 800543e:	4637      	mov	r7, r6
 8005440:	dc05      	bgt.n	800544e <__swbuf_r+0x4e>
 8005442:	4621      	mov	r1, r4
 8005444:	4628      	mov	r0, r5
 8005446:	f7ff fd99 	bl	8004f7c <_fflush_r>
 800544a:	2800      	cmp	r0, #0
 800544c:	d1ed      	bne.n	800542a <__swbuf_r+0x2a>
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	3b01      	subs	r3, #1
 8005452:	60a3      	str	r3, [r4, #8]
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	6022      	str	r2, [r4, #0]
 800545a:	701e      	strb	r6, [r3, #0]
 800545c:	6962      	ldr	r2, [r4, #20]
 800545e:	1c43      	adds	r3, r0, #1
 8005460:	429a      	cmp	r2, r3
 8005462:	d004      	beq.n	800546e <__swbuf_r+0x6e>
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	07db      	lsls	r3, r3, #31
 8005468:	d5e1      	bpl.n	800542e <__swbuf_r+0x2e>
 800546a:	2e0a      	cmp	r6, #10
 800546c:	d1df      	bne.n	800542e <__swbuf_r+0x2e>
 800546e:	4621      	mov	r1, r4
 8005470:	4628      	mov	r0, r5
 8005472:	f7ff fd83 	bl	8004f7c <_fflush_r>
 8005476:	2800      	cmp	r0, #0
 8005478:	d0d9      	beq.n	800542e <__swbuf_r+0x2e>
 800547a:	e7d6      	b.n	800542a <__swbuf_r+0x2a>

0800547c <__swsetup_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4b29      	ldr	r3, [pc, #164]	@ (8005524 <__swsetup_r+0xa8>)
 8005480:	4605      	mov	r5, r0
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	460c      	mov	r4, r1
 8005486:	b118      	cbz	r0, 8005490 <__swsetup_r+0x14>
 8005488:	6a03      	ldr	r3, [r0, #32]
 800548a:	b90b      	cbnz	r3, 8005490 <__swsetup_r+0x14>
 800548c:	f7fd ffb0 	bl	80033f0 <__sinit>
 8005490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005494:	0719      	lsls	r1, r3, #28
 8005496:	d422      	bmi.n	80054de <__swsetup_r+0x62>
 8005498:	06da      	lsls	r2, r3, #27
 800549a:	d407      	bmi.n	80054ac <__swsetup_r+0x30>
 800549c:	2209      	movs	r2, #9
 800549e:	602a      	str	r2, [r5, #0]
 80054a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295
 80054aa:	e033      	b.n	8005514 <__swsetup_r+0x98>
 80054ac:	0758      	lsls	r0, r3, #29
 80054ae:	d512      	bpl.n	80054d6 <__swsetup_r+0x5a>
 80054b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054b2:	b141      	cbz	r1, 80054c6 <__swsetup_r+0x4a>
 80054b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054b8:	4299      	cmp	r1, r3
 80054ba:	d002      	beq.n	80054c2 <__swsetup_r+0x46>
 80054bc:	4628      	mov	r0, r5
 80054be:	f7fe feff 	bl	80042c0 <_free_r>
 80054c2:	2300      	movs	r3, #0
 80054c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054cc:	81a3      	strh	r3, [r4, #12]
 80054ce:	2300      	movs	r3, #0
 80054d0:	6063      	str	r3, [r4, #4]
 80054d2:	6923      	ldr	r3, [r4, #16]
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f043 0308 	orr.w	r3, r3, #8
 80054dc:	81a3      	strh	r3, [r4, #12]
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	b94b      	cbnz	r3, 80054f6 <__swsetup_r+0x7a>
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ec:	d003      	beq.n	80054f6 <__swsetup_r+0x7a>
 80054ee:	4621      	mov	r1, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 f883 	bl	80055fc <__smakebuf_r>
 80054f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054fa:	f013 0201 	ands.w	r2, r3, #1
 80054fe:	d00a      	beq.n	8005516 <__swsetup_r+0x9a>
 8005500:	2200      	movs	r2, #0
 8005502:	60a2      	str	r2, [r4, #8]
 8005504:	6962      	ldr	r2, [r4, #20]
 8005506:	4252      	negs	r2, r2
 8005508:	61a2      	str	r2, [r4, #24]
 800550a:	6922      	ldr	r2, [r4, #16]
 800550c:	b942      	cbnz	r2, 8005520 <__swsetup_r+0xa4>
 800550e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005512:	d1c5      	bne.n	80054a0 <__swsetup_r+0x24>
 8005514:	bd38      	pop	{r3, r4, r5, pc}
 8005516:	0799      	lsls	r1, r3, #30
 8005518:	bf58      	it	pl
 800551a:	6962      	ldrpl	r2, [r4, #20]
 800551c:	60a2      	str	r2, [r4, #8]
 800551e:	e7f4      	b.n	800550a <__swsetup_r+0x8e>
 8005520:	2000      	movs	r0, #0
 8005522:	e7f7      	b.n	8005514 <__swsetup_r+0x98>
 8005524:	20000018 	.word	0x20000018

08005528 <_raise_r>:
 8005528:	291f      	cmp	r1, #31
 800552a:	b538      	push	{r3, r4, r5, lr}
 800552c:	4605      	mov	r5, r0
 800552e:	460c      	mov	r4, r1
 8005530:	d904      	bls.n	800553c <_raise_r+0x14>
 8005532:	2316      	movs	r3, #22
 8005534:	6003      	str	r3, [r0, #0]
 8005536:	f04f 30ff 	mov.w	r0, #4294967295
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800553e:	b112      	cbz	r2, 8005546 <_raise_r+0x1e>
 8005540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005544:	b94b      	cbnz	r3, 800555a <_raise_r+0x32>
 8005546:	4628      	mov	r0, r5
 8005548:	f000 f830 	bl	80055ac <_getpid_r>
 800554c:	4622      	mov	r2, r4
 800554e:	4601      	mov	r1, r0
 8005550:	4628      	mov	r0, r5
 8005552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005556:	f000 b817 	b.w	8005588 <_kill_r>
 800555a:	2b01      	cmp	r3, #1
 800555c:	d00a      	beq.n	8005574 <_raise_r+0x4c>
 800555e:	1c59      	adds	r1, r3, #1
 8005560:	d103      	bne.n	800556a <_raise_r+0x42>
 8005562:	2316      	movs	r3, #22
 8005564:	6003      	str	r3, [r0, #0]
 8005566:	2001      	movs	r0, #1
 8005568:	e7e7      	b.n	800553a <_raise_r+0x12>
 800556a:	2100      	movs	r1, #0
 800556c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005570:	4620      	mov	r0, r4
 8005572:	4798      	blx	r3
 8005574:	2000      	movs	r0, #0
 8005576:	e7e0      	b.n	800553a <_raise_r+0x12>

08005578 <raise>:
 8005578:	4b02      	ldr	r3, [pc, #8]	@ (8005584 <raise+0xc>)
 800557a:	4601      	mov	r1, r0
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	f7ff bfd3 	b.w	8005528 <_raise_r>
 8005582:	bf00      	nop
 8005584:	20000018 	.word	0x20000018

08005588 <_kill_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4d07      	ldr	r5, [pc, #28]	@ (80055a8 <_kill_r+0x20>)
 800558c:	2300      	movs	r3, #0
 800558e:	4604      	mov	r4, r0
 8005590:	4608      	mov	r0, r1
 8005592:	4611      	mov	r1, r2
 8005594:	602b      	str	r3, [r5, #0]
 8005596:	f7fb ff99 	bl	80014cc <_kill>
 800559a:	1c43      	adds	r3, r0, #1
 800559c:	d102      	bne.n	80055a4 <_kill_r+0x1c>
 800559e:	682b      	ldr	r3, [r5, #0]
 80055a0:	b103      	cbz	r3, 80055a4 <_kill_r+0x1c>
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	bd38      	pop	{r3, r4, r5, pc}
 80055a6:	bf00      	nop
 80055a8:	200007f4 	.word	0x200007f4

080055ac <_getpid_r>:
 80055ac:	f7fb bf8c 	b.w	80014c8 <_getpid>

080055b0 <__swhatbuf_r>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	460c      	mov	r4, r1
 80055b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b8:	2900      	cmp	r1, #0
 80055ba:	b096      	sub	sp, #88	@ 0x58
 80055bc:	4615      	mov	r5, r2
 80055be:	461e      	mov	r6, r3
 80055c0:	da0d      	bge.n	80055de <__swhatbuf_r+0x2e>
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055c8:	f04f 0100 	mov.w	r1, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2340      	movne	r3, #64	@ 0x40
 80055d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055d4:	2000      	movs	r0, #0
 80055d6:	6031      	str	r1, [r6, #0]
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	b016      	add	sp, #88	@ 0x58
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	466a      	mov	r2, sp
 80055e0:	f000 f848 	bl	8005674 <_fstat_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	dbec      	blt.n	80055c2 <__swhatbuf_r+0x12>
 80055e8:	9901      	ldr	r1, [sp, #4]
 80055ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80055ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80055f2:	4259      	negs	r1, r3
 80055f4:	4159      	adcs	r1, r3
 80055f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80055fa:	e7eb      	b.n	80055d4 <__swhatbuf_r+0x24>

080055fc <__smakebuf_r>:
 80055fc:	898b      	ldrh	r3, [r1, #12]
 80055fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005600:	079d      	lsls	r5, r3, #30
 8005602:	4606      	mov	r6, r0
 8005604:	460c      	mov	r4, r1
 8005606:	d507      	bpl.n	8005618 <__smakebuf_r+0x1c>
 8005608:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	6123      	str	r3, [r4, #16]
 8005610:	2301      	movs	r3, #1
 8005612:	6163      	str	r3, [r4, #20]
 8005614:	b003      	add	sp, #12
 8005616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005618:	ab01      	add	r3, sp, #4
 800561a:	466a      	mov	r2, sp
 800561c:	f7ff ffc8 	bl	80055b0 <__swhatbuf_r>
 8005620:	9f00      	ldr	r7, [sp, #0]
 8005622:	4605      	mov	r5, r0
 8005624:	4639      	mov	r1, r7
 8005626:	4630      	mov	r0, r6
 8005628:	f7fe febe 	bl	80043a8 <_malloc_r>
 800562c:	b948      	cbnz	r0, 8005642 <__smakebuf_r+0x46>
 800562e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005632:	059a      	lsls	r2, r3, #22
 8005634:	d4ee      	bmi.n	8005614 <__smakebuf_r+0x18>
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	f043 0302 	orr.w	r3, r3, #2
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	e7e2      	b.n	8005608 <__smakebuf_r+0xc>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	6020      	str	r0, [r4, #0]
 8005646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564a:	81a3      	strh	r3, [r4, #12]
 800564c:	9b01      	ldr	r3, [sp, #4]
 800564e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005652:	b15b      	cbz	r3, 800566c <__smakebuf_r+0x70>
 8005654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005658:	4630      	mov	r0, r6
 800565a:	f000 f81d 	bl	8005698 <_isatty_r>
 800565e:	b128      	cbz	r0, 800566c <__smakebuf_r+0x70>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	81a3      	strh	r3, [r4, #12]
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	431d      	orrs	r5, r3
 8005670:	81a5      	strh	r5, [r4, #12]
 8005672:	e7cf      	b.n	8005614 <__smakebuf_r+0x18>

08005674 <_fstat_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4d07      	ldr	r5, [pc, #28]	@ (8005694 <_fstat_r+0x20>)
 8005678:	2300      	movs	r3, #0
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	602b      	str	r3, [r5, #0]
 8005682:	f7fb ff51 	bl	8001528 <_fstat>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d102      	bne.n	8005690 <_fstat_r+0x1c>
 800568a:	682b      	ldr	r3, [r5, #0]
 800568c:	b103      	cbz	r3, 8005690 <_fstat_r+0x1c>
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	bd38      	pop	{r3, r4, r5, pc}
 8005692:	bf00      	nop
 8005694:	200007f4 	.word	0x200007f4

08005698 <_isatty_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4d06      	ldr	r5, [pc, #24]	@ (80056b4 <_isatty_r+0x1c>)
 800569c:	2300      	movs	r3, #0
 800569e:	4604      	mov	r4, r0
 80056a0:	4608      	mov	r0, r1
 80056a2:	602b      	str	r3, [r5, #0]
 80056a4:	f7fb ff46 	bl	8001534 <_isatty>
 80056a8:	1c43      	adds	r3, r0, #1
 80056aa:	d102      	bne.n	80056b2 <_isatty_r+0x1a>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	b103      	cbz	r3, 80056b2 <_isatty_r+0x1a>
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
 80056b4:	200007f4 	.word	0x200007f4

080056b8 <_init>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	bf00      	nop
 80056bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056be:	bc08      	pop	{r3}
 80056c0:	469e      	mov	lr, r3
 80056c2:	4770      	bx	lr

080056c4 <_fini>:
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c6:	bf00      	nop
 80056c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ca:	bc08      	pop	{r3}
 80056cc:	469e      	mov	lr, r3
 80056ce:	4770      	bx	lr
